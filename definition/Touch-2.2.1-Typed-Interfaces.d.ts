// Type definitions for Touch 2.2.1
// Project: http://www.sencha.com/products/extjs/
// Definitions by: Brian Kotek <https://github.com/brian428/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

declare module Ext {
	export interface IAbstractComponent extends Ext.IEvented {
	}
}
declare module Ext {
	export interface IAbstractManager extends Ext.IBase {
		/** [Property] (Ext.util.HashMap) */
		all?: Ext.util.IHashMap;
		/** [Method] Creates and returns an instance of whatever this manager manages based on the supplied type and config object  
		* @param config any The config object. 
		* @param defaultType string If no type is discovered in the config object, we fall back to this type. 
		*/
		create?( config?:any, defaultType?:string ): any;
		/** [Method] Executes the specified function once for each item in the collection  
		* @param fn any The function to execute. 
		* @param scope any The scope to execute in. 
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Returns an item by id  
		* @param id string The id of the item. 
		*/
		get?( id?:string ): any;
		/** [Method] Gets the number of items in the collection  */
		getCount?(): number;
		/** [Method] Checks if an item type is registered  
		* @param type string The mnemonic string by which the class may be looked up. 
		*/
		isRegistered?( type?:string ): bool;
		/** [Method] Registers a function that will be called when an item with the specified id is added to the manager  
		* @param id string The item id. 
		* @param fn any The callback function. Called with a single parameter, the item. 
		* @param scope any The scope (this reference) in which the callback is executed. Defaults to the item. 
		*/
		onAvailable?( id?:string, fn?:any, scope?:any ): void;
		/** [Method] Registers an item to be managed  
		* @param item any The item to register. 
		*/
		register?( item?:any ): void;
		/** [Method] Registers a new item constructor keyed by a type key  
		* @param type string The mnemonic string by which the class may be looked up. 
		* @param cls any The new instance class. 
		*/
		registerType?( type?:string, cls?:any ): void;
		/** [Method] Unregisters an item by removing it from this manager  
		* @param item any The item to unregister. 
		*/
		unregister?( item?:any ): void;
	}
}
declare module Ext {
	export interface IActionSheet extends Ext.ISheet {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom  */
		getBottom?(): number;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of height  */
		getHeight?(): string;
		/** [Method] Returns the value of left  */
		getLeft?(): number;
		/** [Method] Returns the value of right  */
		getRight?(): number;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom  
		* @param bottom number 
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of height  
		* @param height string 
		*/
		setHeight?( height?:string ): void;
		/** [Method] Sets the value of left  
		* @param left number 
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right  
		* @param right number 
		*/
		setRight?( right?:number ): void;
	}
}
declare module Ext {
	export interface IAjax extends Ext.data.IConnection {
	}
	export class Ajax {
	}
}
declare module Ext {
	export interface IAnim extends Ext.IBase {
	}
	export class Anim {
		/** [Method]  
		* @param config any 
		*/
		constructor( config?:any );
		/** [Method] Initialize configuration for this class  
		* @param el any 
		* @param runConfig any 
		*/
		static initConfig( el?:any, runConfig?:any ): any;
		/** [Method] Used to run an animation on a specific element  
		* @param el any The element to animate. 
		* @param anim any The animation type, defined in Ext.anims. 
		* @param config any The config object for the animation. 
		*/
		static run( el?:any, anim?:any, config?:any ): any;
		static run( el?:Ext.IElement, anim?:string, config?:any ): void;
		static run( el?:HTMLElement, anim?:string, config?:any ): void;
	}
}
declare module Ext {
	export interface IAnimationQueue extends Ext.IBase {
	}
	export class AnimationQueue {
		/** [Method]  */
		constructor();
		/** [Method]  
		* @param fn any 
		* @param scope any 
		* @param args any 
		*/
		static start( fn?:any, scope?:any, args?:any ): void;
		/** [Method]  
		* @param fn any 
		* @param scope any 
		* @param args any 
		*/
		static stop( fn?:any, scope?:any, args?:any ): void;
	}
}
declare module Ext {
	export interface IAnims {
	}
	export class Anims {
	}
}
declare module Ext.app {
	export interface IAction extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Array) */
		args?: any[];
		/** [Config Option] (Array) */
		beforeFilters?: any[];
		/** [Config Option] (Ext.app.Controller) */
		controller?: Ext.app.IController;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Starts execution of this Action by calling each of the beforeFilters in turn if any are specified  before calling t  */
		execute?(): void;
		/** [Method] Returns the value of action  */
		getAction?(): string;
		/** [Method] Returns the value of application  */
		getApplication?(): Ext.app.IApplication;
		/** [Method] Returns the value of args  */
		getArgs?(): any[];
		/** [Method] Returns the value of beforeFilters  */
		getBeforeFilters?(): any[];
		/** [Method] Returns the value of controller  */
		getController?(): Ext.app.IController;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Returns the value of title  */
		getTitle?(): any;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Resumes the execution of this Action or starts it if it had not been started already */
		resume?(): void;
		/** [Method] Sets the value of action  
		* @param action string 
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of application  
		* @param application Ext.app.IApplication 
		*/
		setApplication?( application?:Ext.app.IApplication ): void;
		/** [Method] Sets the value of args  
		* @param args any[] 
		*/
		setArgs?( args?:any[] ): void;
		/** [Method] Sets the value of beforeFilters  
		* @param beforeFilters any[] 
		*/
		setBeforeFilters?( beforeFilters?:any[] ): void;
		/** [Method] Sets the value of controller  
		* @param controller Ext.app.IController 
		*/
		setController?( controller?:Ext.app.IController ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of title  
		* @param title any 
		*/
		setTitle?( title?:any ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
	}
}
declare module Ext.app {
	export interface IApplication extends Ext.app.IController {
		/** [Config Option] (String) */
		appFolder?: string;
		/** [Config Option] (Array) */
		controllers?: any[];
		/** [Config Option] (Ext.app.Profile) */
		currentProfile?: Ext.app.IProfile;
		/** [Config Option] (Boolean) */
		glossOnIcon?: bool;
		/** [Config Option] (Ext.app.History) */
		history?: Ext.app.IHistory;
		/** [Config Option] (String/Object) */
		icon?: any;
		/** [Config Option] (Boolean) */
		isIconPrecomposed?: bool;
		/** [Config Option] (Function) */
		launch?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		phoneIcon?: string;
		/** [Config Option] (String) */
		phoneStartupScreen?: string;
		/** [Config Option] (Array) */
		profiles?: any[];
		/** [Config Option] (Ext.app.Router) */
		router?: Ext.app.IRouter;
		/** [Config Option] (Object) */
		startupImage?: any;
		/** [Config Option] (String) */
		statusBarStyle?: string;
		/** [Config Option] (String) */
		tabletIcon?: string;
		/** [Config Option] (String) */
		tabletStartupScreen?: string;
		/** [Method] Dispatches a given Ext app Action to the relevant Controller instance  
		* @param action Ext.app.IAction The action to dispatch. 
		* @param addToHistory bool Sets the browser's url to the action's url. 
		*/
		dispatch?( action?:Ext.app.IAction, addToHistory?:bool ): void;
		/** [Method] Returns the value of appFolder  */
		getAppFolder?(): string;
		/** [Method] Returns the Controller instance for the given controller name  
		* @param name string The name of the Controller. 
		* @param profileName string Optional profile name. If passed, this is the same as calling getController('profileName.controllerName'). 
		*/
		getController?( name?:string, profileName?:string ): Ext.app.IController;
		/** [Method] Returns the value of controllers  */
		getControllers?(): any[];
		/** [Method] Returns the value of currentProfile  */
		getCurrentProfile?(): Ext.app.IProfile;
		/** [Method] Returns the value of history  */
		getHistory?(): Ext.app.IHistory;
		/** [Method] Returns the value of launch  */
		getLaunch?(): any;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of profiles  */
		getProfiles?(): any[];
		/** [Method] Returns the value of router  */
		getRouter?(): Ext.app.IRouter;
		/** [Method] Redirects the browser to the given url  
		* @param url any The String url to redirect to. 
		*/
		redirectTo?( url?:any ): any;
		redirectTo?( url?:string ): void;
		redirectTo?( url?:Ext.data.IModel ): void;
		/** [Method] Sets the value of appFolder  
		* @param appFolder string 
		*/
		setAppFolder?( appFolder?:string ): void;
		/** [Method] Sets the value of controllers  
		* @param controllers any[] 
		*/
		setControllers?( controllers?:any[] ): void;
		/** [Method] Sets the value of currentProfile  
		* @param currentProfile Ext.app.IProfile 
		*/
		setCurrentProfile?( currentProfile?:Ext.app.IProfile ): void;
		/** [Method] Sets the value of history  
		* @param history Ext.app.IHistory 
		*/
		setHistory?( history?:Ext.app.IHistory ): void;
		/** [Method] Sets the value of launch  
		* @param launch any 
		*/
		setLaunch?( launch?:any ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of profiles  
		* @param profiles any[] 
		*/
		setProfiles?( profiles?:any[] ): void;
		/** [Method] Sets the value of router  
		* @param router Ext.app.IRouter 
		*/
		setRouter?( router?:Ext.app.IRouter ): void;
	}
}
declare module Ext.app {
	export interface IController extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (Function) */
		init?: any;
		/** [Config Option] (Function) */
		launch?: any;
		/** [Config Option] (String[]) */
		models?: string[];
		/** [Config Option] (Object) */
		refs?: any;
		/** [Config Option] (Object) */
		routes?: any;
		/** [Config Option] (String[]) */
		stores?: string[];
		/** [Config Option] (Array) */
		views?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of application  */
		getApplication?(): Ext.app.IApplication;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of control  */
		getControl?(): any;
		/** [Method] Returns a reference to another Controller  
		* @param controllerName any 
		* @param profile any 
		*/
		getController?( controllerName?:any, profile?:any ): any;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns a reference to a Model  
		* @param modelName any 
		*/
		getModel?( modelName?:any ): any;
		/** [Method] Returns the value of models  */
		getModels?(): string[];
		/** [Method] Returns the value of refs  */
		getRefs?(): any;
		/** [Method] Returns the value of routes  */
		getRoutes?(): any;
		/** [Method] Returns the value of stores  */
		getStores?(): string[];
		/** [Method] Returns the value of views  */
		getViews?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Convenient way to redirect to a new url  
		* @param place any 
		*/
		redirectTo?( place?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of application  
		* @param application Ext.app.IApplication 
		*/
		setApplication?( application?:Ext.app.IApplication ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of control  
		* @param control any 
		*/
		setControl?( control?:any ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of models  
		* @param models string[] 
		*/
		setModels?( models?:string[] ): void;
		/** [Method] Sets the value of refs  
		* @param refs any 
		*/
		setRefs?( refs?:any ): void;
		/** [Method] Sets the value of routes  
		* @param routes any 
		*/
		setRoutes?( routes?:any ): void;
		/** [Method] Sets the value of stores  
		* @param stores string[] 
		*/
		setStores?( stores?:string[] ): void;
		/** [Method] Sets the value of views  
		* @param views any[] 
		*/
		setViews?( views?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.app {
	export interface IHistory extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Array) */
		actions?: any[];
		/** [Config Option] (String) */
		token?: string;
		/** [Config Option] (Boolean) */
		updateUrl?: bool;
		/** [Method] Adds an Action to the stack optionally updating the browser s url and firing the change event  
		* @param action Ext.app.IAction The Action to add to the stack. 
		* @param silent bool Cancels the firing of the change event if true. 
		*/
		add?( action?:Ext.app.IAction, silent?:bool ): void;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Navigate to the previous active action  */
		back?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of actions  */
		getActions?(): any[];
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of token  */
		getToken?(): string;
		/** [Method] Returns the value of updateUrl  */
		getUpdateUrl?(): bool;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of actions  
		* @param actions any[] 
		*/
		setActions?( actions?:any[] ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of token  
		* @param token string 
		*/
		setToken?( token?:string ): void;
		/** [Method] Sets the value of updateUrl  
		* @param updateUrl bool 
		*/
		setUpdateUrl?( updateUrl?:bool ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.app {
	export interface IProfile extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Array) */
		controllers?: any[];
		/** [Config Option] (Array) */
		models?: any[];
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (Array) */
		stores?: any[];
		/** [Config Option] (Array) */
		views?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of application  */
		getApplication?(): Ext.app.IApplication;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of controllers  */
		getControllers?(): any[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of models  */
		getModels?(): any[];
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of namespace  */
		getNamespace?(): string;
		/** [Method] Returns the value of stores  */
		getStores?(): any[];
		/** [Method] Returns the value of views  */
		getViews?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Determines whether or not this Profile is active on the device isActive is executed on  */
		isActive?(): bool;
		/** [Method] The launch function is called by the Application if this Profile s isActive function returned true  */
		launch?(): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of application  
		* @param application Ext.app.IApplication 
		*/
		setApplication?( application?:Ext.app.IApplication ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of controllers  
		* @param controllers any[] 
		*/
		setControllers?( controllers?:any[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of models  
		* @param models any[] 
		*/
		setModels?( models?:any[] ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of namespace  
		* @param namespace string 
		*/
		setNamespace?( namespace?:string ): void;
		/** [Method] Sets the value of stores  
		* @param stores any[] 
		*/
		setStores?( stores?:any[] ): void;
		/** [Method] Sets the value of views  
		* @param views any[] 
		*/
		setViews?( views?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.app {
	export interface IRoute extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Object) */
		conditions?: any;
		/** [Config Option] (String) */
		controller?: string;
		/** [Config Option] (String) */
		url?: string;
		/** [Property] (Object) */
		paramsInMatchString?: any;
		/** [Method] Returns the value of action  */
		getAction?(): string;
		/** [Method] Returns the value of conditions  */
		getConditions?(): any;
		/** [Method] Returns the value of controller  */
		getController?(): string;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Attempts to recognize a given url string and return controller action pair for it  
		* @param url string The url to recognize. 
		*/
		recognize?( url?:string ): any;
		/** [Method] Sets the value of action  
		* @param action string 
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of conditions  
		* @param conditions any 
		*/
		setConditions?( conditions?:any ): void;
		/** [Method] Sets the value of controller  
		* @param controller string 
		*/
		setController?( controller?:string ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
	}
}
declare module Ext.app {
	export interface IRouter extends Ext.IBase {
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Array) */
		routes?: any[];
		/** [Method] Connects a url based route to a controller action pair plus additional params  
		* @param url string The url to recognize. 
		* @param params any Additional parameters. 
		*/
		connect?( url?:string, params?:any ): void;
		/** [Method] Convenience method which just calls the supplied function with the Router instance  
		* @param fn any The fn to call 
		*/
		draw?( fn?:any ): void;
		/** [Method] Returns the value of defaults  */
		getDefaults?(): any;
		/** [Method] Returns the value of routes  */
		getRoutes?(): any[];
		/** [Method] Recognizes a url string connected to the Router return the controller action pair plus any additional config associa  
		* @param url string The url to recognize. 
		*/
		recognize?( url?:string ): any;
		/** [Method] Sets the value of defaults  
		* @param defaults any 
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of routes  
		* @param routes any[] 
		*/
		setRoutes?( routes?:any[] ): void;
	}
}
declare module Ext {
	export interface IArray {
	}
	export class Array {
		/** [Method] Filter through an array and remove empty item as defined in Ext isEmpty  
		* @param array any[] 
		*/
		static clean( array?:any[] ): any[];
		/** [Method] Clone a flat array without referencing the previous one  
		* @param array any[] The array 
		*/
		static clone( array?:any[] ): any[];
		/** [Method] Checks whether or not the given array contains the specified item  
		* @param array any[] The array to check. 
		* @param item any The item to look for. 
		*/
		static contains( array?:any[], item?:any ): bool;
		/** [Method] Perform a set difference A B by subtracting all items in array B from array A  
		* @param arrayA any[] 
		* @param arrayB any[] 
		*/
		static difference( arrayA?:any[], arrayB?:any[] ): any[];
		/** [Method] Iterates an array or an iterable value and invoke the given callback function for each item  
		* @param iterable any The value to be iterated. If this argument is not iterable, the callback function is called once. 
		* @param fn any The callback function. If it returns false, the iteration stops and this method returns the current index. 
		* @param scope any The scope (this reference) in which the specified function is executed. 
		* @param reverse bool Reverse the iteration order (loop from the end to the beginning). 
		*/
		static each( iterable?:any, fn?:any, scope?:any, reverse?:bool ): bool;
		/** [Method] Removes items from an array  
		* @param array any[] The Array on which to replace. 
		* @param index number The index in the array at which to operate. 
		* @param removeCount number The number of items to remove at index. 
		*/
		static erase( array?:any[], index?:number, removeCount?:number ): any[];
		/** [Method] Executes the specified function for each array element until the function returns a falsy value  
		* @param array any[] 
		* @param fn any Callback function for each item. 
		* @param scope any Callback function scope. 
		*/
		static every( array?:any[], fn?:any, scope?:any ): bool;
		/** [Method] Creates a new array with all of the elements of this array for which the provided filtering function returns true  
		* @param array any[] 
		* @param fn any Callback function for each item. 
		* @param scope any Callback function scope. 
		*/
		static filter( array?:any[], fn?:any, scope?:any ): any[];
		/** [Method] Recursively flattens into 1 d Array  
		* @param array any[] The array to flatten 
		*/
		static flatten( array?:any[] ): any[];
		/** [Method] Iterates an array and invoke the given callback function for each item  
		* @param array any[] The array to iterate. 
		* @param fn any The callback function. 
		* @param scope any The execution scope (this) in which the specified function is executed. 
		*/
		static forEach( array?:any[], fn?:any, scope?:any ): void;
		/** [Method] Converts a value to an array if it s not already an array returns An empty array if given value is undefined or n  
		* @param value any The value to convert to an array if it's not already is an array. 
		* @param newReference bool true to clone the given array and return a new reference if necessary. 
		*/
		static from( value?:any, newReference?:bool ): any[];
		/** [Method] Push an item into the array only if the array doesn t contain it yet  
		* @param array any[] The array. 
		* @param item any The item to include. 
		*/
		static include( array?:any[], item?:any ): void;
		/** [Method] Get the index of the provided item in the given array a supplement for the missing arrayPrototype indexOf in Interne  
		* @param array any[] The array to check. 
		* @param item any The item to look for. 
		* @param from number The index at which to begin the search. 
		*/
		static indexOf( array?:any[], item?:any, from?:number ): number;
		/** [Method] Inserts items in to an array  
		* @param array any[] The Array on which to replace. 
		* @param index number The index in the array at which to operate. 
		* @param items any[] The array of items to insert at index. 
		*/
		static insert( array?:any[], index?:number, items?:any[] ): any[];
		/** [Method] Merge multiple arrays into one with unique items that exist in all of the arrays  
		* @param array1 any[] 
		* @param array2 any[] 
		* @param etc any[] 
		*/
		static intersect( array1?:any[], array2?:any[], etc?:any[] ): any[];
		/** [Method] Creates a new array with the results of calling a provided function on every element in this array  
		* @param array any[] 
		* @param fn any Callback function for each item. 
		* @param scope any Callback function scope. 
		*/
		static map( array?:any[], fn?:any, scope?:any ): any[];
		/** [Method] Returns the maximum value in the Array  
		* @param array any The Array from which to select the maximum value. 
		* @param comparisonFn any a function to perform the comparison which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		*/
		static max( array?:any, comparisonFn?:any ): any;
		static max( array?:any[], comparisonFn?:any ): any;
		static max( array?:NodeList, comparisonFn?:any ): any;
		/** [Method] Calculates the mean of all items in the array  
		* @param array any[] The Array to calculate the mean value of. 
		*/
		static mean( array?:any[] ): number;
		/** [Method] Merge multiple arrays into one with unique items  
		* @param array1 any[] 
		* @param array2 any[] 
		* @param etc any[] 
		*/
		static merge( array1?:any[], array2?:any[], etc?:any[] ): any[];
		/** [Method] Returns the minimum value in the Array  
		* @param array any The Array from which to select the minimum value. 
		* @param comparisonFn any a function to perform the comparison which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		*/
		static min( array?:any, comparisonFn?:any ): any;
		static min( array?:any[], comparisonFn?:any ): any;
		static min( array?:NodeList, comparisonFn?:any ): any;
		/** [Method] Plucks the value of a property from each item in the Array  
		* @param array any The Array of items to pluck the value from. 
		* @param propertyName any The property name to pluck from each element. 
		*/
		static pluck( array?:any, propertyName?:any ): any;
		static pluck( array?:any[], propertyName?:string ): any[];
		static pluck( array?:NodeList, propertyName?:string ): any[];
		/** [Method] Removes the specified item from the array if it exists  
		* @param array any[] The array. 
		* @param item any The item to remove. 
		*/
		static remove( array?:any[], item?:any ): any[];
		/** [Method] Replaces items in an array  
		* @param array any[] The Array on which to replace. 
		* @param index number The index in the array at which to operate. 
		* @param removeCount number The number of items to remove at index (can be 0). 
		* @param insert any[] An array of items to insert at index. 
		*/
		static replace( array?:any[], index?:number, removeCount?:number, insert?:any[] ): any[];
		/** [Method] Returns a shallow copy of a part of an array  
		* @param array any[] The array (or arguments object). 
		* @param begin number The index at which to begin. Negative values are offsets from the end of the array. 
		* @param end number The index at which to end. The copied items do not include end. Negative values are offsets from the end of the array. If end is omitted, all items up to the end of the array are copied. 
		*/
		static slice( array?:any[], begin?:number, end?:number ): any[];
		/** [Method] Executes the specified function for each array element until the function returns a truthy value  
		* @param array any[] 
		* @param fn any Callback function for each item. 
		* @param scope any Callback function scope. 
		*/
		static some( array?:any[], fn?:any, scope?:any ): bool;
		/** [Method] Sorts the elements of an Array  
		* @param array any[] The array to sort. 
		* @param sortFn any The comparison function. 
		*/
		static sort( array?:any[], sortFn?:any ): any[];
		/** [Method] Replaces items in an array  
		* @param array any[] The Array on which to replace. 
		* @param index number The index in the array at which to operate. 
		* @param removeCount number The number of items to remove at index (can be 0). 
		*/
		static splice( array?:any[], index?:number, removeCount?:number ): any[];
		/** [Method] Calculates the sum of all items in the given array  
		* @param array any[] The Array to calculate the sum value of. 
		*/
		static sum( array?:any[] ): number;
		/** [Method] Converts any iterable numeric indices and a length property into a true array  
		* @param iterable any the iterable object to be turned into a true Array. 
		* @param start number a zero-based index that specifies the start of extraction. 
		* @param end number a zero-based index that specifies the end of extraction. 
		*/
		static toArray( iterable?:any, start?:number, end?:number ): any[];
		/** [Method] Merge multiple arrays into one with unique items  
		* @param array1 any[] 
		* @param array2 any[] 
		* @param etc any[] 
		*/
		static union( array1?:any[], array2?:any[], etc?:any[] ): any[];
		/** [Method] Returns a new array with unique items  
		* @param array any[] 
		*/
		static unique( array?:any[] ): any[];
	}
}
declare module Ext {
	export interface IAudio extends Ext.IMedia {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
	}
}
declare module Ext {
	export interface IBase extends Ext.IClass {
		/** [Property] (Ext.Class) */
		self?: Ext.IClass;
		/** [Method] Call the original method that was previously overridden with override  This method is deprecated as callParent does 
		* @param args any The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		*/
		callOverridden?( args?:any ): any;
		callOverridden?( args?:any[] ): any;
		/** [Method] Call the parent method of the current method  
		* @param args any The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		*/
		callParent?( args?:any ): any;
		callParent?( args?:any[] ): any;
		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args any The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		*/
		callSuper?( args?:any ): any;
		callSuper?( args?:any[] ): any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the initial configuration passed to constructor  
		* @param name string When supplied, value for particular configuration option is returned, otherwise the full config object is returned. 
		*/
		getInitialConfig?( name?:string ): any;
		/** [Method] Initialize configuration for this class  
		* @param instanceConfig any 
		*/
		initConfig?( instanceConfig?:any ): any;
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members any 
		*/
		addMembers?( members?:any ): void;
		/** [Method] Add  override static properties of this class  
		* @param members any 
		*/
		addStatics?( members?:any ): Ext.IBase;
		/** [Method] Create a new instance of this Class  */
		create?(): any;
		/** [Method] Create aliases for existing prototype methods  
		* @param alias any The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin any The original method name 
		*/
		createAlias?( alias?:any, origin?:any ): void;
		/** [Method] Get the current class name in string format  */
		getName?(): string;
		/** [Method] Override members of this class  
		* @param members any The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		*/
		override?( members?:any ): Ext.IBase;
	}
}
declare module Ext.behavior {
	export interface IBehavior extends Ext.IBase {
	}
}
declare module Ext.behavior {
	export interface IDraggable extends Ext.behavior.IBehavior {
	}
}
declare module Ext.behavior {
	export interface IScrollable extends Ext.behavior.IBehavior {
	}
}
declare module Ext.behavior {
	export interface ITranslatable extends Ext.behavior.IBehavior {
	}
}
declare module Ext {
	export interface IBrowser extends Ext.env.IBrowser {
	}
	export class Browser {
	}
}
declare module Ext {
	export interface IButton extends Ext.IComponent {
		/** [Config Option] (String) */
		autoEvent?: string;
		/** [Config Option] (String) */
		badge?: string;
		/** [Config Option] (String) */
		badgeCls?: string;
		/** [Config Option] (String) */
		badgeText?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (String) */
		html?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconAlign?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Number/Boolean) */
		pressedDelay?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of autoEvent  */
		getAutoEvent?(): string;
		/** [Method] Returns the value of badgeCls  */
		getBadgeCls?(): string;
		/** [Method] Returns the value of badgeText  */
		getBadgeText?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of handler  */
		getHandler?(): any;
		/** [Method] Returns the value of icon  */
		getIcon?(): string;
		/** [Method] Returns the value of iconAlign  */
		getIconAlign?(): string;
		/** [Method] Returns the value of iconCls  */
		getIconCls?(): string;
		/** [Method] Returns the value of labelCls  */
		getLabelCls?(): string;
		/** [Method] Returns the value of pressedCls  */
		getPressedCls?(): string;
		/** [Method] Returns the value of pressedDelay  */
		getPressedDelay?(): number;
		/** [Method] Returns the value of pressedDelay  */
		getPressedDelay?(): bool;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Returns the value of text  */
		getText?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of autoEvent  
		* @param autoEvent string 
		*/
		setAutoEvent?( autoEvent?:string ): void;
		/** [Method] Updates the badge text  
		* @param text string 
		*/
		setBadge?( text?:string ): void;
		/** [Method] Sets the value of badgeCls  
		* @param badgeCls string 
		*/
		setBadgeCls?( badgeCls?:string ): void;
		/** [Method] Sets the value of badgeText  
		* @param badgeText string 
		*/
		setBadgeText?( badgeText?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of handler  
		* @param handler any 
		*/
		setHandler?( handler?:any ): void;
		/** [Method] Sets the value of icon  
		* @param icon string 
		*/
		setIcon?( icon?:string ): void;
		/** [Method] Sets the value of iconAlign  
		* @param iconAlign string 
		*/
		setIconAlign?( iconAlign?:string ): void;
		/** [Method] Updates the icon class 
		* @param iconClass string 
		*/
		setIconClass?( iconClass?:string ): void;
		/** [Method] Sets the value of iconCls  
		* @param iconCls string 
		*/
		setIconCls?( iconCls?:string ): void;
		/** [Method] Sets the value of labelCls  
		* @param labelCls string 
		*/
		setLabelCls?( labelCls?:string ): void;
		/** [Method] Sets the value of pressedCls  
		* @param pressedCls string 
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of pressedDelay  
		* @param pressedDelay any 
		*/
		setPressedDelay?( pressedDelay?:any ): any;
		setPressedDelay?( pressedDelay?:number ): void;
		setPressedDelay?( pressedDelay?:bool ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of text  
		* @param text string 
		*/
		setText?( text?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.carousel {
	export interface ICarousel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		indicator?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the index of the currently active card  */
		getActiveIndex?(): number;
		/** [Method] Returns the value of animation  */
		getAnimation?(): any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bufferSize  */
		getBufferSize?(): number;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of directionLock  */
		getDirectionLock?(): bool;
		/** [Method] Returns the value of indicator  */
		getIndicator?(): bool;
		/** [Method] Returns the value of itemConfig  */
		getItemConfig?(): any;
		/** [Method] Returns the value of itemLength  */
		getItemLength?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal */
		isHorizontal?(): bool;
		/** [Method] Returns true when direction is vertical */
		isVertical?(): bool;
		/** [Method] Switches to the next card  */
		next?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card  */
		prev?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card  */
		previous?(): Ext.carousel.ICarousel;
		/** [Method] Sets the value of animation  
		* @param animation any 
		*/
		setAnimation?( animation?:any ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bufferSize  
		* @param bufferSize number 
		*/
		setBufferSize?( bufferSize?:number ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of directionLock  
		* @param directionLock bool 
		*/
		setDirectionLock?( directionLock?:bool ): void;
		/** [Method] Sets the value of indicator  
		* @param indicator bool 
		*/
		setIndicator?( indicator?:bool ): void;
		/** [Method] Sets the value of itemConfig  
		* @param itemConfig any 
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemLength  
		* @param itemLength any 
		*/
		setItemLength?( itemLength?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext {
	export interface ICarousel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		indicator?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the index of the currently active card  */
		getActiveIndex?(): number;
		/** [Method] Returns the value of animation  */
		getAnimation?(): any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bufferSize  */
		getBufferSize?(): number;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of directionLock  */
		getDirectionLock?(): bool;
		/** [Method] Returns the value of indicator  */
		getIndicator?(): bool;
		/** [Method] Returns the value of itemConfig  */
		getItemConfig?(): any;
		/** [Method] Returns the value of itemLength  */
		getItemLength?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal */
		isHorizontal?(): bool;
		/** [Method] Returns true when direction is vertical */
		isVertical?(): bool;
		/** [Method] Switches to the next card  */
		next?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card  */
		prev?(): Ext.carousel.ICarousel;
		/** [Method] Switches to the previous card  */
		previous?(): Ext.carousel.ICarousel;
		/** [Method] Sets the value of animation  
		* @param animation any 
		*/
		setAnimation?( animation?:any ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bufferSize  
		* @param bufferSize number 
		*/
		setBufferSize?( bufferSize?:number ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of directionLock  
		* @param directionLock bool 
		*/
		setDirectionLock?( directionLock?:bool ): void;
		/** [Method] Sets the value of indicator  
		* @param indicator bool 
		*/
		setIndicator?( indicator?:bool ): void;
		/** [Method] Sets the value of itemConfig  
		* @param itemConfig any 
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemLength  
		* @param itemLength any 
		*/
		setItemLength?( itemLength?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.carousel {
	export interface IIndicator extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
	}
}
declare module Ext.carousel {
	export interface IInfinite extends Ext.carousel.ICarousel {
		/** [Config Option] (Boolean) */
		indicator?: bool;
		/** [Method] Returns the value of indicator  */
		getIndicator?(): any;
		/** [Method] Returns the value of innerItemConfig  */
		getInnerItemConfig?(): any;
		/** [Method] Returns the value of maxItemIndex  */
		getMaxItemIndex?(): any;
		/** [Method] Sets the value of indicator  
		* @param indicator any 
		*/
		setIndicator?( indicator?:any ): void;
		/** [Method] Sets the value of innerItemConfig  
		* @param innerItemConfig any 
		*/
		setInnerItemConfig?( innerItemConfig?:any ): void;
		/** [Method] Sets the value of maxItemIndex  
		* @param maxItemIndex any 
		*/
		setMaxItemIndex?( maxItemIndex?:any ): void;
	}
}
declare module Ext.carousel {
	export interface IItem extends Ext.IDecorator {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of translatable  */
		getTranslatable?(): bool;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of translatable  
		* @param translatable bool 
		*/
		setTranslatable?( translatable?:bool ): void;
	}
}
declare module Ext.chart {
	export interface IAbstractChart extends Ext.draw.IComponent {
		/** [Config Option] (Boolean/Object) */
		animate?: any;
		/** [Config Option] (Ext.chart.axis.Axis/Array/Object) */
		axes?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Boolean/Array) */
		colors?: any;
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object) */
		innerPadding?: any;
		/** [Config Option] (Object|Number) */
		insetPadding?: any;
		/** [Config Option] (Array) */
		interactions?: any[];
		/** [Config Option] (Ext.chart.Legend/Object) */
		legend?: any;
		/** [Config Option] (Ext.chart.series.Series/Array) */
		series?: any;
		/** [Config Option] (Boolean/Object) */
		shadow?: any;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Property] (String) */
		version?: string;
		/** [Method] Changes the data store bound to this chart and refreshes it  
		* @param store Ext.data.IStore The store to bind to this chart. 
		*/
		bindStore?( store?:Ext.data.IStore ): void;
		/** [Method] Cancel a scheduled layout  */
		cancelLayout?(): void;
		/** [Method] Returns the value of axes  */
		getAxes?(): any;
		/** [Method] Returns the value of background  */
		getBackground?(): any;
		/** [Method] Returns the value of colors  */
		getColors?(): bool;
		/** [Method] Returns the value of colors  */
		getColors?(): any[];
		/** [Method] Returns the value of highlightItem  */
		getHighlightItem?(): any;
		/** [Method] Returns the value of innerPadding  */
		getInnerPadding?(): any;
		/** [Method] Returns the value of insetPadding  */
		getInsetPadding?(): any;
		/** [Method] Returns the value of interactions  */
		getInteractions?(): any[];
		/** [Method] Given an x y point relative to the chart find and return the first series item that matches that point  
		* @param x number 
		* @param y number 
		*/
		getItemForPoint?( x?:number, y?:number ): any;
		/** [Method] Given an x y point relative to the chart find and return all series items that match that point  
		* @param x number 
		* @param y number 
		*/
		getItemsForPoint?( x?:number, y?:number ): any[];
		/** [Method] Returns the value of legend  */
		getLegend?(): any;
		/** [Method] Return the legend store that contains all the legend information  */
		getLegendStore?(): Ext.data.IStore;
		/** [Method] Returns the value of series  */
		getSeries?(): Ext.chart.series.ISeries;
		/** [Method] Returns the value of series  */
		getSeries?(): any[];
		/** [Method] Returns the value of shadow  */
		getShadow?(): any;
		/** [Method] Returns the value of store  */
		getStore?(): Ext.data.IStore;
		/** [Method] Get a surface by the given id or create one if it doesn t exist  
		* @param name any 
		* @param type any 
		*/
		getSurface?( name?:any, type?:any ): Ext.draw.ISurface;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Resume the layout initialized by thickness change */
		resumeThicknessChanged?(): void;
		/** [Method] Schedule a layout at next frame  */
		scheduleLayout?(): void;
		/** [Method] Sets the value of animate  
		* @param animate any 
		*/
		setAnimate?( animate?:any ): void;
		/** [Method] Sets the value of axes  
		* @param axes any 
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of background  
		* @param background any 
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of colors  
		* @param colors any 
		*/
		setColors?( colors?:any ): any;
		setColors?( colors?:bool ): void;
		setColors?( colors?:any[] ): void;
		/** [Method] Sets the value of highlightItem  
		* @param highlightItem any 
		*/
		setHighlightItem?( highlightItem?:any ): void;
		/** [Method] Sets the value of innerPadding  
		* @param innerPadding any 
		*/
		setInnerPadding?( innerPadding?:any ): void;
		/** [Method] Sets the value of insetPadding  
		* @param insetPadding any 
		*/
		setInsetPadding?( insetPadding?:any ): void;
		/** [Method] Sets the value of interactions  
		* @param interactions any[] 
		*/
		setInteractions?( interactions?:any[] ): void;
		/** [Method] Sets the value of legend  
		* @param legend any 
		*/
		setLegend?( legend?:any ): void;
		/** [Method] Sets the value of series  
		* @param series any 
		*/
		setSeries?( series?:any ): any;
		setSeries?( series?:Ext.chart.series.ISeries ): void;
		setSeries?( series?:any[] ): void;
		/** [Method] Sets the value of shadow  
		* @param shadow any 
		*/
		setShadow?( shadow?:any ): void;
		/** [Method] Sets the value of store  
		* @param store Ext.data.IStore 
		*/
		setStore?( store?:Ext.data.IStore ): void;
		/** [Method] Suspend the layout initialized by thickness change */
		suspendThicknessChanged?(): void;
	}
}
declare module Ext.chart.axis {
	export interface IAxis extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Array) */
		fields?: any[];
		/** [Config Option] (Object) */
		grid?: any;
		/** [Config Option] (Boolean) */
		hidden?: bool;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Boolean) */
		labelInSpan?: bool;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Number) */
		maxZoom?: number;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minZoom?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Boolean) */
		needHighPrecision?: bool;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (String|Object) */
		title?: any;
		/** [Config Option] (Number) */
		titleMargin?: number;
		/** [Config Option] (Array) */
		visibleRange?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of background  */
		getBackground?(): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of chart  */
		getChart?(): Ext.chart.IAbstractChart;
		/** [Method] Mapping data value into coordinate  
		* @param value any 
		* @param field string 
		* @param idx number 
		* @param items Ext.util.IMixedCollection 
		*/
		getCoordFor?( value?:any, field?:string, idx?:number, items?:Ext.util.IMixedCollection ): number;
		/** [Method] Returns the value of fields  */
		getFields?(): any[];
		/** [Method] Returns the value of grid  */
		getGrid?(): any;
		/** [Method] Returns the value of hidden  */
		getHidden?(): bool;
		/** [Method] Returns the value of increment  */
		getIncrement?(): number;
		/** [Method] Returns the value of label  */
		getLabel?(): any;
		/** [Method] Returns the value of labelInSpan  */
		getLabelInSpan?(): bool;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of layout  */
		getLayout?(): Ext.chart.axis.layout.ILayout;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of maxZoom  */
		getMaxZoom?(): number;
		/** [Method] Returns the value of maximum  */
		getMaximum?(): number;
		/** [Method] Returns the value of minZoom  */
		getMinZoom?(): number;
		/** [Method] Returns the value of minimum  */
		getMinimum?(): number;
		/** [Method] Returns the value of needHighPrecision  */
		getNeedHighPrecision?(): bool;
		/** [Method] Returns the value of position  */
		getPosition?(): string;
		/** [Method] Get the range derived from all the bound series  */
		getRange?(): any[];
		/** [Method] Returns the value of renderer  */
		getRenderer?(): any;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): any;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): Ext.chart.axis.segmenter.ISegmenter;
		/** [Method] Returns the value of style  */
		getStyle?(): any;
		/** [Method] Returns the value of title  */
		getTitle?(): any;
		/** [Method] Returns the value of titleMargin  */
		getTitleMargin?(): number;
		/** [Method] Returns the value of visibleRange  */
		getVisibleRange?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Invoked when data has changed  */
		processData?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Invokes renderFrame on this axis s surface s  */
		renderFrame?(): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of background  
		* @param background any 
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of chart  
		* @param chart Ext.chart.IAbstractChart 
		*/
		setChart?( chart?:Ext.chart.IAbstractChart ): void;
		/** [Method] Sets the value of fields  
		* @param fields any[] 
		*/
		setFields?( fields?:any[] ): void;
		/** [Method] Sets the value of grid  
		* @param grid any 
		*/
		setGrid?( grid?:any ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden bool 
		*/
		setHidden?( hidden?:bool ): void;
		/** [Method] Sets the value of increment  
		* @param increment number 
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of label  
		* @param label any 
		*/
		setLabel?( label?:any ): void;
		/** [Method] Sets the value of labelInSpan  
		* @param labelInSpan bool 
		*/
		setLabelInSpan?( labelInSpan?:bool ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): any;
		setLayout?( layout?:Ext.chart.axis.layout.ILayout ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of maxZoom  
		* @param maxZoom number 
		*/
		setMaxZoom?( maxZoom?:number ): void;
		/** [Method] Sets the value of maximum  
		* @param maximum number 
		*/
		setMaximum?( maximum?:number ): void;
		/** [Method] Sets the value of minZoom  
		* @param minZoom number 
		*/
		setMinZoom?( minZoom?:number ): void;
		/** [Method] Sets the value of minimum  
		* @param minimum number 
		*/
		setMinimum?( minimum?:number ): void;
		/** [Method] Sets the value of needHighPrecision  
		* @param needHighPrecision bool 
		*/
		setNeedHighPrecision?( needHighPrecision?:bool ): void;
		/** [Method] Sets the value of position  
		* @param position string 
		*/
		setPosition?( position?:string ): void;
		/** [Method] Sets the value of renderer  
		* @param renderer any 
		*/
		setRenderer?( renderer?:any ): string;
		/** [Method] Sets the value of segmenter  
		* @param segmenter any 
		*/
		setSegmenter?( segmenter?:any ): any;
		setSegmenter?( segmenter?:Ext.chart.axis.segmenter.ISegmenter ): void;
		/** [Method] Sets the value of style  
		* @param style any 
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of title  
		* @param title any 
		*/
		setTitle?( title?:any ): void;
		/** [Method] Sets the value of titleMargin  
		* @param titleMargin number 
		*/
		setTitleMargin?( titleMargin?:number ): void;
		/** [Method] Sets the value of visibleRange  
		* @param visibleRange any[] 
		*/
		setVisibleRange?( visibleRange?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.chart.axis {
	export interface ICategory extends Ext.chart.axis.IAxis {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of layout  */
		getLayout?(): string;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): string;
		/** [Method] Sets the value of layout  
		* @param layout string 
		*/
		setLayout?( layout?:string ): void;
		/** [Method] Sets the value of segmenter  
		* @param segmenter string 
		*/
		setSegmenter?( segmenter?:string ): void;
	}
}
declare module Ext.chart.axis.layout {
	export interface ICombineDuplicate extends Ext.chart.axis.layout.IDiscrete {
	}
}
declare module Ext.chart.axis.layout {
	export interface IContinuous extends Ext.chart.axis.layout.ILayout {
		/** [Method] Returns the value of adjustMaximumByMajorUnit  */
		getAdjustMaximumByMajorUnit?(): bool;
		/** [Method] Returns the value of adjustMinimumByMajorUnit  */
		getAdjustMinimumByMajorUnit?(): bool;
		/** [Method] Sets the value of adjustMaximumByMajorUnit  
		* @param adjustMaximumByMajorUnit bool 
		*/
		setAdjustMaximumByMajorUnit?( adjustMaximumByMajorUnit?:bool ): void;
		/** [Method] Sets the value of adjustMinimumByMajorUnit  
		* @param adjustMinimumByMajorUnit bool 
		*/
		setAdjustMinimumByMajorUnit?( adjustMinimumByMajorUnit?:bool ): void;
		/** [Method] Snaps the data bound to the axis to meaningful tick marks  
		* @param context any 
		* @param min any 
		* @param max any 
		* @param estStepSize any 
		*/
		snapEnds?( context?:any, min?:any, max?:any, estStepSize?:any ): void;
	}
}
declare module Ext.chart.axis.layout {
	export interface IDiscrete extends Ext.chart.axis.layout.ILayout {
		/** [Method] Calculates the position of tick marks for the axis  
		* @param context any 
		*/
		calculateLayout?( context?:any ): any;
		/** [Method] Calculates the position of major ticks for the axis  
		* @param context any 
		*/
		calculateMajorTicks?( context?:any ): void;
		/** [Method] Processes the data of the series bound to the axis  */
		processData?(): void;
		/** [Method] Snaps the data bound to the axis to meaningful tick marks  
		* @param context any 
		* @param min any 
		* @param max any 
		* @param estStepSize any 
		*/
		snapEnds?( context?:any, min?:any, max?:any, estStepSize?:any ): void;
		/** [Method] Trims the layout of the axis by the defined minimum and maximum  
		* @param context any 
		* @param out any 
		* @param trimMin any 
		* @param trimMax any 
		*/
		trimByRange?( context?:any, out?:any, trimMin?:any, trimMax?:any ): void;
	}
}
declare module Ext.chart.axis.layout {
	export interface ILayout extends Ext.IBase {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Method] Calculates the position of tick marks for the axis  
		* @param context any 
		*/
		calculateLayout?( context?:any ): any;
		/** [Method] Calculates the position of major ticks for the axis  
		* @param context any 
		*/
		calculateMajorTicks?( context?:any ): void;
		/** [Method] Calculates the position of sub ticks for the axis  
		* @param context any 
		*/
		calculateMinorTicks?( context?:any ): void;
		/** [Method] Returns the value of axis  */
		getAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Processes the data of the series bound to the axis  
		* @param series any The bound series. 
		*/
		processData?( series?:any ): void;
		/** [Method] Sets the value of axis  
		* @param axis Ext.chart.axis.IAxis 
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Snaps the data bound to the axis to meaningful tick marks  
		* @param context any 
		* @param min any 
		* @param max any 
		* @param estStepSize any 
		*/
		snapEnds?( context?:any, min?:any, max?:any, estStepSize?:any ): void;
		/** [Method] Trims the layout of the axis by the defined minimum and maximum  
		* @param context any 
		* @param out any 
		* @param trimMin any 
		* @param trimMax any 
		*/
		trimByRange?( context?:any, out?:any, trimMin?:any, trimMax?:any ): void;
	}
}
declare module Ext.chart.axis {
	export interface INumeric extends Ext.chart.axis.IAxis {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of aggregator  */
		getAggregator?(): string;
		/** [Method] Returns the value of layout  */
		getLayout?(): string;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): string;
		/** [Method] Sets the value of aggregator  
		* @param aggregator string 
		*/
		setAggregator?( aggregator?:string ): void;
		/** [Method] Sets the value of layout  
		* @param layout string 
		*/
		setLayout?( layout?:string ): void;
		/** [Method] Sets the value of segmenter  
		* @param segmenter string 
		*/
		setSegmenter?( segmenter?:string ): void;
	}
}
declare module Ext.chart.axis.segmenter {
	export interface INames extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Method] Add step units to the value  
		* @param value any 
		* @param step any 
		* @param unit any 
		*/
		add?( value?:any, step?:any, unit?:any ): void;
		/** [Method] Align value with step of units  
		* @param value any 
		* @param step any 
		* @param unit any 
		*/
		align?( value?:any, step?:any, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min any 
		* @param max any 
		* @param unit any 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param min any 
		* @param estStepSize any 
		* @param minIdx any 
		* @param data any 
		*/
		preferredStep?( min?:any, estStepSize?:any, minIdx?:any, data?:any ): any;
		/** [Method] This method formats the value  
		* @param value any 
		* @param context any 
		*/
		renderer?( value?:any, context?:any ): string;
	}
}
declare module Ext.chart.axis.segmenter {
	export interface INumeric extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Method] Add step units to the value  
		* @param value any 
		* @param step any 
		* @param unit any 
		*/
		add?( value?:any, step?:any, unit?:any ): void;
		/** [Method] Align value with step of units  
		* @param value any 
		* @param step any 
		* @param unit any 
		*/
		align?( value?:any, step?:any, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min any 
		* @param max any 
		* @param unit any 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param min any 
		* @param estStepSize any 
		*/
		preferredStep?( min?:any, estStepSize?:any ): any;
		/** [Method] This method formats the value  
		* @param value any 
		* @param context any 
		*/
		renderer?( value?:any, context?:any ): string;
	}
}
declare module Ext.chart.axis.segmenter {
	export interface ISegmenter extends Ext.IBase {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Method] Add step units to the value  
		* @param value any The value to be added. 
		* @param step number The step of units. Negative value are allowed. 
		* @param unit any The unit. 
		*/
		add?( value?:any, step?:number, unit?:any ): void;
		/** [Method] Align value with step of units  
		* @param value any The value to be aligned. 
		* @param step number The step of units. 
		* @param unit any The unit. 
		*/
		align?( value?:any, step?:number, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min any The smaller value. 
		* @param max any The larger value. 
		* @param unit any The unit scale. Unit can be any type. 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Convert from any data into the target type  
		* @param value any The value to convert from 
		*/
		from?( value?:any ): any;
		/** [Method] Returns the value of axis  */
		getAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param start any The start point of range. 
		* @param estStepSize any The estimated step size. 
		*/
		preferredStep?( start?:any, estStepSize?:any ): any;
		/** [Method] This method formats the value  
		* @param value any The value to format. 
		* @param context any Axis layout context. 
		*/
		renderer?( value?:any, context?:any ): string;
		/** [Method] Sets the value of axis  
		* @param axis Ext.chart.axis.IAxis 
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;
	}
}
declare module Ext.chart.axis.segmenter {
	export interface ITime extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Config Option] (Object) */
		step?: any;
		/** [Method] Add step units to the value  
		* @param value any 
		* @param step any 
		* @param unit any 
		*/
		add?( value?:any, step?:any, unit?:any ): void;
		/** [Method] Align value with step of units  
		* @param date any 
		* @param step any 
		* @param unit any 
		*/
		align?( date?:any, step?:any, unit?:any ): any;
		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min any 
		* @param max any 
		* @param unit any 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;
		/** [Method] Convert from any data into the target type  
		* @param value any 
		*/
		from?( value?:any ): any;
		/** [Method] Returns the value of step  */
		getStep?(): any;
		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param min any 
		* @param estStepSize any 
		*/
		preferredStep?( min?:any, estStepSize?:any ): any;
		/** [Method] This method formats the value  
		* @param value any 
		* @param context any 
		*/
		renderer?( value?:any, context?:any ): string;
		/** [Method] Sets the value of step  
		* @param step any 
		*/
		setStep?( step?:any ): void;
	}
}
declare module Ext.chart.axis.sprite {
	export interface IAxis extends Ext.draw.sprite.ISprite,Ext.chart.IMarkerHolder {
		/** [Config Option] (Number) */
		The?: number;
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Config Option] (Boolean) */
		axisLine?: bool;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMax?: number;
		/** [Config Option] (Number) */
		dataMin?: number;
		/** [Config Option] (Boolean) */
		enlargeEstStepSizeByText?: bool;
		/** [Config Option] (Boolean) */
		grid?: bool;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Number) */
		length?: number;
		/** [Config Option] (Number) */
		majorTickSize?: number;
		/** [Config Option] (Boolean) */
		majorTicks?: bool;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (Number) */
		minStepSize?: number;
		/** [Config Option] (Number) */
		minorTickSize?: number;
		/** [Config Option] (Boolean) */
		minorTricks?: bool;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Number) */
		textPadding?: number;
		/** [Config Option] (Number) */
		visibleMax?: number;
		/** [Config Option] (Number) */
		visibleMin?: number;
		/** [Method]  
		* @param name any {String} 
		* @param marker any {Ext.chart.Markers} 
		*/
		bindMarker?( name?:any, marker?:any ): void;
		/** [Method] Returns the value of axis  */
		getAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Returns the bounding box for the given Sprite as calculated with the Canvas engine  */
		getBBox?(): void;
		/** [Method] Returns the value of label  */
		getLabel?(): any;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of layout  */
		getLayout?(): Ext.chart.axis.layout.ILayout;
		/** [Method] Returns the value of renderer  */
		getRenderer?(): any;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): any;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): Ext.chart.axis.segmenter.ISegmenter;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param clipRegion any 
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
		/** [Method] Sets the value of axis  
		* @param axis Ext.chart.axis.IAxis 
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Sets the value of label  
		* @param label any 
		*/
		setLabel?( label?:any ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): any;
		setLayout?( layout?:Ext.chart.axis.layout.ILayout ): void;
		/** [Method] Sets the value of renderer  
		* @param renderer any 
		*/
		setRenderer?( renderer?:any ): void;
		/** [Method] Sets the value of segmenter  
		* @param segmenter any 
		*/
		setSegmenter?( segmenter?:any ): any;
		setSegmenter?( segmenter?:Ext.chart.axis.segmenter.ISegmenter ): void;
	}
}
declare module Ext.chart.axis {
	export interface ITime extends Ext.chart.axis.INumeric {
		/** [Config Option] (Boolean) */
		calculateByLabelSize?: bool;
		/** [Config Option] (String/Boolean) */
		dateFormat?: any;
		/** [Config Option] (Date) */
		fromDate?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Array) */
		step?: any[];
		/** [Config Option] (Date) */
		toDate?: any;
		/** [Method] Returns the value of aggregator  */
		getAggregator?(): string;
		/** [Method] Returns the value of calculateByLabelSize  */
		getCalculateByLabelSize?(): bool;
		/** [Method] Mapping data value into coordinate  
		* @param value any 
		*/
		getCoordFor?( value?:any ): number;
		/** [Method] Returns the value of dateFormat  */
		getDateFormat?(): string;
		/** [Method] Returns the value of dateFormat  */
		getDateFormat?(): bool;
		/** [Method] Returns the value of fromDate  */
		getFromDate?(): any;
		/** [Method] Returns the value of layout  */
		getLayout?(): string;
		/** [Method] Returns the value of segmenter  */
		getSegmenter?(): string;
		/** [Method] Returns the value of step  */
		getStep?(): any[];
		/** [Method] Returns the value of toDate  */
		getToDate?(): any;
		/** [Method] Sets the value of aggregator  
		* @param aggregator string 
		*/
		setAggregator?( aggregator?:string ): void;
		/** [Method] Sets the value of calculateByLabelSize  
		* @param calculateByLabelSize bool 
		*/
		setCalculateByLabelSize?( calculateByLabelSize?:bool ): void;
		/** [Method] Sets the value of dateFormat  
		* @param dateFormat any 
		*/
		setDateFormat?( dateFormat?:any ): any;
		setDateFormat?( dateFormat?:string ): void;
		setDateFormat?( dateFormat?:bool ): void;
		/** [Method] Sets the value of fromDate  
		* @param fromDate any 
		*/
		setFromDate?( fromDate?:any ): void;
		/** [Method] Sets the value of layout  
		* @param layout string 
		*/
		setLayout?( layout?:string ): void;
		/** [Method] Sets the value of segmenter  
		* @param segmenter string 
		*/
		setSegmenter?( segmenter?:string ): void;
		/** [Method] Sets the value of step  
		* @param step any[] 
		*/
		setStep?( step?:any[] ): void;
		/** [Method] Sets the value of toDate  
		* @param toDate any 
		*/
		setToDate?( toDate?:any ): void;
	}
}
declare module Ext.chart {
	export interface ICartesianChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Boolean) */
		flipXY?: bool;
		/** [Method] Returns the value of flipXY  */
		getFlipXY?(): bool;
		/** [Method] Returns the value of innerRegion  */
		getInnerRegion?(): any[];
		/** [Method] Place water mark after resize  */
		onPlaceWatermark?(): void;
		/** [Method] Layout the axes and series  */
		performLayout?(): void;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Sets the value of flipXY  
		* @param flipXY bool 
		*/
		setFlipXY?( flipXY?:bool ): void;
		/** [Method] Sets the value of innerRegion  
		* @param innerRegion any[] 
		*/
		setInnerRegion?( innerRegion?:any[] ): void;
	}
}
declare module Ext.chart {
	export interface IChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Boolean) */
		flipXY?: bool;
		/** [Method] Returns the value of flipXY  */
		getFlipXY?(): bool;
		/** [Method] Returns the value of innerRegion  */
		getInnerRegion?(): any[];
		/** [Method] Place water mark after resize  */
		onPlaceWatermark?(): void;
		/** [Method] Layout the axes and series  */
		performLayout?(): void;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Sets the value of flipXY  
		* @param flipXY bool 
		*/
		setFlipXY?( flipXY?:bool ): void;
		/** [Method] Sets the value of innerRegion  
		* @param innerRegion any[] 
		*/
		setInnerRegion?( innerRegion?:any[] ): void;
	}
}
declare module Ext.chart.grid {
	export interface ICircularGrid extends Ext.draw.sprite.ICircle {
	}
}
declare module Ext.chart.grid {
	export interface IHorizontalGrid extends Ext.draw.sprite.ISprite {
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param clipRegion any 
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
	}
}
declare module Ext.chart.grid {
	export interface IRadialGrid extends Ext.draw.sprite.IPath {
		/** [Method] Render method  */
		render?(): any;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare module Ext.chart.grid {
	export interface IVerticalGrid extends Ext.draw.sprite.ISprite {
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param clipRegion any 
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
	}
}
declare module Ext.chart.interactions {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Boolean) */
		enabled?: bool;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Property] (Number) */
		throttleGap?: number;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of chart  */
		getChart?(): Ext.chart.IAbstractChart;
		/** [Method] Returns the value of enabled  */
		getEnabled?(): bool;
		/** [Method] Returns the value of gesture  */
		getGesture?(): string;
		/** [Method] Find and return a single series item corresponding to the given event or null if no matching item is found  
		* @param e Event 
		*/
		getItemForEvent?( e?:Event ): any;
		/** [Method] Find and return all series items corresponding to the given event  
		* @param e Event 
		*/
		getItemsForEvent?( e?:Event ): any[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] A method to be implemented by subclasses where all event attachment should occur  */
		initialize?(): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Placeholder method  */
		onGesture?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of chart  
		* @param chart Ext.chart.IAbstractChart 
		*/
		setChart?( chart?:Ext.chart.IAbstractChart ): void;
		/** [Method] Sets the value of enabled  
		* @param enabled bool 
		*/
		setEnabled?( enabled?:bool ): void;
		/** [Method] Sets the value of gesture  
		* @param gesture string 
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.chart.interactions {
	export interface ICrossZoom extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Method] Returns the value of axes  */
		getAxes?(): any;
		/** [Method] Returns the value of gesture  */
		getGesture?(): string;
		/** [Method] Returns the value of undoButton  */
		getUndoButton?(): any;
		/** [Method] Placeholder method  
		* @param e any 
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of axes  
		* @param axes any 
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of gesture  
		* @param gesture string 
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of undoButton  
		* @param undoButton any 
		*/
		setUndoButton?( undoButton?:any ): void;
	}
}
declare module Ext.chart.interactions {
	export interface IItemHighlight extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (String) */
		gesture?: string;
		/** [Method] Returns the value of gesture  */
		getGesture?(): string;
		/** [Method] Placeholder method  
		* @param series any 
		* @param item any 
		* @param e any 
		*/
		onGesture?( series?:any, item?:any, e?:any ): void;
		/** [Method] Sets the value of gesture  
		* @param gesture string 
		*/
		setGesture?( gesture?:string ): void;
	}
}
declare module Ext.chart.interactions {
	export interface IItemInfo extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (String) */
		gesture?: string;
		/** [Config Option] (Object) */
		panel?: any;
		/** [Method] Returns the value of gesture  */
		getGesture?(): string;
		/** [Method] Returns the value of panel  */
		getPanel?(): any;
		/** [Method] Placeholder method  
		* @param series any 
		* @param item any 
		*/
		onGesture?( series?:any, item?:any ): void;
		/** [Method] Sets the value of gesture  
		* @param gesture string 
		*/
		setGesture?( gesture?:string ): void;
		/** [Method] Sets the value of panel  
		* @param panel any 
		*/
		setPanel?( panel?:any ): void;
	}
}
declare module Ext.chart.interactions {
	export interface IPanZoom extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (Object) */
		overflowArrowOptions?: any;
		/** [Config Option] (Boolean) */
		showOverflowArrows?: bool;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of axes  */
		getAxes?(): any;
		/** [Method] Returns the value of hideLabelInGesture  */
		getHideLabelInGesture?(): bool;
		/** [Method] Returns the value of maxZoom  */
		getMaxZoom?(): any;
		/** [Method] Returns the value of minZoom  */
		getMinZoom?(): any;
		/** [Method] Returns the value of modeToggleButton  */
		getModeToggleButton?(): any;
		/** [Method] Returns the value of panGesture  */
		getPanGesture?(): string;
		/** [Method] Returns the value of showOverflowArrows  */
		getShowOverflowArrows?(): bool;
		/** [Method] Returns the value of zoomOnPanGesture  */
		getZoomOnPanGesture?(): bool;
		/** [Method] Placeholder method  
		* @param e any 
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of axes  
		* @param axes any 
		*/
		setAxes?( axes?:any ): void;
		/** [Method] Sets the value of hideLabelInGesture  
		* @param hideLabelInGesture bool 
		*/
		setHideLabelInGesture?( hideLabelInGesture?:bool ): void;
		/** [Method] Sets the value of maxZoom  
		* @param maxZoom any 
		*/
		setMaxZoom?( maxZoom?:any ): void;
		/** [Method] Sets the value of minZoom  
		* @param minZoom any 
		*/
		setMinZoom?( minZoom?:any ): void;
		/** [Method] Sets the value of modeToggleButton  
		* @param modeToggleButton any 
		*/
		setModeToggleButton?( modeToggleButton?:any ): void;
		/** [Method] Sets the value of panGesture  
		* @param panGesture string 
		*/
		setPanGesture?( panGesture?:string ): void;
		/** [Method] Sets the value of showOverflowArrows  
		* @param showOverflowArrows bool 
		*/
		setShowOverflowArrows?( showOverflowArrows?:bool ): void;
		/** [Method] Sets the value of zoomOnPanGesture  
		* @param zoomOnPanGesture bool 
		*/
		setZoomOnPanGesture?( zoomOnPanGesture?:bool ): void;
	}
}
declare module Ext.chart.interactions {
	export interface IRotate extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (String) */
		gesture?: string;
		/** [Method] Returns the value of gesture  */
		getGesture?(): string;
		/** [Method] Placeholder method  
		* @param e any 
		*/
		onGesture?( e?:any ): void;
		/** [Method] Sets the value of gesture  
		* @param gesture string 
		*/
		setGesture?( gesture?:string ): void;
	}
}
declare module Ext.chart.interactions {
	export interface IRotatePie3D extends Ext.chart.interactions.IRotate {
	}
}
declare module Ext.chart.label {
	export interface ICallout extends Ext.draw.modifier.IModifier {
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attr any 
		* @param changes any 
		*/
		popUp?( attr?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use  
		* @param attr any 
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to pushed down to the sprite  
		* @param attr any 
		* @param changes any 
		*/
		pushDown?( attr?:any, changes?:any ): any;
	}
}
declare module Ext.chart.label {
	export interface ILabel extends Ext.draw.sprite.IText {
		/** [Config Option] (Object) */
		fx?: any;
		/** [Method] Returns the value of fx  */
		getFx?(): any;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param clipRegion any 
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
		/** [Method] Sets the value of fx  
		* @param fx any 
		*/
		setFx?( fx?:any ): void;
	}
}
declare module Ext.chart {
	export interface ILegend extends Ext.dataview.IDataView {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		disableSelection?: bool;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (Boolean/Object) */
		inline?: any;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Boolean) */
		toggleable?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of disableSelection  */
		getDisableSelection?(): bool;
		/** [Method] Returns the value of docked  */
		getDocked?(): string;
		/** [Method] Returns the value of horizontalHeight  */
		getHorizontalHeight?(): number;
		/** [Method] Returns the value of inline  */
		getInline?(): bool;
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): any[];
		/** [Method] Returns the value of padding  */
		getPadding?(): number;
		/** [Method] Returns the value of toggleable  */
		getToggleable?(): bool;
		/** [Method] Returns the value of verticalWidth  */
		getVerticalWidth?(): number;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of disableSelection  
		* @param disableSelection bool 
		*/
		setDisableSelection?( disableSelection?:bool ): void;
		/** [Method] Sets the value of docked  
		* @param docked string 
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of horizontalHeight  
		* @param horizontalHeight number 
		*/
		setHorizontalHeight?( horizontalHeight?:number ): void;
		/** [Method] Sets the value of inline  
		* @param inline bool 
		*/
		setInline?( inline?:bool ): void;
		/** [Method] Sets the value of itemTpl  
		* @param itemTpl any[] 
		*/
		setItemTpl?( itemTpl?:any[] ): void;
		/** [Method] Sets the value of padding  
		* @param padding number 
		*/
		setPadding?( padding?:number ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Sets the value of toggleable  
		* @param toggleable bool 
		*/
		setToggleable?( toggleable?:bool ): void;
		/** [Method] Sets the value of verticalWidth  
		* @param verticalWidth number 
		*/
		setVerticalWidth?( verticalWidth?:number ): void;
	}
}
declare module Ext.chart {
	export interface IMarkerHolder extends Ext.mixin.IMixin {
		/** [Method]  
		* @param name any {String} 
		* @param marker any {Ext.chart.Markers} 
		*/
		bindMarker?( name?:any, marker?:any ): void;
	}
}
declare module Ext.chart {
	export interface IMarkers extends Ext.draw.sprite.IInstancing {
		/** [Method] Clear the markers in the category 
		* @param category string 
		*/
		clear?( category?:string ): void;
		/** [Method] Not supported  */
		getBBox?(): void;
		/** [Method]  
		* @param category string 
		* @param index any 
		* @param isWithoutTransform bool 
		*/
		getMarkerBBoxFor?( category?:string, index?:any, isWithoutTransform?:bool ): void;
		/** [Method] Put a marker in the category with additional attributes  
		* @param category any 
		* @param markerAttr any 
		* @param index any 
		* @param canonical any 
		* @param keepRevision any 
		*/
		putMarkerFor?( category?:any, markerAttr?:any, index?:any, canonical?:any, keepRevision?:any ): any;
		putMarkerFor?( category?:string, markerAttr?:any, index?:string, canonical?:bool, keepRevision?:bool ): void;
		putMarkerFor?( category?:string, markerAttr?:any, index?:number, canonical?:bool, keepRevision?:bool ): void;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param clipRegion any 
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any ): any;
	}
}
declare module Ext.chart {
	export interface IPolarChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Array) */
		center?: any[];
		/** [Config Option] (Number) */
		radius?: number;
		/** [Method] Returns the value of center  */
		getCenter?(): any[];
		/** [Method] Returns the value of radius  */
		getRadius?(): number;
		/** [Method] Redraw the chart  */
		redraw?(): void;
		/** [Method] Sets the value of center  
		* @param center any[] 
		*/
		setCenter?( center?:any[] ): void;
		/** [Method] Sets the value of radius  
		* @param radius number 
		*/
		setRadius?( radius?:number ): void;
	}
}
declare module Ext.chart.series {
	export interface IArea extends Ext.chart.series.IStackedCartesian {
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
	}
}
declare module Ext.chart.series {
	export interface IBar extends Ext.chart.series.IStackedCartesian {
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any  
		* @param x any 
		* @param y any 
		*/
		getItemForPoint?( x?:any, y?:any ): any;
	}
}
declare module Ext.chart.series {
	export interface ICandleStick extends Ext.chart.series.ICartesian {
		/** [Config Option] (String) */
		closeField?: string;
		/** [Config Option] (String) */
		highField?: string;
		/** [Config Option] (String) */
		lowField?: string;
		/** [Config Option] (String) */
		openField?: string;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of closeField  */
		getCloseField?(): string;
		/** [Method] Returns the value of highField  */
		getHighField?(): string;
		/** [Method] Returns the value of lowField  */
		getLowField?(): string;
		/** [Method] Returns the value of openField  */
		getOpenField?(): string;
		/** [Method] Sets the value of closeField  
		* @param closeField string 
		*/
		setCloseField?( closeField?:string ): void;
		/** [Method] Sets the value of highField  
		* @param highField string 
		*/
		setHighField?( highField?:string ): void;
		/** [Method] Sets the value of lowField  
		* @param lowField string 
		*/
		setLowField?( lowField?:string ): void;
		/** [Method] Sets the value of openField  
		* @param openField string 
		*/
		setOpenField?( openField?:string ): void;
	}
}
declare module Ext.chart.series {
	export interface ICartesian extends Ext.chart.series.ISeries {
		/** [Config Option] (Ext.chart.axis.Axis) */
		xAxis?: Ext.chart.axis.IAxis;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (Ext.chart.axis.Axis) */
		yAxis?: Ext.chart.axis.IAxis;
		/** [Config Option] (String) */
		yField?: string;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any  
		* @param x any 
		* @param y any 
		*/
		getItemForPoint?( x?:any, y?:any ): any;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of xAxis  */
		getXAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Returns the value of xField  */
		getXField?(): string;
		/** [Method] Returns the value of yAxis  */
		getYAxis?(): Ext.chart.axis.IAxis;
		/** [Method] Returns the value of yField  */
		getYField?(): string;
		/** [Method] Provide legend information to target array  
		* @param target any 
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of xAxis  
		* @param xAxis Ext.chart.axis.IAxis 
		*/
		setXAxis?( xAxis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Sets the value of xField  
		* @param xField string 
		*/
		setXField?( xField?:string ): void;
		/** [Method] Sets the value of yAxis  
		* @param yAxis Ext.chart.axis.IAxis 
		*/
		setYAxis?( yAxis?:Ext.chart.axis.IAxis ): void;
		/** [Method] Sets the value of yField  
		* @param yField string 
		*/
		setYField?( yField?:string ): void;
	}
}
declare module Ext.chart.series {
	export interface IGauge extends Ext.chart.series.ISeries {
		/** [Config Option] (String) */
		angleField?: string;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Number) */
		donut?: number;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Boolean) */
		needle?: bool;
		/** [Config Option] (Number) */
		needleLength?: number;
		/** [Config Option] (Number) */
		needleLengthRatio?: number;
		/** [Config Option] (Number) */
		needleWidth?: number;
		/** [Config Option] (Array) */
		sectors?: any[];
		/** [Config Option] (Boolean) */
		showInLegend?: bool;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Boolean) */
		wholeDisk?: bool;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of angleField  */
		getAngleField?(): string;
		/** [Method] Returns the value of center  */
		getCenter?(): any[];
		/** [Method] Returns the value of colors  */
		getColors?(): any[];
		/** [Method] Returns the value of donut  */
		getDonut?(): number;
		/** [Method] Returns the value of field  */
		getField?(): string;
		/** [Method] Returns the value of maximum  */
		getMaximum?(): number;
		/** [Method] Returns the value of minimum  */
		getMinimum?(): number;
		/** [Method] Returns the value of needle  */
		getNeedle?(): bool;
		/** [Method] Returns the value of needleLength  */
		getNeedleLength?(): number;
		/** [Method] Returns the value of needleLengthRatio  */
		getNeedleLengthRatio?(): number;
		/** [Method] Returns the value of needleWidth  */
		getNeedleWidth?(): number;
		/** [Method] Returns the value of radius  */
		getRadius?(): number;
		/** [Method] Returns the value of region  */
		getRegion?(): any[];
		/** [Method] Returns the value of rotation  */
		getRotation?(): number;
		/** [Method] Returns the value of sectors  */
		getSectors?(): any[];
		/** [Method] Returns the value of showInLegend  */
		getShowInLegend?(): bool;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of totalAngle  */
		getTotalAngle?(): any;
		/** [Method] Returns the value of value  */
		getValue?(): number;
		/** [Method] Returns the value of wholeDisk  */
		getWholeDisk?(): bool;
		/** [Method] Sets the value of angleField  
		* @param angleField string 
		*/
		setAngleField?( angleField?:string ): void;
		/** [Method] Sets the value of center  
		* @param center any[] 
		*/
		setCenter?( center?:any[] ): void;
		/** [Method] Sets the value of colors  
		* @param colors any[] 
		*/
		setColors?( colors?:any[] ): void;
		/** [Method] Sets the value of donut  
		* @param donut number 
		*/
		setDonut?( donut?:number ): void;
		/** [Method] Sets the value of field  
		* @param field string 
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of maximum  
		* @param maximum number 
		*/
		setMaximum?( maximum?:number ): void;
		/** [Method] Sets the value of minimum  
		* @param minimum number 
		*/
		setMinimum?( minimum?:number ): void;
		/** [Method] Sets the value of needle  
		* @param needle bool 
		*/
		setNeedle?( needle?:bool ): void;
		/** [Method] Sets the value of needleLength  
		* @param needleLength number 
		*/
		setNeedleLength?( needleLength?:number ): void;
		/** [Method] Sets the value of needleLengthRatio  
		* @param needleLengthRatio number 
		*/
		setNeedleLengthRatio?( needleLengthRatio?:number ): void;
		/** [Method] Sets the value of needleWidth  
		* @param needleWidth number 
		*/
		setNeedleWidth?( needleWidth?:number ): void;
		/** [Method] Sets the value of radius  
		* @param radius number 
		*/
		setRadius?( radius?:number ): void;
		/** [Method] Sets the value of region  
		* @param region any[] 
		*/
		setRegion?( region?:any[] ): void;
		/** [Method] Sets the value of rotation  
		* @param rotation number 
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of sectors  
		* @param sectors any[] 
		*/
		setSectors?( sectors?:any[] ): void;
		/** [Method] Sets the value of showInLegend  
		* @param showInLegend bool 
		*/
		setShowInLegend?( showInLegend?:bool ): void;
		/** [Method] Sets the value of totalAngle  
		* @param totalAngle any 
		*/
		setTotalAngle?( totalAngle?:any ): void;
		/** [Method] Sets the value of value  
		* @param value number 
		*/
		setValue?( value?:number ): void;
		/** [Method] Sets the value of wholeDisk  
		* @param wholeDisk bool 
		*/
		setWholeDisk?( wholeDisk?:bool ): void;
	}
}
declare module Ext.chart.series {
	export interface IItemPublisher extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.chart.series {
	export interface ILine extends Ext.chart.series.ICartesian {
		/** [Config Option] (Boolean) */
		fill?: bool;
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Config Option] (Boolean/Number) */
		smooth?: any;
		/** [Config Option] (Boolean) */
		step?: bool;
		/** [Config Option] (Object) */
		style?: any;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of aggregator  */
		getAggregator?(): any;
		/** [Method] Returns the value of fill  */
		getFill?(): bool;
		/** [Method] Returns the value of selectionTolerance  */
		getSelectionTolerance?(): number;
		/** [Method] Returns the value of smooth  */
		getSmooth?(): bool;
		/** [Method] Returns the value of smooth  */
		getSmooth?(): number;
		/** [Method] Returns the value of step  */
		getStep?(): bool;
		/** [Method] Sets the value of aggregator  
		* @param aggregator any 
		*/
		setAggregator?( aggregator?:any ): void;
		/** [Method] Sets the value of fill  
		* @param fill bool 
		*/
		setFill?( fill?:bool ): void;
		/** [Method] Sets the value of selectionTolerance  
		* @param selectionTolerance number 
		*/
		setSelectionTolerance?( selectionTolerance?:number ): void;
		/** [Method] Sets the value of smooth  
		* @param smooth any 
		*/
		setSmooth?( smooth?:any ): any;
		setSmooth?( smooth?:bool ): void;
		setSmooth?( smooth?:number ): void;
		/** [Method] Sets the value of step  
		* @param step bool 
		*/
		setStep?( step?:bool ): void;
	}
}
declare module Ext.chart.series {
	export interface IPie extends Ext.chart.series.IPolar {
		/** [Config Option] (Boolean/Number) */
		donut?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Number) */
		totalAngle?: number;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of donut  */
		getDonut?(): bool;
		/** [Method] Returns the value of donut  */
		getDonut?(): number;
		/** [Method] Returns the value of hidden  */
		getHidden?(): any[];
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any  
		* @param x any 
		* @param y any 
		*/
		getItemForPoint?( x?:any, y?:any ): any;
		/** [Method] Returns the value of labelField  */
		getLabelField?(): string;
		/** [Method] Returns the value of rotation  */
		getRotation?(): number;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of style  */
		getStyle?(): any;
		/** [Method] Returns the value of totalAngle  */
		getTotalAngle?(): number;
		/** [Method] Provide legend information to target array  
		* @param target any 
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of donut  
		* @param donut any 
		*/
		setDonut?( donut?:any ): any;
		setDonut?( donut?:bool ): void;
		setDonut?( donut?:number ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden any[] 
		*/
		setHidden?( hidden?:any[] ): void;
		/** [Method] Sets the value of labelField  
		* @param labelField string 
		*/
		setLabelField?( labelField?:string ): void;
		/** [Method] Sets the value of rotation  
		* @param rotation number 
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of style  
		* @param style any 
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of totalAngle  
		* @param totalAngle number 
		*/
		setTotalAngle?( totalAngle?:number ): void;
	}
}
declare module Ext.chart.series {
	export interface IPie3D extends Ext.chart.series.IPolar {
		/** [Config Option] (Boolean/Number) */
		donut?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of distortion  */
		getDistortion?(): number;
		/** [Method] Returns the value of donut  */
		getDonut?(): bool;
		/** [Method] Returns the value of donut  */
		getDonut?(): number;
		/** [Method] Returns the value of field  */
		getField?(): string;
		/** [Method] Returns the value of region  */
		getRegion?(): any[];
		/** [Method] Returns the value of rotation  */
		getRotation?(): number;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of thickness  */
		getThickness?(): number;
		/** [Method] Sets the value of distortion  
		* @param distortion number 
		*/
		setDistortion?( distortion?:number ): void;
		/** [Method] Sets the value of donut  
		* @param donut any 
		*/
		setDonut?( donut?:any ): any;
		setDonut?( donut?:bool ): void;
		setDonut?( donut?:number ): void;
		/** [Method] Sets the value of field  
		* @param field string 
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of region  
		* @param region any[] 
		*/
		setRegion?( region?:any[] ): void;
		/** [Method] Sets the value of rotation  
		* @param rotation number 
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of thickness  
		* @param thickness number 
		*/
		setThickness?( thickness?:number ): void;
	}
}
declare module Ext.chart.series {
	export interface IPolar extends Ext.chart.series.ISeries {
		/** [Config Option] (Array) */
		center?: any[];
		/** [Config Option] (Number) */
		offsetX?: number;
		/** [Config Option] (Number) */
		offsetY?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Boolean) */
		showInLegend?: bool;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (String) */
		yField?: string;
		/** [Method] Returns the value of center  */
		getCenter?(): any[];
		/** [Method] Returns the value of offsetX  */
		getOffsetX?(): number;
		/** [Method] Returns the value of offsetY  */
		getOffsetY?(): number;
		/** [Method] Returns the value of radius  */
		getRadius?(): number;
		/** [Method] Returns the value of rotation  */
		getRotation?(): number;
		/** [Method] Returns the value of showInLegend  */
		getShowInLegend?(): bool;
		/** [Method] Returns the value of xAxis  */
		getXAxis?(): any;
		/** [Method] Returns the value of xField  */
		getXField?(): string;
		/** [Method] Returns the value of yAxis  */
		getYAxis?(): any;
		/** [Method] Returns the value of yField  */
		getYField?(): string;
		/** [Method] Sets the value of center  
		* @param center any[] 
		*/
		setCenter?( center?:any[] ): void;
		/** [Method] Sets the value of offsetX  
		* @param offsetX number 
		*/
		setOffsetX?( offsetX?:number ): void;
		/** [Method] Sets the value of offsetY  
		* @param offsetY number 
		*/
		setOffsetY?( offsetY?:number ): void;
		/** [Method] Sets the value of radius  
		* @param radius number 
		*/
		setRadius?( radius?:number ): void;
		/** [Method] Sets the value of rotation  
		* @param rotation number 
		*/
		setRotation?( rotation?:number ): void;
		/** [Method] Sets the value of showInLegend  
		* @param showInLegend bool 
		*/
		setShowInLegend?( showInLegend?:bool ): void;
		/** [Method] Sets the value of xAxis  
		* @param xAxis any 
		*/
		setXAxis?( xAxis?:any ): void;
		/** [Method] Sets the value of xField  
		* @param xField string 
		*/
		setXField?( xField?:string ): void;
		/** [Method] Sets the value of yAxis  
		* @param yAxis any 
		*/
		setYAxis?( yAxis?:any ): void;
		/** [Method] Sets the value of yField  
		* @param yField string 
		*/
		setYField?( yField?:string ): void;
	}
}
declare module Ext.chart.series {
	export interface IRadar extends Ext.chart.series.IPolar {
		/** [Config Option] (Object) */
		style?: any;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any  
		* @param x any 
		* @param y any 
		*/
		getItemForPoint?( x?:any, y?:any ): any;
	}
}
declare module Ext.chart.series {
	export interface IScatter extends Ext.chart.series.ICartesian {
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Returns the value of itemInstancing  */
		getItemInstancing?(): any;
		/** [Method] Provide legend information to target array  
		* @param target any 
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of itemInstancing  
		* @param itemInstancing any 
		*/
		setItemInstancing?( itemInstancing?:any ): void;
	}
}
declare module Ext.chart.series {
	export interface ISeries extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		animate?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Boolean|Array) */
		hidden?: any;
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		marker?: any;
		/** [Config Option] (Object) */
		markerSubStyle?: any;
		/** [Config Option] (Object) */
		overlaySurface?: any;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		showInLegend?: bool;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Object) */
		subStyle?: any;
		/** [Config Option] (Object) */
		surface?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Property] (String) */
		seriesType?: string;
		/** [Property] (String) */
		type?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of animate  */
		getAnimate?(): any;
		/** [Method] Returns the value of background  */
		getBackground?(): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of colors  */
		getColors?(): any[];
		/** [Method] Returns the value of hidden  */
		getHidden?(): bool;
		/** [Method] Returns the value of hidden  */
		getHidden?(): any[];
		/** [Method] Returns the value of highlightCfg  */
		getHighlightCfg?(): any;
		/** [Method] Returns the value of highlightItem  */
		getHighlightItem?(): any;
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any  
		* @param x number 
		* @param y number 
		* @param target any optional target to receive the result 
		*/
		getItemForPoint?( x?:number, y?:number, target?:any ): any;
		/** [Method] Returns the value of itemInstancing  */
		getItemInstancing?(): any;
		/** [Method] Returns the value of label  */
		getLabel?(): any;
		/** [Method] Returns the value of labelField  */
		getLabelField?(): string;
		/** [Method] Returns the value of labelOverflowPadding  */
		getLabelOverflowPadding?(): number;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of marker  */
		getMarker?(): any;
		/** [Method] Returns the value of markerSubStyle  */
		getMarkerSubStyle?(): any;
		/** [Method] Returns the value of overlaySurface  */
		getOverlaySurface?(): any;
		/** [Method] Returns the value of renderer  */
		getRenderer?(): any;
		/** [Method] Returns the value of showInLegend  */
		getShowInLegend?(): bool;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of style  */
		getStyle?(): any;
		/** [Method] Returns the value of subStyle  */
		getSubStyle?(): any;
		/** [Method] Returns the value of surface  */
		getSurface?(): any;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Provide legend information to target array  
		* @param target any[] The information consists: 
		*/
		provideLegendInfo?( target?:any[] ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of animate  
		* @param animate any 
		*/
		setAnimate?( animate?:any ): void;
		/** [Method] Sets the value of background  
		* @param background any 
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of colors  
		* @param colors any[] 
		*/
		setColors?( colors?:any[] ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden any 
		*/
		setHidden?( hidden?:any ): any;
		setHidden?( hidden?:bool ): void;
		setHidden?( hidden?:any[] ): void;
		/** [Method]  
		* @param index number 
		* @param value bool 
		*/
		setHiddenByIndex?( index?:number, value?:bool ): void;
		/** [Method] Sets the value of highlightCfg  
		* @param highlightCfg any 
		*/
		setHighlightCfg?( highlightCfg?:any ): void;
		/** [Method] Sets the value of highlightItem  
		* @param highlightItem any 
		*/
		setHighlightItem?( highlightItem?:any ): void;
		/** [Method] Sets the value of itemInstancing  
		* @param itemInstancing any 
		*/
		setItemInstancing?( itemInstancing?:any ): void;
		/** [Method] Sets the value of label  
		* @param label any 
		*/
		setLabel?( label?:any ): void;
		/** [Method] Sets the value of labelField  
		* @param labelField string 
		*/
		setLabelField?( labelField?:string ): void;
		/** [Method] Sets the value of labelOverflowPadding  
		* @param labelOverflowPadding number 
		*/
		setLabelOverflowPadding?( labelOverflowPadding?:number ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of marker  
		* @param marker any 
		*/
		setMarker?( marker?:any ): void;
		/** [Method] Sets the value of markerSubStyle  
		* @param markerSubStyle any 
		*/
		setMarkerSubStyle?( markerSubStyle?:any ): void;
		/** [Method] Sets the value of overlaySurface  
		* @param overlaySurface any 
		*/
		setOverlaySurface?( overlaySurface?:any ): void;
		/** [Method] Sets the value of renderer  
		* @param renderer any 
		*/
		setRenderer?( renderer?:any ): any;
		/** [Method] Sets the value of showInLegend  
		* @param showInLegend bool 
		*/
		setShowInLegend?( showInLegend?:bool ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of style  
		* @param style any 
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of subStyle  
		* @param subStyle any 
		*/
		setSubStyle?( subStyle?:any ): void;
		/** [Method] Sets the value of surface  
		* @param surface any 
		*/
		setSurface?( surface?:any ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IAggregative extends Ext.chart.series.sprite.ICartesian {
		/** [Config Option] (Object) */
		dataClose?: any;
		/** [Config Option] (Object) */
		dataHigh?: any;
		/** [Config Option] (Object) */
		dataLow?: any;
		/** [Config Option] (Object) */
		dataOpen?: any;
		/** [Method] Returns the value of aggregator  */
		getAggregator?(): any;
		/** [Method] Render the given visible clip range  
		* @param surface any 
		* @param ctx any 
		* @param clip any 
		* @param region any 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, region?:any ): void;
		/** [Method] Sets the value of aggregator  
		* @param aggregator any 
		*/
		setAggregator?( aggregator?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IArea extends Ext.chart.series.sprite.IStackedCartesian {
		/** [Config Option] (Boolean) */
		step?: bool;
		/** [Method] Render the given visible clip range  
		* @param surface any 
		* @param ctx any 
		* @param clip any 
		* @param clipRegion any 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, clipRegion?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IBar extends Ext.chart.series.sprite.IStackedCartesian {
		/** [Config Option] (Number) */
		inGroupGapWidth?: number;
		/** [Config Option] (Number) */
		maxBarWidth?: number;
		/** [Config Option] (Number) */
		minBarWidth?: number;
		/** [Config Option] (Number) */
		minGapWidth?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Method] Get the nearest item index from point x y 
		* @param x any 
		* @param y any 
		*/
		getIndexNearPoint?( x?:any, y?:any ): number;
		/** [Method] Render the given visible clip range  
		* @param surface any 
		* @param ctx any 
		* @param clip any 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface ICandleStick extends Ext.chart.series.sprite.IAggregative {
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (String) */
		ohlcType?: string;
		/** [Config Option] (Number) */
		padding?: number;
	}
}
declare module Ext.chart.series.sprite {
	export interface ICartesian extends Ext.draw.sprite.ISprite,Ext.chart.IMarkerHolder {
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Boolean) */
		flipXY?: bool;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Method] Does a binary search of the data on the x axis using the given key  
		* @param key any 
		*/
		binarySearch?( key?:any ): any;
		/** [Method]  
		* @param name any {String} 
		* @param marker any {Ext.chart.Markers} 
		*/
		bindMarker?( name?:any, marker?:any ): void;
		/** [Method] Returns the value of field  */
		getField?(): string;
		/** [Method] Returns the value of flipXY  */
		getFlipXY?(): bool;
		/** [Method] Get the nearest item index from point x y 
		* @param x number 
		* @param y number 
		*/
		getIndexNearPoint?( x?:number, y?:number ): number;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param region any 
		*/
		render?( surface?:any, ctx?:any, region?:any ): any;
		/** [Method] Render the given visible clip range  
		* @param surface any 
		* @param ctx any 
		* @param clip any 
		* @param region any 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, region?:any ): void;
		/** [Method] Sets the value of field  
		* @param field string 
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of flipXY  
		* @param flipXY bool 
		*/
		setFlipXY?( flipXY?:bool ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface ILine extends Ext.chart.series.sprite.IAggregative {
		/** [Config Option] (Boolean) */
		fillArea?: bool;
		/** [Config Option] (Boolean) */
		preciseStroke?: bool;
		/** [Config Option] (Boolean) */
		smooth?: bool;
		/** [Config Option] (Boolean) */
		step?: bool;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IPie3DPart extends Ext.draw.sprite.IPath,Ext.chart.IMarkerHolder {
		/** [Config Option] (Object) */
		baseColor?: any;
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		distortion?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (String) */
		part?: string;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Config Option] (Number) */
		thickness?: number;
		/** [Method]  
		* @param name any {String} 
		* @param marker any {Ext.chart.Markers} 
		*/
		bindMarker?( name?:any, marker?:any ): void;
		/** [Method] Update the path  
		* @param path any 
		*/
		updatePath?( path?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform any 
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IPieSlice extends Ext.draw.sprite.ISector,Ext.chart.IMarkerHolder {
		/** [Config Option] (Boolean) */
		doCallout?: bool;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Boolean) */
		rotateLabels?: bool;
		/** [Method]  
		* @param name any {String} 
		* @param marker any {Ext.chart.Markers} 
		*/
		bindMarker?( name?:any, marker?:any ): void;
		/** [Method] Returns the value of rendererIndex  */
		getRendererIndex?(): number;
		/** [Method] Render method  
		* @param ctx any 
		* @param surface any 
		* @param clipRegion any 
		*/
		render?( ctx?:any, surface?:any, clipRegion?:any ): any;
		/** [Method] Sets the value of rendererIndex  
		* @param rendererIndex number 
		*/
		setRendererIndex?( rendererIndex?:number ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IPolar extends Ext.draw.sprite.ISprite,Ext.chart.IMarkerHolder {
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Method]  
		* @param name any {String} 
		* @param marker any {Ext.chart.Markers} 
		*/
		bindMarker?( name?:any, marker?:any ): void;
		/** [Method] Returns the value of field  */
		getField?(): any;
		/** [Method] Sets the value of field  
		* @param field any 
		*/
		setField?( field?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IRadar extends Ext.chart.series.sprite.IPolar {
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		*/
		render?( surface?:any, ctx?:any ): any;
	}
}
declare module Ext.chart.series.sprite {
	export interface IScatter extends Ext.chart.series.sprite.ICartesian {
		/** [Method] Render the given visible clip range  
		* @param surface any 
		* @param ctx any 
		* @param clip any 
		* @param clipRegion any 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, clipRegion?:any ): void;
	}
}
declare module Ext.chart.series.sprite {
	export interface IStackedCartesian extends Ext.chart.series.sprite.ICartesian {
		/** [Method] Get the nearest item index from point x y 
		* @param x any 
		* @param y any 
		*/
		getIndexNearPoint?( x?:any, y?:any ): number;
	}
}
declare module Ext.chart.series {
	export interface IStackedCartesian extends Ext.chart.series.ICartesian {
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (Boolean) */
		stacked?: bool;
		/** [Method] Returns the value of hidden  */
		getHidden?(): any[];
		/** [Method] For a given x y point relative to the main region find a corresponding item from this series if any  
		* @param x any 
		* @param y any 
		*/
		getItemForPoint?( x?:any, y?:any ): any;
		/** [Method] Performs drawing of this series  */
		getSprites?(): void;
		/** [Method] Returns the value of stacked  */
		getStacked?(): bool;
		/** [Method] Provide legend information to target array  
		* @param target any 
		*/
		provideLegendInfo?( target?:any ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden any[] 
		*/
		setHidden?( hidden?:any[] ): void;
		/** [Method] Sets the value of stacked  
		* @param stacked bool 
		*/
		setStacked?( stacked?:bool ): void;
	}
}
declare module Ext.chart {
	export interface ISpaceFillingChart extends Ext.chart.IAbstractChart {
		/** [Method] Redraw the chart  */
		redraw?(): void;
	}
}
declare module Ext {
	export interface IClass {
		/** [Config Option] (String[]) */
		alias?: string[];
		/** [Config Option] (String/String[]) */
		alternateClassName?: any;
		/** [Config Option] (Object) */
		config?: any;
		/** [Config Option] (String) */
		extend?: string;
		/** [Config Option] (Object) */
		inheritableStatics?: any;
		/** [Config Option] (Object) */
		mixins?: any;
		/** [Config Option] (Object) */
		platformConfig?: any;
		/** [Config Option] (Boolean) */
		singleton?: bool;
		/** [Config Option] (Object) */
		statics?: any;
		/** [Config Option] (String[]) */
		uses?: string[];
	}
}
declare module Ext {
	export interface IClassManager {
	}
	export class ClassManager {
		/** [Method] Adds a batch of class name to alias mappings 
		* @param aliases any The set of mappings of the form className : [values...] 
		*/
		static addNameAliasMappings( aliases?:any ): Ext.IClassManager;
		/** [Method]  
		* @param alternates any The set of mappings of the form className : [values...] 
		*/
		static addNameAlternateMappings( alternates?:any ): Ext.IClassManager;
		/** [Method] Retrieve a class by its name  
		* @param name string 
		*/
		static get( name?:string ): Ext.IClass;
		/** [Method] Get the aliases of a class by the class name 
		* @param name string 
		*/
		static getAliasesByName( name?:string ): any[];
		/** [Method] Get a reference to the class by its alias  
		* @param alias string 
		*/
		static getByAlias( alias?:string ): Ext.IClass;
		/** [Method] Get the class of the provided object returns null if it s not an instance of any class created with Ext define  
		* @param object any 
		*/
		static getClass( object?:any ): Ext.IClass;
		/** [Method] Get the name of the class by its reference or its instance usually invoked by the shorthand Ext getClassName Ext Cl  
		* @param object any 
		*/
		static getName( object?:any ): string;
		/** [Method] Get the name of a class by its alias  
		* @param alias string 
		*/
		static getNameByAlias( alias?:string ): string;
		/** [Method] Get the name of a class by its alternate name  
		* @param alternate string 
		*/
		static getNameByAlternate( alternate?:string ): string;
		/** [Method] Converts a string expression to an array of matching class names  
		* @param expression string 
		*/
		static getNamesByExpression( expression?:string ): any[];
		/** [Method] Instantiate a class by either full name alias or alternate name usually invoked by the convenient shorthand Ext cre  
		* @param name string 
		* @param args any Additional arguments after the name will be passed to the class' constructor. 
		*/
		static instantiate( name?:string, args?:any ): any;
		/** [Method] Instantiate a class by its alias usually invoked by the convenient shorthand Ext createByAlias If Ext Loader is enab  
		* @param alias string 
		* @param args any Additional arguments after the alias will be passed to the class constructor. 
		*/
		static instantiateByAlias( alias?:string, args?:any ): any;
		/** [Method] Checks if a class has already been created  
		* @param className string 
		*/
		static isCreated( className?:string ): bool;
		/** [Method] Sets a name reference to a class  
		* @param name string 
		* @param value any 
		*/
		static set( name?:string, value?:any ): Ext.IClassManager;
		/** [Method] Register the alias for a class  
		* @param cls any a reference to a class or a className. 
		* @param alias any Alias to use when referring to this class. 
		*/
		static setAlias( cls?:any, alias?:any ): any;
		static setAlias( cls?:Ext.IClass, alias?:string ): Ext.IClassManager;
		static setAlias( cls?:string, alias?:string ): Ext.IClassManager;
		/** [Method] Creates a namespace and assign the value to the created object  
		* @param name string 
		* @param value any 
		*/
		static setNamespace( name?:string, value?:any ): void;
	}
}
declare module Ext {
	export interface IComponent extends Ext.IAbstractComponent,Ext.mixin.ITraversable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		border?: any;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (Boolean) */
		centered?: bool;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Ext.Element/HTMLElement/String) */
		contentEl?: any;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		disabled?: bool;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (String) */
		dock?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (String/Mixed) */
		enterAnimation?: any;
		/** [Config Option] (String/Mixed) */
		exitAnimation?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: bool;
		/** [Config Option] (String) */
		floatingCls?: string;
		/** [Config Option] (Boolean) */
		fullscreen?: bool;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: bool;
		/** [Config Option] (String) */
		hiddenCls?: string;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: bool;
		/** [Config Option] (String/Ext.Element/HTMLElement) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		layoutOnOrientationChange?: bool;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (Number/String) */
		maxHeight?: any;
		/** [Config Option] (Number/String) */
		maxWidth?: any;
		/** [Config Option] (Number/String) */
		minHeight?: any;
		/** [Config Option] (Number/String) */
		minWidth?: any;
		/** [Config Option] (Boolean) */
		modal?: bool;
		/** [Config Option] (Boolean) */
		monitorOrientation?: bool;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object/Array) */
		plugins?: any;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Ext.Element) */
		renderTo?: Ext.IElement;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Config Option] (Boolean) */
		stopMaskTapEvent?: bool;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (String) */
		styleHtmlCls?: string;
		/** [Config Option] (Boolean) */
		styleHtmlContent?: bool;
		/** [Config Option] (Number/String) */
		top?: any;
		/** [Config Option] (String/String[]/Ext.Template[]/Ext.XTemplate[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Config Option] (String) */
		xtype?: string;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Adds a CSS class or classes to this Component s rendered element  
		* @param cls string The CSS class to add. 
		* @param prefix string Optional prefix to add to each class. 
		* @param suffix string Optional suffix to add to each class. 
		*/
		addCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Disables this Component */
		disable?(): void;
		/** [Method] Enables this Component */
		enable?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of border  */
		getBorder?(): number;
		/** [Method] Returns the value of border  */
		getBorder?(): string;
		/** [Method] Returns the value of bottom  */
		getBottom?(): number;
		/** [Method] Returns the value of bottom  */
		getBottom?(): string;
		/** [Method] Returns the value of centered  */
		getCentered?(): bool;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of cls  */
		getCls?(): string[];
		/** [Method] Returns the value of contentEl  */
		getContentEl?(): Ext.IElement;
		/** [Method] Returns the value of contentEl  */
		getContentEl?(): HTMLElement;
		/** [Method] Returns the value of contentEl  */
		getContentEl?(): string;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Returns the value of disabled  */
		getDisabled?(): bool;
		/** [Method] Returns the value of disabledCls  */
		getDisabledCls?(): string;
		/** [Method] Returns the value of docked  */
		getDocked?(): string;
		/** [Method] Retrieves the top level element representing this component  */
		getEl?(): Ext.dom.IElement;
		/** [Method] Returns the value of enterAnimation  */
		getEnterAnimation?(): string;
		/** [Method] Returns the value of enterAnimation  */
		getEnterAnimation?(): any;
		/** [Method] Returns the value of exitAnimation  */
		getExitAnimation?(): string;
		/** [Method] Returns the value of exitAnimation  */
		getExitAnimation?(): any;
		/** [Method] Returns the value of flex  */
		getFlex?(): number;
		/** [Method] Returns the value of floatingCls  */
		getFloatingCls?(): string;
		/** [Method] Returns the value of height  */
		getHeight?(): number;
		/** [Method] Returns the value of height  */
		getHeight?(): string;
		/** [Method] Returns the value of hidden  */
		getHidden?(): bool;
		/** [Method] Returns the value of hiddenCls  */
		getHiddenCls?(): string;
		/** [Method] Returns the value of hideAnimation  */
		getHideAnimation?(): string;
		/** [Method] Returns the value of hideAnimation  */
		getHideAnimation?(): any;
		/** [Method] Returns the value of html  */
		getHtml?(): string;
		/** [Method] Returns the value of html  */
		getHtml?(): Ext.IElement;
		/** [Method] Returns the value of html  */
		getHtml?(): HTMLElement;
		/** [Method] Returns the value of itemId  */
		getItemId?(): string;
		/** [Method] Returns the value of left  */
		getLeft?(): number;
		/** [Method] Returns the value of left  */
		getLeft?(): string;
		/** [Method] Returns the value of margin  */
		getMargin?(): number;
		/** [Method] Returns the value of margin  */
		getMargin?(): string;
		/** [Method] Returns the value of maxHeight  */
		getMaxHeight?(): number;
		/** [Method] Returns the value of maxHeight  */
		getMaxHeight?(): string;
		/** [Method] Returns the value of maxWidth  */
		getMaxWidth?(): number;
		/** [Method] Returns the value of maxWidth  */
		getMaxWidth?(): string;
		/** [Method] Returns the value of minHeight  */
		getMinHeight?(): number;
		/** [Method] Returns the value of minHeight  */
		getMinHeight?(): string;
		/** [Method] Returns the value of minWidth  */
		getMinWidth?(): number;
		/** [Method] Returns the value of minWidth  */
		getMinWidth?(): string;
		/** [Method] Returns the value of padding  */
		getPadding?(): number;
		/** [Method] Returns the value of padding  */
		getPadding?(): string;
		/** [Method] Returns the parent of this component if it has one  */
		getParent?(): Ext.IComponent;
		/** [Method] Returns the value of plugins  */
		getPlugins?(): any;
		/** [Method] Returns the value of record  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of renderTo  */
		getRenderTo?(): Ext.IElement;
		/** [Method] Returns the value of right  */
		getRight?(): number;
		/** [Method] Returns the value of right  */
		getRight?(): string;
		/** [Method] Returns the value of showAnimation  */
		getShowAnimation?(): string;
		/** [Method] Returns the value of showAnimation  */
		getShowAnimation?(): any;
		/** [Method] Returns the height and width of the Component  */
		getSize?(): any;
		/** [Method] Returns the value of style  */
		getStyle?(): any;
		/** [Method] Returns the value of styleHtmlCls  */
		getStyleHtmlCls?(): string;
		/** [Method] Returns the value of styleHtmlContent  */
		getStyleHtmlContent?(): bool;
		/** [Method] Returns the value of top  */
		getTop?(): number;
		/** [Method] Returns the value of top  */
		getTop?(): string;
		/** [Method] Returns the value of tpl  */
		getTpl?(): string;
		/** [Method] Returns the value of tpl  */
		getTpl?(): string[];
		/** [Method] Returns the value of tpl  */
		getTpl?(): Ext.ITemplate[];
		/** [Method] Returns the value of tpl  */
		getTpl?(): Ext.IXTemplate[];
		/** [Method] Returns the value of tplWriteMode  */
		getTplWriteMode?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of width  */
		getWidth?(): number;
		/** [Method] Returns the value of width  */
		getWidth?(): string;
		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string  */
		getXTypes?(): string;
		/** [Method] Returns the value of zIndex  */
		getZIndex?(): number;
		/** [Method] Returns true if this component has a parent  */
		hasParent?(): bool;
		/** [Method] Hides this Component 
		* @param animation any 
		*/
		hide?( animation?:any ): Ext.IComponent;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if this Component is currently disabled  */
		isDisabled?(): bool;
		/** [Method] Returns true if this Component is currently hidden  */
		isHidden?(): bool;
		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype string The xtype to check for this Component. 
		* @param shallow bool false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype. 
		*/
		isXType?( xtype?:string, shallow?:bool ): bool;
		/** [Method] Removes the given CSS class es from this Component s rendered element  
		* @param cls string The class(es) to remove. 
		* @param prefix string Optional prefix to prepend before each class. 
		* @param suffix string Optional suffix to append to each class. 
		*/
		removeCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Replaces specified classes with the newly specified classes  
		* @param oldCls string The class(es) to remove. 
		* @param newCls string The class(es) to add. 
		* @param prefix string Optional prefix to prepend before each class. 
		* @param suffix string Optional suffix to append to each class. 
		*/
		replaceCls?( oldCls?:string, newCls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Resets top right bottom and left configurations to null which will un float this component  */
		resetFloating?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of border  
		* @param border any 
		*/
		setBorder?( border?:any ): any;
		setBorder?( border?:number ): void;
		setBorder?( border?:string ): void;
		/** [Method] Sets the value of bottom  
		* @param bottom any 
		*/
		setBottom?( bottom?:any ): any;
		setBottom?( bottom?:number ): void;
		setBottom?( bottom?:string ): void;
		/** [Method] Sets the value of centered  
		* @param centered bool 
		*/
		setCentered?( centered?:bool ): void;
		/** [Method] Sets the value of cls  
		* @param cls any 
		*/
		setCls?( cls?:any ): any;
		setCls?( cls?:string ): void;
		setCls?( cls?:string[] ): void;
		/** [Method] Sets the value of contentEl  
		* @param contentEl any 
		*/
		setContentEl?( contentEl?:any ): any;
		setContentEl?( contentEl?:Ext.IElement ): void;
		setContentEl?( contentEl?:HTMLElement ): void;
		setContentEl?( contentEl?:string ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of disabled  
		* @param disabled bool 
		*/
		setDisabled?( disabled?:bool ): void;
		/** [Method] Sets the value of disabledCls  
		* @param disabledCls string 
		*/
		setDisabledCls?( disabledCls?:string ): void;
		/** [Method] Sets the value of docked  
		* @param docked string 
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of draggable  
		* @param draggable any 
		*/
		setDraggable?( draggable?:any ): void;
		/** [Method] Sets the value of enterAnimation  
		* @param enterAnimation any 
		*/
		setEnterAnimation?( enterAnimation?:any ): any;
		setEnterAnimation?( enterAnimation?:string ): void;
		/** [Method] Sets the value of exitAnimation  
		* @param exitAnimation any 
		*/
		setExitAnimation?( exitAnimation?:any ): any;
		setExitAnimation?( exitAnimation?:string ): void;
		/** [Method] Sets the value of flex  
		* @param flex number 
		*/
		setFlex?( flex?:number ): void;
		/** [Method] Used to update the floating state of this component  
		* @param floating bool true if you want to float this component. 
		*/
		setFloating?( floating?:bool ): void;
		/** [Method] Sets the value of floatingCls  
		* @param floatingCls string 
		*/
		setFloatingCls?( floatingCls?:string ): void;
		/** [Method] Sets the value of height  
		* @param height any 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): void;
		setHeight?( height?:string ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden bool 
		*/
		setHidden?( hidden?:bool ): void;
		/** [Method] Sets the value of hiddenCls  
		* @param hiddenCls string 
		*/
		setHiddenCls?( hiddenCls?:string ): void;
		/** [Method] Sets the value of hideAnimation  
		* @param hideAnimation any 
		*/
		setHideAnimation?( hideAnimation?:any ): any;
		setHideAnimation?( hideAnimation?:string ): void;
		/** [Method] Sets the value of html  
		* @param html any 
		*/
		setHtml?( html?:any ): any;
		setHtml?( html?:string ): void;
		setHtml?( html?:Ext.IElement ): void;
		setHtml?( html?:HTMLElement ): void;
		/** [Method] Sets the value of itemId  
		* @param itemId string 
		*/
		setItemId?( itemId?:string ): void;
		/** [Method] Sets the value of left  
		* @param left any 
		*/
		setLeft?( left?:any ): any;
		setLeft?( left?:number ): void;
		setLeft?( left?:string ): void;
		/** [Method] Sets the value of margin  
		* @param margin any 
		*/
		setMargin?( margin?:any ): any;
		setMargin?( margin?:number ): void;
		setMargin?( margin?:string ): void;
		/** [Method] Sets the value of maxHeight  
		* @param maxHeight any 
		*/
		setMaxHeight?( maxHeight?:any ): any;
		setMaxHeight?( maxHeight?:number ): void;
		setMaxHeight?( maxHeight?:string ): void;
		/** [Method] Sets the value of maxWidth  
		* @param maxWidth any 
		*/
		setMaxWidth?( maxWidth?:any ): any;
		setMaxWidth?( maxWidth?:number ): void;
		setMaxWidth?( maxWidth?:string ): void;
		/** [Method] Sets the value of minHeight  
		* @param minHeight any 
		*/
		setMinHeight?( minHeight?:any ): any;
		setMinHeight?( minHeight?:number ): void;
		setMinHeight?( minHeight?:string ): void;
		/** [Method] Sets the value of minWidth  
		* @param minWidth any 
		*/
		setMinWidth?( minWidth?:any ): any;
		setMinWidth?( minWidth?:number ): void;
		setMinWidth?( minWidth?:string ): void;
		/** [Method] Sets the value of padding  
		* @param padding any 
		*/
		setPadding?( padding?:any ): any;
		setPadding?( padding?:number ): void;
		setPadding?( padding?:string ): void;
		/** [Method] Sets the value of plugins  
		* @param plugins any 
		*/
		setPlugins?( plugins?:any ): void;
		/** [Method] Sets the value of record  
		* @param record Ext.data.IModel 
		*/
		setRecord?( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of renderTo  
		* @param renderTo Ext.IElement 
		*/
		setRenderTo?( renderTo?:Ext.IElement ): void;
		/** [Method] Sets the value of right  
		* @param right any 
		*/
		setRight?( right?:any ): any;
		setRight?( right?:number ): void;
		setRight?( right?:string ): void;
		/** [Method] This method has moved to Ext Container  */
		setScrollable?(): void;
		/** [Method] Sets the value of showAnimation  
		* @param showAnimation any 
		*/
		setShowAnimation?( showAnimation?:any ): any;
		setShowAnimation?( showAnimation?:string ): void;
		/** [Method] Sets the size of the Component  
		* @param width number The new width for the Component. 
		* @param height number The new height for the Component. 
		*/
		setSize?( width?:number, height?:number ): void;
		/** [Method] Sets the value of style  
		* @param style any 
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of styleHtmlCls  
		* @param styleHtmlCls string 
		*/
		setStyleHtmlCls?( styleHtmlCls?:string ): void;
		/** [Method] Sets the value of styleHtmlContent  
		* @param styleHtmlContent bool 
		*/
		setStyleHtmlContent?( styleHtmlContent?:bool ): void;
		/** [Method] Sets the value of top  
		* @param top any 
		*/
		setTop?( top?:any ): any;
		setTop?( top?:number ): void;
		setTop?( top?:string ): void;
		/** [Method] Sets the value of tpl  
		* @param tpl any 
		*/
		setTpl?( tpl?:any ): any;
		setTpl?( tpl?:string ): void;
		setTpl?( tpl?:string[] ): void;
		setTpl?( tpl?:Ext.ITemplate[] ): void;
		setTpl?( tpl?:Ext.IXTemplate[] ): void;
		/** [Method] Sets the value of tplWriteMode  
		* @param tplWriteMode string 
		*/
		setTplWriteMode?( tplWriteMode?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of width  
		* @param width any 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): void;
		setWidth?( width?:string ): void;
		/** [Method] Sets the value of zIndex  
		* @param zIndex number 
		*/
		setZIndex?( zIndex?:number ): void;
		/** [Method] Shows this component  
		* @param animation any 
		*/
		show?( animation?:any ): Ext.IComponent;
		/** [Method] Shows this component by another component  
		* @param component Ext.IComponent The target component to show this component by. 
		* @param alignment string The specific alignment. 
		*/
		showBy?( component?:Ext.IComponent, alignment?:string ): void;
		/** [Method] Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector  
		* @param selector string The simple selector to test. 
		*/
		up?( selector?:string ): Ext.IContainer;
		/** [Method] Updates the HTML content of the Component  */
		update?(): void;
		/** [Method] Updates the styleHtmlCls configuration 
		* @param newHtmlCls any 
		* @param oldHtmlCls any 
		*/
		updateStyleHtmlCls?( newHtmlCls?:any, oldHtmlCls?:any ): void;
	}
}
declare module Ext.lib {
	export interface IComponent extends Ext.IAbstractComponent,Ext.mixin.ITraversable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		border?: any;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (Boolean) */
		centered?: bool;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Ext.Element/HTMLElement/String) */
		contentEl?: any;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		disabled?: bool;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (String) */
		dock?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (String/Mixed) */
		enterAnimation?: any;
		/** [Config Option] (String/Mixed) */
		exitAnimation?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: bool;
		/** [Config Option] (String) */
		floatingCls?: string;
		/** [Config Option] (Boolean) */
		fullscreen?: bool;
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: bool;
		/** [Config Option] (String) */
		hiddenCls?: string;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: bool;
		/** [Config Option] (String/Ext.Element/HTMLElement) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		layoutOnOrientationChange?: bool;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (Number/String) */
		maxHeight?: any;
		/** [Config Option] (Number/String) */
		maxWidth?: any;
		/** [Config Option] (Number/String) */
		minHeight?: any;
		/** [Config Option] (Number/String) */
		minWidth?: any;
		/** [Config Option] (Boolean) */
		modal?: bool;
		/** [Config Option] (Boolean) */
		monitorOrientation?: bool;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object/Array) */
		plugins?: any;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Ext.Element) */
		renderTo?: Ext.IElement;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Config Option] (Boolean) */
		stopMaskTapEvent?: bool;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (String) */
		styleHtmlCls?: string;
		/** [Config Option] (Boolean) */
		styleHtmlContent?: bool;
		/** [Config Option] (Number/String) */
		top?: any;
		/** [Config Option] (String/String[]/Ext.Template[]/Ext.XTemplate[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Config Option] (String) */
		xtype?: string;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Adds a CSS class or classes to this Component s rendered element  
		* @param cls string The CSS class to add. 
		* @param prefix string Optional prefix to add to each class. 
		* @param suffix string Optional suffix to add to each class. 
		*/
		addCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Disables this Component */
		disable?(): void;
		/** [Method] Enables this Component */
		enable?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of border  */
		getBorder?(): number;
		/** [Method] Returns the value of border  */
		getBorder?(): string;
		/** [Method] Returns the value of bottom  */
		getBottom?(): number;
		/** [Method] Returns the value of bottom  */
		getBottom?(): string;
		/** [Method] Returns the value of centered  */
		getCentered?(): bool;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of cls  */
		getCls?(): string[];
		/** [Method] Returns the value of contentEl  */
		getContentEl?(): Ext.IElement;
		/** [Method] Returns the value of contentEl  */
		getContentEl?(): HTMLElement;
		/** [Method] Returns the value of contentEl  */
		getContentEl?(): string;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Returns the value of disabled  */
		getDisabled?(): bool;
		/** [Method] Returns the value of disabledCls  */
		getDisabledCls?(): string;
		/** [Method] Returns the value of docked  */
		getDocked?(): string;
		/** [Method] Retrieves the top level element representing this component  */
		getEl?(): Ext.dom.IElement;
		/** [Method] Returns the value of enterAnimation  */
		getEnterAnimation?(): string;
		/** [Method] Returns the value of enterAnimation  */
		getEnterAnimation?(): any;
		/** [Method] Returns the value of exitAnimation  */
		getExitAnimation?(): string;
		/** [Method] Returns the value of exitAnimation  */
		getExitAnimation?(): any;
		/** [Method] Returns the value of flex  */
		getFlex?(): number;
		/** [Method] Returns the value of floatingCls  */
		getFloatingCls?(): string;
		/** [Method] Returns the value of height  */
		getHeight?(): number;
		/** [Method] Returns the value of height  */
		getHeight?(): string;
		/** [Method] Returns the value of hidden  */
		getHidden?(): bool;
		/** [Method] Returns the value of hiddenCls  */
		getHiddenCls?(): string;
		/** [Method] Returns the value of hideAnimation  */
		getHideAnimation?(): string;
		/** [Method] Returns the value of hideAnimation  */
		getHideAnimation?(): any;
		/** [Method] Returns the value of html  */
		getHtml?(): string;
		/** [Method] Returns the value of html  */
		getHtml?(): Ext.IElement;
		/** [Method] Returns the value of html  */
		getHtml?(): HTMLElement;
		/** [Method] Returns the value of itemId  */
		getItemId?(): string;
		/** [Method] Returns the value of left  */
		getLeft?(): number;
		/** [Method] Returns the value of left  */
		getLeft?(): string;
		/** [Method] Returns the value of margin  */
		getMargin?(): number;
		/** [Method] Returns the value of margin  */
		getMargin?(): string;
		/** [Method] Returns the value of maxHeight  */
		getMaxHeight?(): number;
		/** [Method] Returns the value of maxHeight  */
		getMaxHeight?(): string;
		/** [Method] Returns the value of maxWidth  */
		getMaxWidth?(): number;
		/** [Method] Returns the value of maxWidth  */
		getMaxWidth?(): string;
		/** [Method] Returns the value of minHeight  */
		getMinHeight?(): number;
		/** [Method] Returns the value of minHeight  */
		getMinHeight?(): string;
		/** [Method] Returns the value of minWidth  */
		getMinWidth?(): number;
		/** [Method] Returns the value of minWidth  */
		getMinWidth?(): string;
		/** [Method] Returns the value of padding  */
		getPadding?(): number;
		/** [Method] Returns the value of padding  */
		getPadding?(): string;
		/** [Method] Returns the parent of this component if it has one  */
		getParent?(): Ext.IComponent;
		/** [Method] Returns the value of plugins  */
		getPlugins?(): any;
		/** [Method] Returns the value of record  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of renderTo  */
		getRenderTo?(): Ext.IElement;
		/** [Method] Returns the value of right  */
		getRight?(): number;
		/** [Method] Returns the value of right  */
		getRight?(): string;
		/** [Method] Returns the value of showAnimation  */
		getShowAnimation?(): string;
		/** [Method] Returns the value of showAnimation  */
		getShowAnimation?(): any;
		/** [Method] Returns the height and width of the Component  */
		getSize?(): any;
		/** [Method] Returns the value of style  */
		getStyle?(): any;
		/** [Method] Returns the value of styleHtmlCls  */
		getStyleHtmlCls?(): string;
		/** [Method] Returns the value of styleHtmlContent  */
		getStyleHtmlContent?(): bool;
		/** [Method] Returns the value of top  */
		getTop?(): number;
		/** [Method] Returns the value of top  */
		getTop?(): string;
		/** [Method] Returns the value of tpl  */
		getTpl?(): string;
		/** [Method] Returns the value of tpl  */
		getTpl?(): string[];
		/** [Method] Returns the value of tpl  */
		getTpl?(): Ext.ITemplate[];
		/** [Method] Returns the value of tpl  */
		getTpl?(): Ext.IXTemplate[];
		/** [Method] Returns the value of tplWriteMode  */
		getTplWriteMode?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of width  */
		getWidth?(): number;
		/** [Method] Returns the value of width  */
		getWidth?(): string;
		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string  */
		getXTypes?(): string;
		/** [Method] Returns the value of zIndex  */
		getZIndex?(): number;
		/** [Method] Returns true if this component has a parent  */
		hasParent?(): bool;
		/** [Method] Hides this Component 
		* @param animation any 
		*/
		hide?( animation?:any ): Ext.IComponent;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if this Component is currently disabled  */
		isDisabled?(): bool;
		/** [Method] Returns true if this Component is currently hidden  */
		isHidden?(): bool;
		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype string The xtype to check for this Component. 
		* @param shallow bool false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype. 
		*/
		isXType?( xtype?:string, shallow?:bool ): bool;
		/** [Method] Removes the given CSS class es from this Component s rendered element  
		* @param cls string The class(es) to remove. 
		* @param prefix string Optional prefix to prepend before each class. 
		* @param suffix string Optional suffix to append to each class. 
		*/
		removeCls?( cls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Replaces specified classes with the newly specified classes  
		* @param oldCls string The class(es) to remove. 
		* @param newCls string The class(es) to add. 
		* @param prefix string Optional prefix to prepend before each class. 
		* @param suffix string Optional suffix to append to each class. 
		*/
		replaceCls?( oldCls?:string, newCls?:string, prefix?:string, suffix?:string ): void;
		/** [Method] Resets top right bottom and left configurations to null which will un float this component  */
		resetFloating?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of border  
		* @param border any 
		*/
		setBorder?( border?:any ): any;
		setBorder?( border?:number ): void;
		setBorder?( border?:string ): void;
		/** [Method] Sets the value of bottom  
		* @param bottom any 
		*/
		setBottom?( bottom?:any ): any;
		setBottom?( bottom?:number ): void;
		setBottom?( bottom?:string ): void;
		/** [Method] Sets the value of centered  
		* @param centered bool 
		*/
		setCentered?( centered?:bool ): void;
		/** [Method] Sets the value of cls  
		* @param cls any 
		*/
		setCls?( cls?:any ): any;
		setCls?( cls?:string ): void;
		setCls?( cls?:string[] ): void;
		/** [Method] Sets the value of contentEl  
		* @param contentEl any 
		*/
		setContentEl?( contentEl?:any ): any;
		setContentEl?( contentEl?:Ext.IElement ): void;
		setContentEl?( contentEl?:HTMLElement ): void;
		setContentEl?( contentEl?:string ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of disabled  
		* @param disabled bool 
		*/
		setDisabled?( disabled?:bool ): void;
		/** [Method] Sets the value of disabledCls  
		* @param disabledCls string 
		*/
		setDisabledCls?( disabledCls?:string ): void;
		/** [Method] Sets the value of docked  
		* @param docked string 
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of draggable  
		* @param draggable any 
		*/
		setDraggable?( draggable?:any ): void;
		/** [Method] Sets the value of enterAnimation  
		* @param enterAnimation any 
		*/
		setEnterAnimation?( enterAnimation?:any ): any;
		setEnterAnimation?( enterAnimation?:string ): void;
		/** [Method] Sets the value of exitAnimation  
		* @param exitAnimation any 
		*/
		setExitAnimation?( exitAnimation?:any ): any;
		setExitAnimation?( exitAnimation?:string ): void;
		/** [Method] Sets the value of flex  
		* @param flex number 
		*/
		setFlex?( flex?:number ): void;
		/** [Method] Used to update the floating state of this component  
		* @param floating bool true if you want to float this component. 
		*/
		setFloating?( floating?:bool ): void;
		/** [Method] Sets the value of floatingCls  
		* @param floatingCls string 
		*/
		setFloatingCls?( floatingCls?:string ): void;
		/** [Method] Sets the value of height  
		* @param height any 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): void;
		setHeight?( height?:string ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden bool 
		*/
		setHidden?( hidden?:bool ): void;
		/** [Method] Sets the value of hiddenCls  
		* @param hiddenCls string 
		*/
		setHiddenCls?( hiddenCls?:string ): void;
		/** [Method] Sets the value of hideAnimation  
		* @param hideAnimation any 
		*/
		setHideAnimation?( hideAnimation?:any ): any;
		setHideAnimation?( hideAnimation?:string ): void;
		/** [Method] Sets the value of html  
		* @param html any 
		*/
		setHtml?( html?:any ): any;
		setHtml?( html?:string ): void;
		setHtml?( html?:Ext.IElement ): void;
		setHtml?( html?:HTMLElement ): void;
		/** [Method] Sets the value of itemId  
		* @param itemId string 
		*/
		setItemId?( itemId?:string ): void;
		/** [Method] Sets the value of left  
		* @param left any 
		*/
		setLeft?( left?:any ): any;
		setLeft?( left?:number ): void;
		setLeft?( left?:string ): void;
		/** [Method] Sets the value of margin  
		* @param margin any 
		*/
		setMargin?( margin?:any ): any;
		setMargin?( margin?:number ): void;
		setMargin?( margin?:string ): void;
		/** [Method] Sets the value of maxHeight  
		* @param maxHeight any 
		*/
		setMaxHeight?( maxHeight?:any ): any;
		setMaxHeight?( maxHeight?:number ): void;
		setMaxHeight?( maxHeight?:string ): void;
		/** [Method] Sets the value of maxWidth  
		* @param maxWidth any 
		*/
		setMaxWidth?( maxWidth?:any ): any;
		setMaxWidth?( maxWidth?:number ): void;
		setMaxWidth?( maxWidth?:string ): void;
		/** [Method] Sets the value of minHeight  
		* @param minHeight any 
		*/
		setMinHeight?( minHeight?:any ): any;
		setMinHeight?( minHeight?:number ): void;
		setMinHeight?( minHeight?:string ): void;
		/** [Method] Sets the value of minWidth  
		* @param minWidth any 
		*/
		setMinWidth?( minWidth?:any ): any;
		setMinWidth?( minWidth?:number ): void;
		setMinWidth?( minWidth?:string ): void;
		/** [Method] Sets the value of padding  
		* @param padding any 
		*/
		setPadding?( padding?:any ): any;
		setPadding?( padding?:number ): void;
		setPadding?( padding?:string ): void;
		/** [Method] Sets the value of plugins  
		* @param plugins any 
		*/
		setPlugins?( plugins?:any ): void;
		/** [Method] Sets the value of record  
		* @param record Ext.data.IModel 
		*/
		setRecord?( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of renderTo  
		* @param renderTo Ext.IElement 
		*/
		setRenderTo?( renderTo?:Ext.IElement ): void;
		/** [Method] Sets the value of right  
		* @param right any 
		*/
		setRight?( right?:any ): any;
		setRight?( right?:number ): void;
		setRight?( right?:string ): void;
		/** [Method] This method has moved to Ext Container  */
		setScrollable?(): void;
		/** [Method] Sets the value of showAnimation  
		* @param showAnimation any 
		*/
		setShowAnimation?( showAnimation?:any ): any;
		setShowAnimation?( showAnimation?:string ): void;
		/** [Method] Sets the size of the Component  
		* @param width number The new width for the Component. 
		* @param height number The new height for the Component. 
		*/
		setSize?( width?:number, height?:number ): void;
		/** [Method] Sets the value of style  
		* @param style any 
		*/
		setStyle?( style?:any ): void;
		/** [Method] Sets the value of styleHtmlCls  
		* @param styleHtmlCls string 
		*/
		setStyleHtmlCls?( styleHtmlCls?:string ): void;
		/** [Method] Sets the value of styleHtmlContent  
		* @param styleHtmlContent bool 
		*/
		setStyleHtmlContent?( styleHtmlContent?:bool ): void;
		/** [Method] Sets the value of top  
		* @param top any 
		*/
		setTop?( top?:any ): any;
		setTop?( top?:number ): void;
		setTop?( top?:string ): void;
		/** [Method] Sets the value of tpl  
		* @param tpl any 
		*/
		setTpl?( tpl?:any ): any;
		setTpl?( tpl?:string ): void;
		setTpl?( tpl?:string[] ): void;
		setTpl?( tpl?:Ext.ITemplate[] ): void;
		setTpl?( tpl?:Ext.IXTemplate[] ): void;
		/** [Method] Sets the value of tplWriteMode  
		* @param tplWriteMode string 
		*/
		setTplWriteMode?( tplWriteMode?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of width  
		* @param width any 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): void;
		setWidth?( width?:string ): void;
		/** [Method] Sets the value of zIndex  
		* @param zIndex number 
		*/
		setZIndex?( zIndex?:number ): void;
		/** [Method] Shows this component  
		* @param animation any 
		*/
		show?( animation?:any ): Ext.IComponent;
		/** [Method] Shows this component by another component  
		* @param component Ext.IComponent The target component to show this component by. 
		* @param alignment string The specific alignment. 
		*/
		showBy?( component?:Ext.IComponent, alignment?:string ): void;
		/** [Method] Walks up the ownerCt axis looking for an ancestor Container which matches the passed simple selector  
		* @param selector string The simple selector to test. 
		*/
		up?( selector?:string ): Ext.IContainer;
		/** [Method] Updates the HTML content of the Component  */
		update?(): void;
		/** [Method] Updates the styleHtmlCls configuration 
		* @param newHtmlCls any 
		* @param oldHtmlCls any 
		*/
		updateStyleHtmlCls?( newHtmlCls?:any, oldHtmlCls?:any ): void;
	}
}
declare module Ext {
	export interface IComponentManager extends Ext.IBase {
	}
	export class ComponentManager {
		/** [Method]  */
		constructor();
		/** [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in  
		* @param component any A configuration object for the Component you wish to create. 
		* @param defaultType any The constructor to provide the default Component type if the config object does not contain a xtype. (Optional if the config contains an xtype). 
		*/
		static create( component?:any, defaultType?:any ): Ext.IComponent;
		/** [Method] Returns an item by id  
		* @param id string The id of the item. 
		*/
		static get( id?:string ): any;
		/** [Method] Checks if an item type is registered  
		* @param component string The mnemonic string by which the class may be looked up. 
		*/
		static isRegistered( component?:string ): bool;
		/** [Method] Registers an item to be managed  
		* @param component any The item to register. 
		*/
		static register( component?:any ): void;
		/** [Method] Unregisters an item by removing it from this manager  
		* @param component any The item to unregister. 
		*/
		static unregister( component?:any ): void;
	}
}
declare module Ext {
	export interface IComponentMgr extends Ext.IBase {
	}
	export class ComponentMgr {
		/** [Method]  */
		constructor();
		/** [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in  
		* @param component any A configuration object for the Component you wish to create. 
		* @param defaultType any The constructor to provide the default Component type if the config object does not contain a xtype. (Optional if the config contains an xtype). 
		*/
		static create( component?:any, defaultType?:any ): Ext.IComponent;
		/** [Method] Returns an item by id  
		* @param id string The id of the item. 
		*/
		static get( id?:string ): any;
		/** [Method] Checks if an item type is registered  
		* @param component string The mnemonic string by which the class may be looked up. 
		*/
		static isRegistered( component?:string ): bool;
		/** [Method] Registers an item to be managed  
		* @param component any The item to register. 
		*/
		static register( component?:any ): void;
		/** [Method] Unregisters an item by removing it from this manager  
		* @param component any The item to unregister. 
		*/
		static unregister( component?:any ): void;
	}
}
declare module Ext {
	export interface IComponentQuery {
	}
	export class ComponentQuery {
		/** [Method] Tests whether the passed Component matches the selector string  
		* @param component Ext.IComponent The Component to test. 
		* @param selector string The selector string to test against. 
		*/
		static is( component?:Ext.IComponent, selector?:string ): bool;
		/** [Method] Returns an array of matched Components from within the passed root object  
		* @param selector string The selector string to filter returned Components 
		* @param root Ext.IContainer The Container within which to perform the query. If omitted, all Components within the document are included in the search. This parameter may also be an array of Components to filter according to the selector. 
		*/
		static query( selector?:string, root?:Ext.IContainer ): Ext.IComponent[];
	}
}
declare module Ext {
	export interface IContainer extends Ext.IComponent {
		/** [Config Option] (Object/String/Number) */
		activeItem?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: bool;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: bool;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Boolean/Object/Ext.Mask/Ext.LoadMask) */
		masked?: any;
		/** [Config Option] (Boolean) */
		modal?: bool;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Method] Adds one or more Components to this Container  
		* @param newItems any The new items to add to the Container. 
		*/
		add?( newItems?:any ): Ext.IComponent;
		/** [Method] Adds an array of Components to this Container  
		* @param items any[] The array of items to add to this container. 
		*/
		addAll?( items?:any[] ): any[];
		/** [Method] Animates to the supplied activeItem with a specified animation  
		* @param activeItem any The item or item index to make active. 
		* @param animation any Card animation configuration or instance. 
		*/
		animateActiveItem?( activeItem?:any, animation?:any ): void;
		/** [Method] Changes the masked configuration when its setter is called which will convert the value into a proper object instanc  
		* @param masked any 
		*/
		applyMasked?( masked?:any ): any;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector  
		* @param selector string An Ext.ComponentQuery selector. 
		*/
		child?( selector?:string ): Ext.IComponent;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector string An Ext.ComponentQuery selector. 
		*/
		down?( selector?:string ): Ext.IComponent;
		/** [Method] Returns the value of activeItem  */
		getActiveItem?(): any;
		/** [Method] Returns the Component for a given index in the Container s items  
		* @param index number The index of the Component to return. 
		*/
		getAt?( index?:number ): Ext.IComponent;
		/** [Method] Returns the value of autoDestroy  */
		getAutoDestroy?(): bool;
		/** [Method] Examines this container s items property and gets a direct child component of this container  
		* @param component any This parameter may be any of the following:  {String} : representing the itemId or id of the child component. {Number} : representing the position of the child component within the items property. For additional information see Ext.util.MixedCollection.get. 
		*/
		getComponent?( component?:any ): any;
		getComponent?( component?:string ): Ext.IComponent;
		getComponent?( component?:number ): Ext.IComponent;
		/** [Method] Returns the value of control  */
		getControl?(): any;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of defaults  */
		getDefaults?(): any;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems  
		* @param component any The id or index of the component to find. 
		*/
		getDockedComponent?( component?:any ): any;
		getDockedComponent?( component?:string ): Ext.IComponent;
		getDockedComponent?( component?:number ): Ext.IComponent;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems  
		* @param component String The id or index of the component to find. 
		*/
		getDockedComponent?( component?:string ): bool;
		getDockedComponent?( component?:number ): bool;
		/** [Method] Returns all the Ext Component docked items in this container  */
		getDockedItems?(): any[];
		/** [Method] Returns the value of hideOnMaskTap  */
		getHideOnMaskTap?(): bool;
		/** [Method] Returns all inner items of this container  */
		getInnerItems?(): any[];
		/** [Method] Returns the value of items  */
		getItems?(): any;
		/** [Method] Returns the value of masked  */
		getMasked?(): any;
		/** [Method] Returns the value of modal  */
		getModal?(): bool;
		/** [Method] Returns an the scrollable instance for this container which is a Ext scroll View class  */
		getScrollable?(): Ext.scroll.IView;
		/** [Method] Adds a child Component at the given index  
		* @param index number The index to insert the Component at. 
		* @param item any The Component to insert. 
		*/
		insert?( index?:number, item?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of true to show the mask 
		* @param mask any 
		*/
		mask?( mask?:any ): void;
		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector string Selector complying to an Ext.ComponentQuery selector. 
		*/
		query?( selector?:string ): any[];
		/** [Method] Removes an item from this Container optionally destroying it  
		* @param item any The item to remove. 
		* @param destroy bool Calls the Component's destroy method if true. 
		*/
		remove?( item?:any, destroy?:bool ): Ext.IComponent;
		/** [Method] Removes all items currently in the Container optionally destroying them all  
		* @param destroy bool If true, destroys each removed Component. 
		* @param everything bool If true, completely remove all items including docked / centered and floating items. 
		*/
		removeAll?( destroy?:bool, everything?:bool ): Ext.IComponent;
		/** [Method] Removes the Component at the specified index  myContainer removeAt 0 removes the first item 
		* @param index number The index of the Component to remove. 
		*/
		removeAt?( index?:number ): Ext.IContainer;
		/** [Method] Removes a docked item from this Container  
		* @param item any The item to remove. 
		* @param destroy bool Calls the Component's destroy method if true. 
		*/
		removeDocked?( item?:any, destroy?:bool ): Ext.IComponent;
		/** [Method] Removes an inner Component at the specified index  myContainer removeInnerAt 0 removes the first item of the in  
		* @param index number The index of the Component to remove. 
		*/
		removeInnerAt?( index?:number ): Ext.IContainer;
		/** [Method] Sets the value of activeItem  
		* @param activeItem any 
		*/
		setActiveItem?( activeItem?:any ): void;
		/** [Method] Sets the value of autoDestroy  
		* @param autoDestroy bool 
		*/
		setAutoDestroy?( autoDestroy?:bool ): void;
		/** [Method] Sets the value of control  
		* @param control any 
		*/
		setControl?( control?:any ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of defaults  
		* @param defaults any 
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of hideOnMaskTap  
		* @param hideOnMaskTap bool 
		*/
		setHideOnMaskTap?( hideOnMaskTap?:bool ): void;
		/** [Method] Sets the value of items  
		* @param items any 
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of masked  
		* @param masked any 
		*/
		setMasked?( masked?:any ): void;
		/** [Method] Sets the value of modal  
		* @param modal bool 
		*/
		setModal?( modal?:bool ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of false to hide the mask */
		unmask?(): void;
	}
}
declare module Ext.lib {
	export interface IContainer extends Ext.IComponent {
		/** [Config Option] (Object/String/Number) */
		activeItem?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: bool;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		hideOnMaskTap?: bool;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Boolean/Object/Ext.Mask/Ext.LoadMask) */
		masked?: any;
		/** [Config Option] (Boolean) */
		modal?: bool;
		/** [Config Option] (Boolean/String/Object) */
		scroll?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Method] Adds one or more Components to this Container  
		* @param newItems any The new items to add to the Container. 
		*/
		add?( newItems?:any ): Ext.IComponent;
		/** [Method] Adds an array of Components to this Container  
		* @param items any[] The array of items to add to this container. 
		*/
		addAll?( items?:any[] ): any[];
		/** [Method] Animates to the supplied activeItem with a specified animation  
		* @param activeItem any The item or item index to make active. 
		* @param animation any Card animation configuration or instance. 
		*/
		animateActiveItem?( activeItem?:any, animation?:any ): void;
		/** [Method] Changes the masked configuration when its setter is called which will convert the value into a proper object instanc  
		* @param masked any 
		*/
		applyMasked?( masked?:any ): any;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector  
		* @param selector string An Ext.ComponentQuery selector. 
		*/
		child?( selector?:string ): Ext.IComponent;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector string An Ext.ComponentQuery selector. 
		*/
		down?( selector?:string ): Ext.IComponent;
		/** [Method] Returns the value of activeItem  */
		getActiveItem?(): any;
		/** [Method] Returns the Component for a given index in the Container s items  
		* @param index number The index of the Component to return. 
		*/
		getAt?( index?:number ): Ext.IComponent;
		/** [Method] Returns the value of autoDestroy  */
		getAutoDestroy?(): bool;
		/** [Method] Examines this container s items property and gets a direct child component of this container  
		* @param component any This parameter may be any of the following:  {String} : representing the itemId or id of the child component. {Number} : representing the position of the child component within the items property. For additional information see Ext.util.MixedCollection.get. 
		*/
		getComponent?( component?:any ): any;
		getComponent?( component?:string ): Ext.IComponent;
		getComponent?( component?:number ): Ext.IComponent;
		/** [Method] Returns the value of control  */
		getControl?(): any;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of defaults  */
		getDefaults?(): any;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems  
		* @param component any The id or index of the component to find. 
		*/
		getDockedComponent?( component?:any ): any;
		getDockedComponent?( component?:string ): Ext.IComponent;
		getDockedComponent?( component?:number ): Ext.IComponent;
		/** [Method] Finds a docked item of this container using a reference idor an index of its location in getDockedItems  
		* @param component String The id or index of the component to find. 
		*/
		getDockedComponent?( component?:string ): bool;
		getDockedComponent?( component?:number ): bool;
		/** [Method] Returns all the Ext Component docked items in this container  */
		getDockedItems?(): any[];
		/** [Method] Returns the value of hideOnMaskTap  */
		getHideOnMaskTap?(): bool;
		/** [Method] Returns all inner items of this container  */
		getInnerItems?(): any[];
		/** [Method] Returns the value of items  */
		getItems?(): any;
		/** [Method] Returns the value of masked  */
		getMasked?(): any;
		/** [Method] Returns the value of modal  */
		getModal?(): bool;
		/** [Method] Returns an the scrollable instance for this container which is a Ext scroll View class  */
		getScrollable?(): Ext.scroll.IView;
		/** [Method] Adds a child Component at the given index  
		* @param index number The index to insert the Component at. 
		* @param item any The Component to insert. 
		*/
		insert?( index?:number, item?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of true to show the mask 
		* @param mask any 
		*/
		mask?( mask?:any ): void;
		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector string Selector complying to an Ext.ComponentQuery selector. 
		*/
		query?( selector?:string ): any[];
		/** [Method] Removes an item from this Container optionally destroying it  
		* @param item any The item to remove. 
		* @param destroy bool Calls the Component's destroy method if true. 
		*/
		remove?( item?:any, destroy?:bool ): Ext.IComponent;
		/** [Method] Removes all items currently in the Container optionally destroying them all  
		* @param destroy bool If true, destroys each removed Component. 
		* @param everything bool If true, completely remove all items including docked / centered and floating items. 
		*/
		removeAll?( destroy?:bool, everything?:bool ): Ext.IComponent;
		/** [Method] Removes the Component at the specified index  myContainer removeAt 0 removes the first item 
		* @param index number The index of the Component to remove. 
		*/
		removeAt?( index?:number ): Ext.IContainer;
		/** [Method] Removes a docked item from this Container  
		* @param item any The item to remove. 
		* @param destroy bool Calls the Component's destroy method if true. 
		*/
		removeDocked?( item?:any, destroy?:bool ): Ext.IComponent;
		/** [Method] Removes an inner Component at the specified index  myContainer removeInnerAt 0 removes the first item of the in  
		* @param index number The index of the Component to remove. 
		*/
		removeInnerAt?( index?:number ): Ext.IContainer;
		/** [Method] Sets the value of activeItem  
		* @param activeItem any 
		*/
		setActiveItem?( activeItem?:any ): void;
		/** [Method] Sets the value of autoDestroy  
		* @param autoDestroy bool 
		*/
		setAutoDestroy?( autoDestroy?:bool ): void;
		/** [Method] Sets the value of control  
		* @param control any 
		*/
		setControl?( control?:any ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of defaults  
		* @param defaults any 
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of hideOnMaskTap  
		* @param hideOnMaskTap bool 
		*/
		setHideOnMaskTap?( hideOnMaskTap?:bool ): void;
		/** [Method] Sets the value of items  
		* @param items any 
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of masked  
		* @param masked any 
		*/
		setMasked?( masked?:any ): void;
		/** [Method] Sets the value of modal  
		* @param modal bool 
		*/
		setModal?( modal?:bool ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Convenience method which calls setMasked with a value of false to hide the mask */
		unmask?(): void;
	}
}
declare module Ext.data {
	export interface IArrayStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy  */
		getProxy?(): any;
		/** [Method] Loads an array of data straight into the Store  
		* @param data any 
		* @param append any 
		*/
		loadData?( data?:any, append?:any ): void;
		/** [Method] Sets the value of proxy  
		* @param proxy any 
		*/
		setProxy?( proxy?:any ): void;
	}
}
declare module Ext.data.association {
	export interface IAssociation extends Ext.IBase {
		/** [Config Option] (String) */
		associatedModel?: string;
		/** [Config Option] (String) */
		associatedName?: string;
		/** [Config Option] (String) */
		associationKey?: string;
		/** [Config Option] (Ext.data.Model/String) */
		ownerModel?: any;
		/** [Config Option] (String) */
		primaryKey?: string;
		/** [Config Option] (Ext.data.reader.Reader) */
		reader?: Ext.data.reader.IReader;
		/** [Config Option] (String) */
		type?: string;
		/** [Method] Returns the value of associatedModel  */
		getAssociatedModel?(): string;
		/** [Method] Returns the value of associatedName  */
		getAssociatedName?(): string;
		/** [Method] Returns the value of associationKey  */
		getAssociationKey?(): string;
		/** [Method] Returns the value of name  */
		getName?(): any;
		/** [Method] Returns the value of ownerModel  */
		getOwnerModel?(): Ext.data.IModel;
		/** [Method] Returns the value of ownerModel  */
		getOwnerModel?(): string;
		/** [Method] Returns the value of ownerName  */
		getOwnerName?(): string;
		/** [Method] Returns the value of primaryKey  */
		getPrimaryKey?(): string;
		/** [Method] Returns the value of reader  */
		getReader?(): Ext.data.reader.IReader;
		/** [Method] Returns the value of type  */
		getType?(): string;
		/** [Method] Sets the value of associatedModel  
		* @param associatedModel string 
		*/
		setAssociatedModel?( associatedModel?:string ): void;
		/** [Method] Sets the value of associatedName  
		* @param associatedName string 
		*/
		setAssociatedName?( associatedName?:string ): void;
		/** [Method] Sets the value of associationKey  
		* @param associationKey string 
		*/
		setAssociationKey?( associationKey?:string ): void;
		/** [Method] Sets the value of name  
		* @param name any 
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of ownerModel  
		* @param ownerModel any 
		*/
		setOwnerModel?( ownerModel?:any ): any;
		setOwnerModel?( ownerModel?:Ext.data.IModel ): void;
		setOwnerModel?( ownerModel?:string ): void;
		/** [Method] Sets the value of ownerName  
		* @param ownerName string 
		*/
		setOwnerName?( ownerName?:string ): void;
		/** [Method] Sets the value of primaryKey  
		* @param primaryKey string 
		*/
		setPrimaryKey?( primaryKey?:string ): void;
		/** [Method] Sets the value of reader  
		* @param reader Ext.data.reader.IReader 
		*/
		setReader?( reader?:Ext.data.reader.IReader ): void;
		/** [Method] Sets the value of type  
		* @param type string 
		*/
		setType?( type?:string ): void;
	}
}
declare module Ext.data {
	export interface IAssociation extends Ext.IBase {
		/** [Config Option] (String) */
		associatedModel?: string;
		/** [Config Option] (String) */
		associatedName?: string;
		/** [Config Option] (String) */
		associationKey?: string;
		/** [Config Option] (Ext.data.Model/String) */
		ownerModel?: any;
		/** [Config Option] (String) */
		primaryKey?: string;
		/** [Config Option] (Ext.data.reader.Reader) */
		reader?: Ext.data.reader.IReader;
		/** [Config Option] (String) */
		type?: string;
		/** [Method] Returns the value of associatedModel  */
		getAssociatedModel?(): string;
		/** [Method] Returns the value of associatedName  */
		getAssociatedName?(): string;
		/** [Method] Returns the value of associationKey  */
		getAssociationKey?(): string;
		/** [Method] Returns the value of name  */
		getName?(): any;
		/** [Method] Returns the value of ownerModel  */
		getOwnerModel?(): Ext.data.IModel;
		/** [Method] Returns the value of ownerModel  */
		getOwnerModel?(): string;
		/** [Method] Returns the value of ownerName  */
		getOwnerName?(): string;
		/** [Method] Returns the value of primaryKey  */
		getPrimaryKey?(): string;
		/** [Method] Returns the value of reader  */
		getReader?(): Ext.data.reader.IReader;
		/** [Method] Returns the value of type  */
		getType?(): string;
		/** [Method] Sets the value of associatedModel  
		* @param associatedModel string 
		*/
		setAssociatedModel?( associatedModel?:string ): void;
		/** [Method] Sets the value of associatedName  
		* @param associatedName string 
		*/
		setAssociatedName?( associatedName?:string ): void;
		/** [Method] Sets the value of associationKey  
		* @param associationKey string 
		*/
		setAssociationKey?( associationKey?:string ): void;
		/** [Method] Sets the value of name  
		* @param name any 
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of ownerModel  
		* @param ownerModel any 
		*/
		setOwnerModel?( ownerModel?:any ): any;
		setOwnerModel?( ownerModel?:Ext.data.IModel ): void;
		setOwnerModel?( ownerModel?:string ): void;
		/** [Method] Sets the value of ownerName  
		* @param ownerName string 
		*/
		setOwnerName?( ownerName?:string ): void;
		/** [Method] Sets the value of primaryKey  
		* @param primaryKey string 
		*/
		setPrimaryKey?( primaryKey?:string ): void;
		/** [Method] Sets the value of reader  
		* @param reader Ext.data.reader.IReader 
		*/
		setReader?( reader?:Ext.data.reader.IReader ): void;
		/** [Method] Sets the value of type  
		* @param type string 
		*/
		setType?( type?:string ): void;
	}
}
declare module Ext.data.association {
	export interface IBelongsTo extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey  */
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName  */
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName  */
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName  */
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey  
		* @param foreignKey string 
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName  
		* @param getterName string 
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName  
		* @param instanceName any 
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName  
		* @param setterName string 
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare module Ext.data {
	export interface IBelongsToAssociation extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey  */
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName  */
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName  */
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName  */
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey  
		* @param foreignKey string 
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName  
		* @param getterName string 
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName  
		* @param instanceName any 
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName  
		* @param setterName string 
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare module Ext.data.association {
	export interface IHasMany extends Ext.data.association.IAssociation {
		/** [Config Option] (Boolean) */
		autoLoad?: bool;
		/** [Config Option] (Boolean) */
		autoSync?: bool;
		/** [Config Option] (String) */
		filterProperty?: string;
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		storeConfig?: any;
		/** [Config Option] (String) */
		storeName?: string;
		/** [Method] Returns the value of autoLoad  */
		getAutoLoad?(): bool;
		/** [Method] Returns the value of autoSync  */
		getAutoSync?(): bool;
		/** [Method] Returns the value of filterProperty  */
		getFilterProperty?(): string;
		/** [Method] Returns the value of foreignKey  */
		getForeignKey?(): string;
		/** [Method] Returns the value of store  */
		getStore?(): any;
		/** [Method] Returns the value of storeName  */
		getStoreName?(): string;
		/** [Method] Sets the value of autoLoad  
		* @param autoLoad bool 
		*/
		setAutoLoad?( autoLoad?:bool ): void;
		/** [Method] Sets the value of autoSync  
		* @param autoSync bool 
		*/
		setAutoSync?( autoSync?:bool ): void;
		/** [Method] Sets the value of filterProperty  
		* @param filterProperty string 
		*/
		setFilterProperty?( filterProperty?:string ): void;
		/** [Method] Sets the value of foreignKey  
		* @param foreignKey string 
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of storeName  
		* @param storeName string 
		*/
		setStoreName?( storeName?:string ): void;
	}
}
declare module Ext.data {
	export interface IHasManyAssociation extends Ext.data.association.IAssociation {
		/** [Config Option] (Boolean) */
		autoLoad?: bool;
		/** [Config Option] (Boolean) */
		autoSync?: bool;
		/** [Config Option] (String) */
		filterProperty?: string;
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		storeConfig?: any;
		/** [Config Option] (String) */
		storeName?: string;
		/** [Method] Returns the value of autoLoad  */
		getAutoLoad?(): bool;
		/** [Method] Returns the value of autoSync  */
		getAutoSync?(): bool;
		/** [Method] Returns the value of filterProperty  */
		getFilterProperty?(): string;
		/** [Method] Returns the value of foreignKey  */
		getForeignKey?(): string;
		/** [Method] Returns the value of store  */
		getStore?(): any;
		/** [Method] Returns the value of storeName  */
		getStoreName?(): string;
		/** [Method] Sets the value of autoLoad  
		* @param autoLoad bool 
		*/
		setAutoLoad?( autoLoad?:bool ): void;
		/** [Method] Sets the value of autoSync  
		* @param autoSync bool 
		*/
		setAutoSync?( autoSync?:bool ): void;
		/** [Method] Sets the value of filterProperty  
		* @param filterProperty string 
		*/
		setFilterProperty?( filterProperty?:string ): void;
		/** [Method] Sets the value of foreignKey  
		* @param foreignKey string 
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of storeName  
		* @param storeName string 
		*/
		setStoreName?( storeName?:string ): void;
	}
}
declare module Ext.data.association {
	export interface IHasOne extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey  */
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName  */
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName  */
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName  */
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey  
		* @param foreignKey string 
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName  
		* @param getterName string 
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName  
		* @param instanceName any 
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName  
		* @param setterName string 
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare module Ext.data {
	export interface IHasOneAssociation extends Ext.data.association.IAssociation {
		/** [Config Option] (String) */
		foreignKey?: string;
		/** [Config Option] (String) */
		getterName?: string;
		/** [Config Option] (String) */
		setterName?: string;
		/** [Method] Returns the value of foreignKey  */
		getForeignKey?(): string;
		/** [Method] Returns the value of getterName  */
		getGetterName?(): string;
		/** [Method] Returns the value of instanceName  */
		getInstanceName?(): any;
		/** [Method] Returns the value of setterName  */
		getSetterName?(): string;
		/** [Method] Sets the value of foreignKey  
		* @param foreignKey string 
		*/
		setForeignKey?( foreignKey?:string ): void;
		/** [Method] Sets the value of getterName  
		* @param getterName string 
		*/
		setGetterName?( getterName?:string ): void;
		/** [Method] Sets the value of instanceName  
		* @param instanceName any 
		*/
		setInstanceName?( instanceName?:any ): void;
		/** [Method] Sets the value of setterName  
		* @param setterName string 
		*/
		setSetterName?( setterName?:string ): void;
	}
}
declare module Ext.data {
	export interface IBatch extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		autoStart?: bool;
		/** [Config Option] (Boolean) */
		pauseOnException?: bool;
		/** [Config Option] (Ext.data.Proxy) */
		proxy?: Ext.data.IProxy;
		/** [Property] (Number) */
		current?: number;
		/** [Property] (Boolean) */
		hasException?: bool;
		/** [Property] (Boolean) */
		isComplete?: bool;
		/** [Property] (Boolean) */
		isRunning?: bool;
		/** [Property] (Ext.data.Operation[]) */
		operations?: Ext.data.IOperation[];
		/** [Property] (Number) */
		total?: number;
		/** [Method] Adds a new operation to this batch  
		* @param operation any The Operation object. 
		*/
		add?( operation?:any ): void;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of autoStart  */
		getAutoStart?(): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of pauseOnException  */
		getPauseOnException?(): bool;
		/** [Method] Returns the value of proxy  */
		getProxy?(): Ext.data.IProxy;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Pauses execution of the batch but does not cancel the current operation  */
		pause?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Executes a operation by its numeric index  
		* @param index number The operation index to run. 
		*/
		runOperation?( index?:number ): void;
		/** [Method] Sets the value of autoStart  
		* @param autoStart bool 
		*/
		setAutoStart?( autoStart?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of pauseOnException  
		* @param pauseOnException bool 
		*/
		setPauseOnException?( pauseOnException?:bool ): void;
		/** [Method] Sets the value of proxy  
		* @param proxy Ext.data.IProxy 
		*/
		setProxy?( proxy?:Ext.data.IProxy ): void;
		/** [Method] Kicks off the execution of the batch continuing from the next operation if the previous operation encountered an exc  */
		start?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.data {
	export interface IConnection extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		defaultHeaders?: any;
		/** [Config Option] (String) */
		defaultXhrHeader?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: bool;
		/** [Config Option] (String) */
		disableCachingParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: bool;
		/** [Method] Aborts any outstanding request  
		* @param request any Defaults to the last request. 
		*/
		abort?( request?:any ): void;
		/** [Method] Aborts all outstanding requests  */
		abortAll?(): void;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of async  */
		getAsync?(): bool;
		/** [Method] Returns the value of autoAbort  */
		getAutoAbort?(): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of defaultHeaders  */
		getDefaultHeaders?(): any;
		/** [Method] Returns the value of defaultPostHeader  */
		getDefaultPostHeader?(): string;
		/** [Method] Returns the value of defaultXhrHeader  */
		getDefaultXhrHeader?(): string;
		/** [Method] Returns the value of disableCaching  */
		getDisableCaching?(): bool;
		/** [Method] Returns the value of disableCachingParam  */
		getDisableCachingParam?(): string;
		/** [Method] Returns the value of extraParams  */
		getExtraParams?(): any;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of method  */
		getMethod?(): string;
		/** [Method] Returns the value of password  */
		getPassword?(): string;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns the value of useDefaultHeader  */
		getUseDefaultHeader?(): bool;
		/** [Method] Returns the value of useDefaultXhrHeader  */
		getUseDefaultXhrHeader?(): bool;
		/** [Method] Returns the value of username  */
		getUsername?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Determines whether this object has a request outstanding  
		* @param request any The request to check. 
		*/
		isLoading?( request?:any ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Checks if the response status was successful  
		* @param status number The status code. 
		* @param xhr any 
		*/
		parseStatus?( status?:number, xhr?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Sends an HTTP request to a remote server  
		* @param options any An object which may contain the following properties: (The options object may also contain any other property which might be needed to perform post-processing in a callback because it is passed to callback functions.) 
		*/
		request?( options?:any ): any;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of async  
		* @param async bool 
		*/
		setAsync?( async?:bool ): void;
		/** [Method] Sets the value of autoAbort  
		* @param autoAbort bool 
		*/
		setAutoAbort?( autoAbort?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of defaultHeaders  
		* @param defaultHeaders any 
		*/
		setDefaultHeaders?( defaultHeaders?:any ): void;
		/** [Method] Sets the value of defaultPostHeader  
		* @param defaultPostHeader string 
		*/
		setDefaultPostHeader?( defaultPostHeader?:string ): void;
		/** [Method] Sets the value of defaultXhrHeader  
		* @param defaultXhrHeader string 
		*/
		setDefaultXhrHeader?( defaultXhrHeader?:string ): void;
		/** [Method] Sets the value of disableCaching  
		* @param disableCaching bool 
		*/
		setDisableCaching?( disableCaching?:bool ): void;
		/** [Method] Sets the value of disableCachingParam  
		* @param disableCachingParam string 
		*/
		setDisableCachingParam?( disableCachingParam?:string ): void;
		/** [Method] Sets the value of extraParams  
		* @param extraParams any 
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of method  
		* @param method string 
		*/
		setMethod?( method?:string ): void;
		/** [Method] Sets various options such as the url params for the request  
		* @param options any The initial options. 
		* @param scope any The scope to execute in. 
		*/
		setOptions?( options?:any, scope?:any ): any;
		/** [Method] Sets the value of password  
		* @param password string 
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the value of useDefaultHeader  
		* @param useDefaultHeader bool 
		*/
		setUseDefaultHeader?( useDefaultHeader?:bool ): void;
		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader bool 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:bool ): void;
		/** [Method] Sets the value of username  
		* @param username string 
		*/
		setUsername?( username?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Uploads a form using a hidden iframe  
		* @param form any The form to upload. 
		* @param url any The url to post to. 
		* @param params any Any extra parameters to pass. 
		* @param options any The initial options. 
		*/
		upload?( form?:any, url?:any, params?:any, options?:any ): any;
		upload?( form?:string, url?:string, params?:string, options?:any ): void;
		upload?( form?:HTMLElement, url?:string, params?:string, options?:any ): void;
		upload?( form?:Ext.IElement, url?:string, params?:string, options?:any ): void;
	}
}
declare module Ext.data {
	export interface IDirectStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy  */
		getProxy?(): any;
		/** [Method] Sets the value of proxy  
		* @param proxy any 
		*/
		setProxy?( proxy?:any ): void;
	}
}
declare module Ext.data {
	export interface IError extends Ext.IBase {
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (String) */
		message?: string;
		/** [Method] Returns the value of field  */
		getField?(): string;
		/** [Method] Returns the value of message  */
		getMessage?(): string;
		/** [Method] Sets the value of field  
		* @param field string 
		*/
		setField?( field?:string ): void;
		/** [Method] Sets the value of message  
		* @param message string 
		*/
		setMessage?( message?:string ): void;
	}
}
declare module Ext.data {
	export interface IErrors extends Ext.util.ICollection {
		/** [Method] Adds an item to the collection  */
		add?(): any;
		/** [Method] Returns all of the errors for the given field  
		* @param fieldName string The field to get errors for. 
		*/
		getByField?( fieldName?:string ): any[];
		/** [Method] Returns true if there are no errors in the collection  */
		isValid?(): bool;
	}
}
declare module Ext.data {
	export interface IField extends Ext.IBase {
		/** [Config Option] (Boolean) */
		allowNull?: bool;
		/** [Config Option] (Function) */
		convert?: any;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Object) */
		defaultValue?: any;
		/** [Config Option] (String/Number) */
		mapping?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		persist?: bool;
		/** [Config Option] (String) */
		sortDir?: string;
		/** [Config Option] (Function) */
		sortType?: any;
		/** [Config Option] (String/Object) */
		type?: any;
		/** [Config Option] (Boolean) */
		useNull?: bool;
		/** [Method] Returns the value of allowNull  */
		getAllowNull?(): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of convert  */
		getConvert?(): any;
		/** [Method] Returns the value of dateFormat  */
		getDateFormat?(): string;
		/** [Method] Returns the value of decode  */
		getDecode?(): any;
		/** [Method] Returns the value of defaultValue  */
		getDefaultValue?(): any;
		/** [Method] Returns the value of encode  */
		getEncode?(): any;
		/** [Method] Returns the value of mapping  */
		getMapping?(): string;
		/** [Method] Returns the value of mapping  */
		getMapping?(): number;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of persist  */
		getPersist?(): bool;
		/** [Method] Returns the value of sortDir  */
		getSortDir?(): string;
		/** [Method] Returns the value of sortType  */
		getSortType?(): any;
		/** [Method] Returns the value of type  */
		getType?(): any;
		/** [Method] Sets the value of allowNull  
		* @param allowNull bool 
		*/
		setAllowNull?( allowNull?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents string 
		*/
		setBubbleEvents?( bubbleEvents?:string ): void;
		/** [Method] Sets the value of convert  
		* @param convert any 
		*/
		setConvert?( convert?:any ): void;
		/** [Method] Sets the value of dateFormat  
		* @param dateFormat string 
		*/
		setDateFormat?( dateFormat?:string ): void;
		/** [Method] Sets the value of decode  
		* @param decode any 
		*/
		setDecode?( decode?:any ): void;
		/** [Method] Sets the value of defaultValue  
		* @param defaultValue any 
		*/
		setDefaultValue?( defaultValue?:any ): void;
		/** [Method] Sets the value of encode  
		* @param encode any 
		*/
		setEncode?( encode?:any ): void;
		/** [Method] Sets the value of mapping  
		* @param mapping any 
		*/
		setMapping?( mapping?:any ): any;
		setMapping?( mapping?:string ): void;
		setMapping?( mapping?:number ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of persist  
		* @param persist bool 
		*/
		setPersist?( persist?:bool ): void;
		/** [Method] Sets the value of sortDir  
		* @param sortDir string 
		*/
		setSortDir?( sortDir?:string ): void;
		/** [Method] Sets the value of sortType  
		* @param sortType any 
		*/
		setSortType?( sortType?:any ): void;
		/** [Method] Sets the value of type  
		* @param type any 
		*/
		setType?( type?:any ): void;
	}
}
declare module Ext.data.identifier {
	export interface ISequential extends Ext.data.identifier.ISimple {
		/** [Config Option] (String) */
		prefix?: string;
		/** [Config Option] (Number) */
		seed?: number;
		/** [Method] Returns the value of prefix  */
		getPrefix?(): string;
		/** [Method] Returns the value of seed  */
		getSeed?(): number;
		/** [Method] Sets the value of prefix  
		* @param prefix string 
		*/
		setPrefix?( prefix?:string ): void;
		/** [Method] Sets the value of seed  
		* @param seed number 
		*/
		setSeed?( seed?:number ): void;
	}
}
declare module Ext.data.identifier {
	export interface ISimple extends Ext.IBase {
		/** [Method] Returns the value of prefix  */
		getPrefix?(): string;
		/** [Method] Sets the value of prefix  
		* @param prefix string 
		*/
		setPrefix?( prefix?:string ): void;
	}
}
declare module Ext.data.identifier {
	export interface IUuid extends Ext.data.identifier.ISimple {
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Number) */
		version?: number;
		/** [Property] (Number/Object) */
		salt?: any;
		/** [Property] (Number/Object) */
		timestamp?: any;
		/** [Method] Returns the value of id  */
		getId?(): any;
		/** [Method] Returns the value of version  */
		getVersion?(): number;
		/** [Method] Reconfigures this generator given new config properties  
		* @param config any 
		*/
		reconfigure?( config?:any ): void;
		/** [Method] Sets the value of id  
		* @param id any 
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of version  
		* @param version number 
		*/
		setVersion?( version?:number ): void;
	}
}
declare module Ext.data {
	export interface IJsonP extends Ext.IBase {
	}
	export class JsonP {
		/** [Method] Abort a request  
		* @param request any The request to abort. 
		*/
		static abort( request?:any ): void;
		/** [Method] Makes a JSONP request  
		* @param options any An object which may contain the following properties. Note that options will take priority over any defaults that are specified in the class. 
		*/
		static request( options?:any ): any;
	}
}
declare module Ext.util {
	export interface IJSONP extends Ext.IBase {
	}
	export class JSONP {
		/** [Method] Abort a request  
		* @param request any The request to abort. 
		*/
		static abort( request?:any ): void;
		/** [Method] Makes a JSONP request  
		* @param options any An object which may contain the following properties. Note that options will take priority over any defaults that are specified in the class. 
		*/
		static request( options?:any ): any;
	}
}
declare module Ext.data {
	export interface IJsonStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy  */
		getProxy?(): any;
		/** [Method] Sets the value of proxy  
		* @param proxy any 
		*/
		setProxy?( proxy?:any ): void;
	}
}
declare module Ext.data {
	export interface IModel extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasOne?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Object/String) */
		identifier?: any;
		/** [Config Option] (Object/Ext.data.Proxy) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		useCache?: bool;
		/** [Config Option] (Object[]) */
		validations?: any[];
		/** [Property] (Boolean) */
		dirty?: bool;
		/** [Property] (Boolean) */
		editing?: bool;
		/** [Property] (Object) */
		modified?: any;
		/** [Property] (Boolean) */
		phantom?: bool;
		/** [Property] (Object) */
		raw?: any;
		/** [Property] (Array) */
		stores?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Begins an edit  */
		beginEdit?(): void;
		/** [Method] Cancels all changes made in the current edit operation  */
		cancelEdit?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Usually called by the Ext data Store which owns the model instance  
		* @param silent bool true to skip notification of the owning store of the change. 
		*/
		commit?( silent?:bool ): void;
		/** [Method] Creates a copy clone of this Model instance  
		* @param id string A new id. If you don't specify this a new id will be generated for you. To generate a phantom instance with a new id use: var rec = record.copy(); // clone the record with a new id 
		*/
		copy?( id?:string ): Ext.data.IModel;
		/** [Method] Destroys this model instance  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Ends an edit  
		* @param silent bool true to not notify the store of the change. 
		* @param modifiedFieldNames string[] Array of field names changed during edit. 
		*/
		endEdit?( silent?:bool, modifiedFieldNames?:string[] ): void;
		/** [Method] Destroys the record using the configured proxy  
		* @param options any Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments. 
		* @param scope any The scope to run your callback method in. This is only used if you passed a function as the first argument. 
		*/
		erase?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of the given field  
		* @param fieldName string The field to fetch the value for. 
		*/
		get?( fieldName?:string ): any;
		/** [Method] Gets all of the data from this Models loaded associations  */
		getAssociatedData?(): any;
		/** [Method] Returns the value of associations  */
		getAssociations?(): any[];
		/** [Method] Returns the value of belongsTo  */
		getBelongsTo?(): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Gets a hash of only the fields that have been modified since this Model was created or committed  */
		getChanges?(): any;
		/** [Method] Returns the value of clientIdProperty  */
		getClientIdProperty?(): string;
		/** [Method] Returns an object containing the data set on this record  
		* @param includeAssociated bool true to include the associated data. 
		*/
		getData?( includeAssociated?:bool ): any;
		/** [Method] Returns the value of fields  */
		getFields?(): any;
		/** [Method] Returns the value of hasMany  */
		getHasMany?(): any;
		/** [Method] Returns the value of hasOne  */
		getHasOne?(): any;
		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty  */
		getId?(): number;
		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty  */
		getId?(): string;
		/** [Method] Returns the value of idProperty  */
		getIdProperty?(): string;
		/** [Method] Returns the value of identifier  */
		getIdentifier?(): any;
		/** [Method] Returns true if the record has been erased on the server  */
		getIsErased?(): void;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of proxy  */
		getProxy?(): any;
		/** [Method] Returns the value of useCache  */
		getUseCache?(): bool;
		/** [Method] Returns the value of validations  */
		getValidations?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Returns true if the passed field name has been modified since the load or last commit  
		* @param fieldName string Ext.data.Field.name 
		*/
		isModified?( fieldName?:string ): bool;
		/** [Method] Checks if the model is valid  */
		isValid?(): bool;
		/** [Method] By joining this model to an instance of a class this model will automatically try to call certain template methods o  
		* @param store Ext.data.IStore The store to which this model has been added. 
		*/
		join?( store?:Ext.data.IStore ): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Usually called by the Ext data Store to which this model instance has been joined  
		* @param silent bool true to skip notification of the owning store of the change. 
		*/
		reject?( silent?:bool ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Saves the model instance using the configured proxy  
		* @param options any Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments. 
		* @param scope any The scope to run your callback method in. This is only used if you passed a function as the first argument. 
		*/
		save?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Sets the given field to the given value marks the instance as dirty  
		* @param fieldName any The field to set, or an object containing key/value pairs. 
		* @param value any The value to set. 
		*/
		set?( fieldName?:any, value?:any ): void;
		/** [Method] Sets the value of associations  
		* @param associations any[] 
		*/
		setAssociations?( associations?:any[] ): void;
		/** [Method] Sets the value of belongsTo  
		* @param belongsTo any 
		*/
		setBelongsTo?( belongsTo?:any ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty string 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] This sets the data directly without converting and applying default values  
		* @param data any 
		*/
		setConvertedData?( data?:any ): Ext.data.IModel;
		/** [Method] This method is used to set the data for this Record instance  
		* @param rawData any 
		*/
		setData?( rawData?:any ): Ext.data.IModel;
		/** [Method] Marks this Record as dirty  */
		setDirty?(): void;
		/** [Method] Updates the collection of Fields that all instances of this Model use  */
		setFields?(): any[];
		/** [Method] Sets the value of hasMany  
		* @param hasMany any 
		*/
		setHasMany?( hasMany?:any ): void;
		/** [Method] Sets the value of hasOne  
		* @param hasOne any 
		*/
		setHasOne?( hasOne?:any ): void;
		/** [Method] Sets the model instance s id field to the given id  
		* @param id any The new id 
		*/
		setId?( id?:any ): any;
		setId?( id?:number ): void;
		setId?( id?:string ): void;
		/** [Method] Sets the value of idProperty  
		* @param idProperty string 
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of identifier  
		* @param identifier any 
		*/
		setIdentifier?( identifier?:any ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of proxy  
		* @param proxy any 
		*/
		setProxy?( proxy?:any ): void;
		/** [Method] Sets the value of useCache  
		* @param useCache bool 
		*/
		setUseCache?( useCache?:bool ): void;
		/** [Method] Sets the value of validations  
		* @param validations any[] 
		*/
		setValidations?( validations?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Returns a url suitable string for this model instance  */
		toUrl?(): string;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] This un joins this record from an instance of a class  
		* @param store Ext.data.IStore The store from which this model has been removed. 
		*/
		unjoin?( store?:Ext.data.IStore ): void;
		/** [Method] Validates the current data against all of its configured validations  */
		validate?(): Ext.data.IErrors;
		/** [Method] Asynchronously loads a model instance by id  
		* @param id number The id of the model to load 
		* @param config any Config object containing fields: 
		* @param scope any Same as config.scope. 
		*/
		load?( id?:number, config?:any, scope?:any ): void;
	}
}
declare module Ext.data {
	export interface IRecord extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasOne?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Object/String) */
		identifier?: any;
		/** [Config Option] (Object/Ext.data.Proxy) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		useCache?: bool;
		/** [Config Option] (Object[]) */
		validations?: any[];
		/** [Property] (Boolean) */
		dirty?: bool;
		/** [Property] (Boolean) */
		editing?: bool;
		/** [Property] (Object) */
		modified?: any;
		/** [Property] (Boolean) */
		phantom?: bool;
		/** [Property] (Object) */
		raw?: any;
		/** [Property] (Array) */
		stores?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Begins an edit  */
		beginEdit?(): void;
		/** [Method] Cancels all changes made in the current edit operation  */
		cancelEdit?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Usually called by the Ext data Store which owns the model instance  
		* @param silent bool true to skip notification of the owning store of the change. 
		*/
		commit?( silent?:bool ): void;
		/** [Method] Creates a copy clone of this Model instance  
		* @param id string A new id. If you don't specify this a new id will be generated for you. To generate a phantom instance with a new id use: var rec = record.copy(); // clone the record with a new id 
		*/
		copy?( id?:string ): Ext.data.IModel;
		/** [Method] Destroys this model instance  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Ends an edit  
		* @param silent bool true to not notify the store of the change. 
		* @param modifiedFieldNames string[] Array of field names changed during edit. 
		*/
		endEdit?( silent?:bool, modifiedFieldNames?:string[] ): void;
		/** [Method] Destroys the record using the configured proxy  
		* @param options any Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments. 
		* @param scope any The scope to run your callback method in. This is only used if you passed a function as the first argument. 
		*/
		erase?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of the given field  
		* @param fieldName string The field to fetch the value for. 
		*/
		get?( fieldName?:string ): any;
		/** [Method] Gets all of the data from this Models loaded associations  */
		getAssociatedData?(): any;
		/** [Method] Returns the value of associations  */
		getAssociations?(): any[];
		/** [Method] Returns the value of belongsTo  */
		getBelongsTo?(): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Gets a hash of only the fields that have been modified since this Model was created or committed  */
		getChanges?(): any;
		/** [Method] Returns the value of clientIdProperty  */
		getClientIdProperty?(): string;
		/** [Method] Returns an object containing the data set on this record  
		* @param includeAssociated bool true to include the associated data. 
		*/
		getData?( includeAssociated?:bool ): any;
		/** [Method] Returns the value of fields  */
		getFields?(): any;
		/** [Method] Returns the value of hasMany  */
		getHasMany?(): any;
		/** [Method] Returns the value of hasOne  */
		getHasOne?(): any;
		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty  */
		getId?(): number;
		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty  */
		getId?(): string;
		/** [Method] Returns the value of idProperty  */
		getIdProperty?(): string;
		/** [Method] Returns the value of identifier  */
		getIdentifier?(): any;
		/** [Method] Returns true if the record has been erased on the server  */
		getIsErased?(): void;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of proxy  */
		getProxy?(): any;
		/** [Method] Returns the value of useCache  */
		getUseCache?(): bool;
		/** [Method] Returns the value of validations  */
		getValidations?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Returns true if the passed field name has been modified since the load or last commit  
		* @param fieldName string Ext.data.Field.name 
		*/
		isModified?( fieldName?:string ): bool;
		/** [Method] Checks if the model is valid  */
		isValid?(): bool;
		/** [Method] By joining this model to an instance of a class this model will automatically try to call certain template methods o  
		* @param store Ext.data.IStore The store to which this model has been added. 
		*/
		join?( store?:Ext.data.IStore ): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Usually called by the Ext data Store to which this model instance has been joined  
		* @param silent bool true to skip notification of the owning store of the change. 
		*/
		reject?( silent?:bool ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Saves the model instance using the configured proxy  
		* @param options any Options to pass to the proxy. Config object for Ext.data.Operation. If you pass a function, this will automatically become the callback method. For convenience the config object may also contain success and failure methods in addition to callback - they will all be invoked with the Model and Operation as arguments. 
		* @param scope any The scope to run your callback method in. This is only used if you passed a function as the first argument. 
		*/
		save?( options?:any, scope?:any ): Ext.data.IModel;
		/** [Method] Sets the given field to the given value marks the instance as dirty  
		* @param fieldName any The field to set, or an object containing key/value pairs. 
		* @param value any The value to set. 
		*/
		set?( fieldName?:any, value?:any ): void;
		/** [Method] Sets the value of associations  
		* @param associations any[] 
		*/
		setAssociations?( associations?:any[] ): void;
		/** [Method] Sets the value of belongsTo  
		* @param belongsTo any 
		*/
		setBelongsTo?( belongsTo?:any ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty string 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] This sets the data directly without converting and applying default values  
		* @param data any 
		*/
		setConvertedData?( data?:any ): Ext.data.IModel;
		/** [Method] This method is used to set the data for this Record instance  
		* @param rawData any 
		*/
		setData?( rawData?:any ): Ext.data.IModel;
		/** [Method] Marks this Record as dirty  */
		setDirty?(): void;
		/** [Method] Updates the collection of Fields that all instances of this Model use  */
		setFields?(): any[];
		/** [Method] Sets the value of hasMany  
		* @param hasMany any 
		*/
		setHasMany?( hasMany?:any ): void;
		/** [Method] Sets the value of hasOne  
		* @param hasOne any 
		*/
		setHasOne?( hasOne?:any ): void;
		/** [Method] Sets the model instance s id field to the given id  
		* @param id any The new id 
		*/
		setId?( id?:any ): any;
		setId?( id?:number ): void;
		setId?( id?:string ): void;
		/** [Method] Sets the value of idProperty  
		* @param idProperty string 
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of identifier  
		* @param identifier any 
		*/
		setIdentifier?( identifier?:any ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of proxy  
		* @param proxy any 
		*/
		setProxy?( proxy?:any ): void;
		/** [Method] Sets the value of useCache  
		* @param useCache bool 
		*/
		setUseCache?( useCache?:bool ): void;
		/** [Method] Sets the value of validations  
		* @param validations any[] 
		*/
		setValidations?( validations?:any[] ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Returns a url suitable string for this model instance  */
		toUrl?(): string;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] This un joins this record from an instance of a class  
		* @param store Ext.data.IStore The store from which this model has been removed. 
		*/
		unjoin?( store?:Ext.data.IStore ): void;
		/** [Method] Validates the current data against all of its configured validations  */
		validate?(): Ext.data.IErrors;
		/** [Method] Asynchronously loads a model instance by id  
		* @param id number The id of the model to load 
		* @param config any Config object containing fields: 
		* @param scope any Same as config.scope. 
		*/
		load?( id?:number, config?:any, scope?:any ): void;
	}
}
declare module Ext.data {
	export interface IModelManager extends Ext.IAbstractManager {
	}
	export class ModelManager {
		/** [Method] Creates a new instance of a Model using the given data  
		* @param data any Data to initialize the Model's fields with. 
		* @param name string The name of the model to create. 
		* @param id number Unique id of the Model instance (see Ext.data.Model). 
		*/
		static create( data?:any, name?:string, id?:number ): any;
		/** [Method] Returns the Ext data Model for a given model name  
		* @param id any The id of the model or the model instance. 
		*/
		static getModel( id?:any ): Ext.data.IModel;
		/** [Method] Registers a model definition  
		* @param name any 
		* @param config any 
		*/
		static registerType( name?:any, config?:any ): any;
	}
}
declare module Ext {
	export interface IModelMgr extends Ext.IAbstractManager {
	}
	export class ModelMgr {
		/** [Method] Creates a new instance of a Model using the given data  
		* @param data any Data to initialize the Model's fields with. 
		* @param name string The name of the model to create. 
		* @param id number Unique id of the Model instance (see Ext.data.Model). 
		*/
		static create( data?:any, name?:string, id?:number ): any;
		/** [Method] Returns the Ext data Model for a given model name  
		* @param id any The id of the model or the model instance. 
		*/
		static getModel( id?:any ): Ext.data.IModel;
		/** [Method] Registers a model definition  
		* @param name any 
		* @param config any 
		*/
		static registerType( name?:any, config?:any ): any;
	}
}
declare module Ext {
	export interface IModelManager extends Ext.IAbstractManager {
	}
	export class ModelManager {
		/** [Method] Creates a new instance of a Model using the given data  
		* @param data any Data to initialize the Model's fields with. 
		* @param name string The name of the model to create. 
		* @param id number Unique id of the Model instance (see Ext.data.Model). 
		*/
		static create( data?:any, name?:string, id?:number ): any;
		/** [Method] Returns the Ext data Model for a given model name  
		* @param id any The id of the model or the model instance. 
		*/
		static getModel( id?:any ): Ext.data.IModel;
		/** [Method] Registers a model definition  
		* @param name any 
		* @param config any 
		*/
		static registerType( name?:any, config?:any ): any;
	}
}
declare module Ext.data {
	export interface INodeInterface extends Ext.IBase {
		/** [Property] (Object) */
		childNodes?: any;
		/** [Property] (Object) */
		firstChild?: any;
		/** [Property] (Object) */
		lastChild?: any;
		/** [Property] (Object) */
		nextSibling?: any;
		/** [Property] (Object) */
		parentNode?: any;
		/** [Property] (Object) */
		previousSibling?: any;
		/** [Method] Insert node s as the last child node of this node  
		* @param node any The node or Array of nodes to append. 
		*/
		appendChild?( node?:any ): any;
		appendChild?( node?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		appendChild?( node?:Ext.data.INodeInterface[] ): Ext.data.INodeInterface;
		/** [Method] Bubbles up the tree from this node calling the specified function with each node  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Node. 
		* @param args any[] The args to call the function with (default to passing the current Node). 
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Cascades down the tree from this node calling the specified function with each node  
		* @param fn any The function to call 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Node. 
		* @param args any[] The args to call the function with (default to passing the current Node). 
		*/
		cascadeBy?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Collapse this node  
		* @param recursive any true to recursively collapse all the children. 
		* @param callback any The function to execute once the collapse completes. 
		* @param scope any The scope to run the callback in. 
		*/
		collapse?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns true if this node is an ancestor at any point of the passed node  
		* @param node Ext.data.INodeInterface 
		*/
		contains?( node?:Ext.data.INodeInterface ): bool;
		/** [Method] Creates a copy clone of this Node  
		* @param newId string A new id, defaults to this Node's id. 
		* @param deep bool If passed as true, all child Nodes are recursively copied into the new Node. If omitted or false, the copy will have no child Nodes. 
		*/
		copy?( newId?:string, deep?:bool ): Ext.data.INodeInterface;
		/** [Method] Destroys the node  
		* @param silent any 
		*/
		destroy?( silent?:any ): void;
		/** [Method] Iterates the child nodes of this node calling the specified function with each node  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Node in the iteration. 
		* @param args any[] The args to call the function with (default to passing the current Node). 
		*/
		eachChild?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Expand this node  
		* @param recursive any true to recursively expand all the children. 
		* @param callback any The function to execute once the expand completes. 
		* @param scope any The scope to run the callback in. 
		*/
		expand?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Finds the first child that has the attribute with the specified value  
		* @param attribute string The attribute name. 
		* @param value any The value to search for. 
		* @param deep bool true to search through nodes deeper than the immediate children. 
		*/
		findChild?( attribute?:string, value?:any, deep?:bool ): Ext.data.INodeInterface;
		/** [Method] Finds the first child by a custom function  
		* @param fn any A function which must return true if the passed Node is the required Node. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the Node being tested. 
		* @param deep bool True to search through nodes deeper than the immediate children. 
		*/
		findChildBy?( fn?:any, scope?:any, deep?:bool ): Ext.data.INodeInterface;
		/** [Method] Returns the child node at the specified index  
		* @param index number 
		*/
		getChildAt?( index?:number ): Ext.data.INodeInterface;
		/** [Method] Returns depth of this node the root node has a depth of 0 */
		getDepth?(): number;
		/** [Method] Gets the hierarchical path from the root of the current node  
		* @param field string The field to construct the path from. Defaults to the model idProperty. 
		* @param separator string A separator to use. 
		*/
		getPath?( field?:string, separator?:string ): string;
		/** [Method] Returns true if this node has one or more child nodes else false  */
		hasChildNodes?(): bool;
		/** [Method] Returns the index of a child node  
		* @param child Ext.data.INodeInterface 
		*/
		indexOf?( child?:Ext.data.INodeInterface ): number;
		/** [Method] Inserts the first node before the second node in this nodes childNodes collection  
		* @param node Ext.data.INodeInterface The node to insert. 
		* @param refNode Ext.data.INodeInterface The node to insert before (if null the node is appended). 
		*/
		insertBefore?( node?:Ext.data.INodeInterface, refNode?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Insert a node into this node  
		* @param index number The zero-based index to insert the node at. 
		* @param node Ext.data.IModel The node to insert. 
		*/
		insertChild?( index?:number, node?:Ext.data.IModel ): Ext.data.IModel;
		/** [Method] Returns true if the passed node is an ancestor at any point of this node  
		* @param node Ext.data.INodeInterface 
		*/
		isAncestor?( node?:Ext.data.INodeInterface ): bool;
		/** [Method] Returns true if this node has one or more child nodes or if the expandable node attribute is explicitly specified as  */
		isExpandable?(): bool;
		/** [Method] Returns true if this node is expanded  */
		isExpanded?(): bool;
		/** [Method] Returns true if this node is the first child of its parent  */
		isFirst?(): bool;
		/** [Method] Returns true if this node is the last child of its parent  */
		isLast?(): bool;
		/** [Method] Returns true if this node is a leaf */
		isLeaf?(): bool;
		/** [Method] Returns true if this node is loaded  */
		isLoaded?(): bool;
		/** [Method] Returns true if this node is loading  */
		isLoading?(): bool;
		/** [Method] Returns true if this node is the root node  */
		isRoot?(): bool;
		/** [Method] Returns true if this node is visible  */
		isVisible?(): bool;
		/** [Method] Removes this node from its parent  
		* @param destroy bool true to destroy the node upon removal. 
		*/
		remove?( destroy?:bool ): Ext.data.INodeInterface;
		/** [Method] Removes all child nodes from this node  
		* @param destroy bool true to destroy the node upon removal. 
		*/
		removeAll?( destroy?:bool ): Ext.data.INodeInterface;
		/** [Method] Removes a child node from this node  
		* @param node Ext.data.INodeInterface The node to remove. 
		* @param destroy bool true to destroy the node upon removal. 
		*/
		removeChild?( node?:Ext.data.INodeInterface, destroy?:bool ): Ext.data.INodeInterface;
		/** [Method] Replaces one child node in this node with another  
		* @param newChild Ext.data.INodeInterface The replacement node. 
		* @param oldChild Ext.data.INodeInterface The node to replace. 
		*/
		replaceChild?( newChild?:Ext.data.INodeInterface, oldChild?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Sorts this nodes children using the supplied sort function  
		* @param sortFn any A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order. 
		* @param recursive bool Whether or not to apply this sort recursively. 
		* @param suppressEvent bool Set to true to not fire a sort event. 
		*/
		sort?( sortFn?:any, recursive?:bool, suppressEvent?:bool ): void;
		/** [Method] Updates general data of this node like isFirst isLast depth  
		* @param silent any 
		*/
		updateInfo?( silent?:any ): bool;
		/** [Method] This method allows you to decorate a Record s prototype to implement the NodeInterface  
		* @param record Ext.data.IModel The Record you want to decorate the prototype of. 
		*/
		decorate?( record?:Ext.data.IModel ): void;
	}
}
declare module Ext.data {
	export interface INode extends Ext.IBase {
		/** [Property] (Object) */
		childNodes?: any;
		/** [Property] (Object) */
		firstChild?: any;
		/** [Property] (Object) */
		lastChild?: any;
		/** [Property] (Object) */
		nextSibling?: any;
		/** [Property] (Object) */
		parentNode?: any;
		/** [Property] (Object) */
		previousSibling?: any;
		/** [Method] Insert node s as the last child node of this node  
		* @param node any The node or Array of nodes to append. 
		*/
		appendChild?( node?:any ): any;
		appendChild?( node?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		appendChild?( node?:Ext.data.INodeInterface[] ): Ext.data.INodeInterface;
		/** [Method] Bubbles up the tree from this node calling the specified function with each node  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Node. 
		* @param args any[] The args to call the function with (default to passing the current Node). 
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Cascades down the tree from this node calling the specified function with each node  
		* @param fn any The function to call 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Node. 
		* @param args any[] The args to call the function with (default to passing the current Node). 
		*/
		cascadeBy?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Collapse this node  
		* @param recursive any true to recursively collapse all the children. 
		* @param callback any The function to execute once the collapse completes. 
		* @param scope any The scope to run the callback in. 
		*/
		collapse?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns true if this node is an ancestor at any point of the passed node  
		* @param node Ext.data.INodeInterface 
		*/
		contains?( node?:Ext.data.INodeInterface ): bool;
		/** [Method] Creates a copy clone of this Node  
		* @param newId string A new id, defaults to this Node's id. 
		* @param deep bool If passed as true, all child Nodes are recursively copied into the new Node. If omitted or false, the copy will have no child Nodes. 
		*/
		copy?( newId?:string, deep?:bool ): Ext.data.INodeInterface;
		/** [Method] Destroys the node  
		* @param silent any 
		*/
		destroy?( silent?:any ): void;
		/** [Method] Iterates the child nodes of this node calling the specified function with each node  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Node in the iteration. 
		* @param args any[] The args to call the function with (default to passing the current Node). 
		*/
		eachChild?( fn?:any, scope?:any, args?:any[] ): void;
		/** [Method] Expand this node  
		* @param recursive any true to recursively expand all the children. 
		* @param callback any The function to execute once the expand completes. 
		* @param scope any The scope to run the callback in. 
		*/
		expand?( recursive?:any, callback?:any, scope?:any ): void;
		/** [Method] Finds the first child that has the attribute with the specified value  
		* @param attribute string The attribute name. 
		* @param value any The value to search for. 
		* @param deep bool true to search through nodes deeper than the immediate children. 
		*/
		findChild?( attribute?:string, value?:any, deep?:bool ): Ext.data.INodeInterface;
		/** [Method] Finds the first child by a custom function  
		* @param fn any A function which must return true if the passed Node is the required Node. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the Node being tested. 
		* @param deep bool True to search through nodes deeper than the immediate children. 
		*/
		findChildBy?( fn?:any, scope?:any, deep?:bool ): Ext.data.INodeInterface;
		/** [Method] Returns the child node at the specified index  
		* @param index number 
		*/
		getChildAt?( index?:number ): Ext.data.INodeInterface;
		/** [Method] Returns depth of this node the root node has a depth of 0 */
		getDepth?(): number;
		/** [Method] Gets the hierarchical path from the root of the current node  
		* @param field string The field to construct the path from. Defaults to the model idProperty. 
		* @param separator string A separator to use. 
		*/
		getPath?( field?:string, separator?:string ): string;
		/** [Method] Returns true if this node has one or more child nodes else false  */
		hasChildNodes?(): bool;
		/** [Method] Returns the index of a child node  
		* @param child Ext.data.INodeInterface 
		*/
		indexOf?( child?:Ext.data.INodeInterface ): number;
		/** [Method] Inserts the first node before the second node in this nodes childNodes collection  
		* @param node Ext.data.INodeInterface The node to insert. 
		* @param refNode Ext.data.INodeInterface The node to insert before (if null the node is appended). 
		*/
		insertBefore?( node?:Ext.data.INodeInterface, refNode?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Insert a node into this node  
		* @param index number The zero-based index to insert the node at. 
		* @param node Ext.data.IModel The node to insert. 
		*/
		insertChild?( index?:number, node?:Ext.data.IModel ): Ext.data.IModel;
		/** [Method] Returns true if the passed node is an ancestor at any point of this node  
		* @param node Ext.data.INodeInterface 
		*/
		isAncestor?( node?:Ext.data.INodeInterface ): bool;
		/** [Method] Returns true if this node has one or more child nodes or if the expandable node attribute is explicitly specified as  */
		isExpandable?(): bool;
		/** [Method] Returns true if this node is expanded  */
		isExpanded?(): bool;
		/** [Method] Returns true if this node is the first child of its parent  */
		isFirst?(): bool;
		/** [Method] Returns true if this node is the last child of its parent  */
		isLast?(): bool;
		/** [Method] Returns true if this node is a leaf */
		isLeaf?(): bool;
		/** [Method] Returns true if this node is loaded  */
		isLoaded?(): bool;
		/** [Method] Returns true if this node is loading  */
		isLoading?(): bool;
		/** [Method] Returns true if this node is the root node  */
		isRoot?(): bool;
		/** [Method] Returns true if this node is visible  */
		isVisible?(): bool;
		/** [Method] Removes this node from its parent  
		* @param destroy bool true to destroy the node upon removal. 
		*/
		remove?( destroy?:bool ): Ext.data.INodeInterface;
		/** [Method] Removes all child nodes from this node  
		* @param destroy bool true to destroy the node upon removal. 
		*/
		removeAll?( destroy?:bool ): Ext.data.INodeInterface;
		/** [Method] Removes a child node from this node  
		* @param node Ext.data.INodeInterface The node to remove. 
		* @param destroy bool true to destroy the node upon removal. 
		*/
		removeChild?( node?:Ext.data.INodeInterface, destroy?:bool ): Ext.data.INodeInterface;
		/** [Method] Replaces one child node in this node with another  
		* @param newChild Ext.data.INodeInterface The replacement node. 
		* @param oldChild Ext.data.INodeInterface The node to replace. 
		*/
		replaceChild?( newChild?:Ext.data.INodeInterface, oldChild?:Ext.data.INodeInterface ): Ext.data.INodeInterface;
		/** [Method] Sorts this nodes children using the supplied sort function  
		* @param sortFn any A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order. 
		* @param recursive bool Whether or not to apply this sort recursively. 
		* @param suppressEvent bool Set to true to not fire a sort event. 
		*/
		sort?( sortFn?:any, recursive?:bool, suppressEvent?:bool ): void;
		/** [Method] Updates general data of this node like isFirst isLast depth  
		* @param silent any 
		*/
		updateInfo?( silent?:any ): bool;
		/** [Method] This method allows you to decorate a Record s prototype to implement the NodeInterface  
		* @param record Ext.data.IModel The Record you want to decorate the prototype of. 
		*/
		decorate?( record?:Ext.data.IModel ): void;
	}
}
declare module Ext.data {
	export interface INodeStore extends Ext.data.IStore {
		/** [Config Option] (Object[]) */
		filters?: any[];
		/** [Config Option] (Boolean) */
		folderSort?: bool;
		/** [Config Option] (Ext.data.Model) */
		node?: Ext.data.IModel;
		/** [Config Option] (Boolean) */
		recursive?: bool;
		/** [Config Option] (Boolean) */
		rootVisible?: bool;
		/** [Config Option] (Object[]) */
		sorters?: any[];
		/** [Method] Returns the value of filters  */
		getFilters?(): any;
		/** [Method] Returns the value of folderSort  */
		getFolderSort?(): bool;
		/** [Method] Returns the value of node  */
		getNode?(): Ext.data.IModel;
		/** [Method] Returns the value of recursive  */
		getRecursive?(): bool;
		/** [Method] Returns the value of rootVisible  */
		getRootVisible?(): bool;
		/** [Method] Returns the value of sorters  */
		getSorters?(): any;
		/** [Method]  
		* @param node any 
		*/
		isVisible?( node?:any ): bool;
		/** [Method] Sets the value of filters  
		* @param filters any 
		*/
		setFilters?( filters?:any ): void;
		/** [Method] Sets the value of folderSort  
		* @param folderSort bool 
		*/
		setFolderSort?( folderSort?:bool ): void;
		/** [Method] Sets the value of node  
		* @param node Ext.data.IModel 
		*/
		setNode?( node?:Ext.data.IModel ): void;
		/** [Method] Sets the value of recursive  
		* @param recursive bool 
		*/
		setRecursive?( recursive?:bool ): void;
		/** [Method] Sets the value of rootVisible  
		* @param rootVisible bool 
		*/
		setRootVisible?( rootVisible?:bool ): void;
		/** [Method] Sets the value of sorters  
		* @param sorters any 
		*/
		setSorters?( sorters?:any ): void;
	}
}
declare module Ext.data {
	export interface IOperation extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Ext.data.Batch) */
		batch?: Ext.data.IBatch;
		/** [Config Option] (Function) */
		callback?: any;
		/** [Config Option] (Ext.util.Filter[]) */
		filters?: Ext.util.IFilter[];
		/** [Config Option] (Boolean) */
		group?: bool;
		/** [Config Option] (Ext.util.Grouper) */
		grouper?: Ext.util.IGrouper;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Ext.data.Model) */
		model?: Ext.data.IModel;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Array) */
		records?: any[];
		/** [Config Option] (Ext.data.Request) */
		request?: Ext.data.IRequest;
		/** [Config Option] (Object) */
		response?: any;
		/** [Config Option] (Ext.data.ResultSet) */
		resultSet?: Ext.data.IResultSet;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Ext.util.Sorter[]) */
		sorters?: Ext.util.ISorter[];
		/** [Config Option] (Number) */
		start?: number;
		/** [Config Option] (Boolean) */
		synchronous?: bool;
		/** [Config Option] (Boolean) */
		withCredentials?: bool;
		/** [Method] Checks whether this operation should cause writing to occur  */
		allowWrite?(): bool;
		/** [Method] Returns the value of action  */
		getAction?(): string;
		/** [Method] Returns the value of addRecords  */
		getAddRecords?(): bool;
		/** [Method] Returns the value of batch  */
		getBatch?(): Ext.data.IBatch;
		/** [Method] Returns the value of callback  */
		getCallback?(): any;
		/** [Method] Returns the error string or object that was set using setException  */
		getError?(): any;
		/** [Method] Returns the value of filters  */
		getFilters?(): Ext.util.IFilter[];
		/** [Method] Returns the value of grouper  */
		getGrouper?(): Ext.util.IGrouper;
		/** [Method] Returns the value of limit  */
		getLimit?(): number;
		/** [Method] Returns the value of model  */
		getModel?(): Ext.data.IModel;
		/** [Method] Returns the value of node  */
		getNode?(): any;
		/** [Method] Returns the value of page  */
		getPage?(): any;
		/** [Method] Returns the value of params  */
		getParams?(): any;
		/** [Method] Returns the value of request  */
		getRequest?(): Ext.data.IRequest;
		/** [Method] Returns the value of response  */
		getResponse?(): any;
		/** [Method] Returns the value of resultSet  */
		getResultSet?(): Ext.data.IResultSet;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Returns the value of sorters  */
		getSorters?(): Ext.util.ISorter[];
		/** [Method] Returns the value of start  */
		getStart?(): number;
		/** [Method] Returns the value of synchronous  */
		getSynchronous?(): bool;
		/** [Method] Returns the value of url  */
		getUrl?(): any;
		/** [Method] Returns the value of withCredentials  */
		getWithCredentials?(): bool;
		/** [Method] Returns true if this Operation encountered an exception see also getError */
		hasException?(): bool;
		/** [Method] Returns true if the Operation has been completed */
		isComplete?(): bool;
		/** [Method] Returns true if the Operation has been started but has not yet completed  */
		isRunning?(): bool;
		/** [Method] Returns true if the Operation has been started  */
		isStarted?(): bool;
		/** [Method] Sets the value of action  
		* @param action string 
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of addRecords  
		* @param addRecords bool 
		*/
		setAddRecords?( addRecords?:bool ): void;
		/** [Method] Sets the value of batch  
		* @param batch Ext.data.IBatch 
		*/
		setBatch?( batch?:Ext.data.IBatch ): void;
		/** [Method] Sets the value of callback  
		* @param callback any 
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Marks the Operation as completed  */
		setCompleted?(): void;
		/** [Method] Marks the Operation as having experienced an exception  
		* @param error any error string/object 
		*/
		setException?( error?:any ): void;
		/** [Method] Sets the value of filters  
		* @param filters Ext.util.IFilter[] 
		*/
		setFilters?( filters?:Ext.util.IFilter[] ): void;
		/** [Method] Sets the value of grouper  
		* @param grouper Ext.util.IGrouper 
		*/
		setGrouper?( grouper?:Ext.util.IGrouper ): void;
		/** [Method] Sets the value of limit  
		* @param limit number 
		*/
		setLimit?( limit?:number ): void;
		/** [Method] Sets the value of model  
		* @param model Ext.data.IModel 
		*/
		setModel?( model?:Ext.data.IModel ): void;
		/** [Method] Sets the value of node  
		* @param node any 
		*/
		setNode?( node?:any ): void;
		/** [Method] Sets the value of page  
		* @param page any 
		*/
		setPage?( page?:any ): void;
		/** [Method] Sets the value of params  
		* @param params any 
		*/
		setParams?( params?:any ): void;
		/** [Method] Sets the value of records  
		* @param records any[] 
		*/
		setRecords?( records?:any[] ): void;
		/** [Method] Sets the value of request  
		* @param request Ext.data.IRequest 
		*/
		setRequest?( request?:Ext.data.IRequest ): void;
		/** [Method] Sets the value of response  
		* @param response any 
		*/
		setResponse?( response?:any ): void;
		/** [Method] Sets the value of resultSet  
		* @param resultSet Ext.data.IResultSet 
		*/
		setResultSet?( resultSet?:Ext.data.IResultSet ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.ISorter[] 
		*/
		setSorters?( sorters?:Ext.util.ISorter[] ): void;
		/** [Method] Sets the value of start  
		* @param start number 
		*/
		setStart?( start?:number ): void;
		/** [Method] Marks the Operation as started  */
		setStarted?(): void;
		/** [Method] Marks the Operation as successful  */
		setSuccessful?(): void;
		/** [Method] Sets the value of synchronous  
		* @param synchronous bool 
		*/
		setSynchronous?( synchronous?:bool ): void;
		/** [Method] Sets the value of url  
		* @param url any 
		*/
		setUrl?( url?:any ): void;
		/** [Method] Sets the value of withCredentials  
		* @param withCredentials bool 
		*/
		setWithCredentials?( withCredentials?:bool ): void;
		/** [Method] Returns true if the Operation has completed and was successful */
		wasSuccessful?(): bool;
	}
}
declare module Ext.data.proxy {
	export interface IAjax extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: bool;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: bool;
		/** [Property] (Object) */
		actionMethods?: any;
		/** [Method] Performs Ajax request  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of headers  */
		getHeaders?(): any;
		/** [Method] Returns the HTTP method name for a given request  
		* @param request Ext.data.IRequest The request object. 
		*/
		getMethod?( request?:Ext.data.IRequest ): string;
		/** [Method] Returns the value of password  */
		getPassword?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader  */
		getUseDefaultXhrHeader?(): bool;
		/** [Method] Returns the value of username  */
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials  */
		getWithCredentials?(): bool;
		/** [Method] Sets the value of headers  
		* @param headers any 
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of password  
		* @param password string 
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader bool 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:bool ): void;
		/** [Method] Sets the value of username  
		* @param username string 
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials  
		* @param withCredentials bool 
		*/
		setWithCredentials?( withCredentials?:bool ): void;
	}
}
declare module Ext.data {
	export interface IHttpProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: bool;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: bool;
		/** [Property] (Object) */
		actionMethods?: any;
		/** [Method] Performs Ajax request  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of headers  */
		getHeaders?(): any;
		/** [Method] Returns the HTTP method name for a given request  
		* @param request Ext.data.IRequest The request object. 
		*/
		getMethod?( request?:Ext.data.IRequest ): string;
		/** [Method] Returns the value of password  */
		getPassword?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader  */
		getUseDefaultXhrHeader?(): bool;
		/** [Method] Returns the value of username  */
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials  */
		getWithCredentials?(): bool;
		/** [Method] Sets the value of headers  
		* @param headers any 
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of password  
		* @param password string 
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader bool 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:bool ): void;
		/** [Method] Sets the value of username  
		* @param username string 
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials  
		* @param withCredentials bool 
		*/
		setWithCredentials?( withCredentials?:bool ): void;
	}
}
declare module Ext.data {
	export interface IAjaxProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: bool;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: bool;
		/** [Property] (Object) */
		actionMethods?: any;
		/** [Method] Performs Ajax request  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of headers  */
		getHeaders?(): any;
		/** [Method] Returns the HTTP method name for a given request  
		* @param request Ext.data.IRequest The request object. 
		*/
		getMethod?( request?:Ext.data.IRequest ): string;
		/** [Method] Returns the value of password  */
		getPassword?(): string;
		/** [Method] Returns the value of useDefaultXhrHeader  */
		getUseDefaultXhrHeader?(): bool;
		/** [Method] Returns the value of username  */
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials  */
		getWithCredentials?(): bool;
		/** [Method] Sets the value of headers  
		* @param headers any 
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of password  
		* @param password string 
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader bool 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:bool ): void;
		/** [Method] Sets the value of username  
		* @param username string 
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials  
		* @param withCredentials bool 
		*/
		setWithCredentials?( withCredentials?:bool ): void;
	}
}
declare module Ext.data.proxy {
	export interface IClient extends Ext.data.proxy.IProxy {
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
	}
}
declare module Ext.proxy {
	export interface IClientProxy extends Ext.data.proxy.IProxy {
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
	}
}
declare module Ext.data.proxy {
	export interface IDirect extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: bool;
		/** [Method] Generates a url based on a given Ext data Request object  */
		buildUrl?(): string;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of api  */
		getApi?(): any;
		/** [Method] Returns the value of directFn  */
		getDirectFn?(): any;
		/** [Method] Returns the value of directFn  */
		getDirectFn?(): string;
		/** [Method] Returns the value of extraParams  */
		getExtraParams?(): any;
		/** [Method] Returns the value of paramOrder  */
		getParamOrder?(): string;
		/** [Method] Returns the value of paramOrder  */
		getParamOrder?(): string[];
		/** [Method] Returns the value of paramsAsHash  */
		getParamsAsHash?(): bool;
		/** [Method] Sets the value of api  
		* @param api any 
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of directFn  
		* @param directFn any 
		*/
		setDirectFn?( directFn?:any ): any;
		setDirectFn?( directFn?:string ): void;
		/** [Method] Sets the value of extraParams  
		* @param extraParams any 
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of paramOrder  
		* @param paramOrder any 
		*/
		setParamOrder?( paramOrder?:any ): any;
		setParamOrder?( paramOrder?:string ): void;
		setParamOrder?( paramOrder?:string[] ): void;
		/** [Method] Sets the value of paramsAsHash  
		* @param paramsAsHash bool 
		*/
		setParamsAsHash?( paramsAsHash?:bool ): void;
	}
}
declare module Ext.data {
	export interface IDirectProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: bool;
		/** [Method] Generates a url based on a given Ext data Request object  */
		buildUrl?(): string;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		doRequest?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of api  */
		getApi?(): any;
		/** [Method] Returns the value of directFn  */
		getDirectFn?(): any;
		/** [Method] Returns the value of directFn  */
		getDirectFn?(): string;
		/** [Method] Returns the value of extraParams  */
		getExtraParams?(): any;
		/** [Method] Returns the value of paramOrder  */
		getParamOrder?(): string;
		/** [Method] Returns the value of paramOrder  */
		getParamOrder?(): string[];
		/** [Method] Returns the value of paramsAsHash  */
		getParamsAsHash?(): bool;
		/** [Method] Sets the value of api  
		* @param api any 
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of directFn  
		* @param directFn any 
		*/
		setDirectFn?( directFn?:any ): any;
		setDirectFn?( directFn?:string ): void;
		/** [Method] Sets the value of extraParams  
		* @param extraParams any 
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of paramOrder  
		* @param paramOrder any 
		*/
		setParamOrder?( paramOrder?:any ): any;
		setParamOrder?( paramOrder?:string ): void;
		setParamOrder?( paramOrder?:string[] ): void;
		/** [Method] Sets the value of paramsAsHash  
		* @param paramsAsHash bool 
		*/
		setParamsAsHash?( paramsAsHash?:bool ): void;
	}
}
declare module Ext.data.proxy {
	export interface IJsonP extends Ext.data.proxy.IServer {
		/** [Config Option] (Boolean) */
		autoAppendParams?: bool;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
		/** [Method] Aborts the current server request if one is currently running  */
		abort?(): void;
		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.IRequest The request object. 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] Performs the read request to the remote domain  
		* @param operation Ext.data.IOperation The Operation object to execute. 
		* @param callback any A callback function to execute when the Operation has been completed. 
		* @param scope any The scope to execute the callback in. 
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of autoAppendParams  */
		getAutoAppendParams?(): bool;
		/** [Method] Returns the value of callbackKey  */
		getCallbackKey?(): string;
		/** [Method] Returns the value of defaultWriterType  */
		getDefaultWriterType?(): string;
		/** [Method] Returns the value of recordParam  */
		getRecordParam?(): string;
		/** [Method] Sets the value of autoAppendParams  
		* @param autoAppendParams bool 
		*/
		setAutoAppendParams?( autoAppendParams?:bool ): void;
		/** [Method] Sets the value of callbackKey  
		* @param callbackKey string 
		*/
		setCallbackKey?( callbackKey?:string ): void;
		/** [Method] Sets the value of defaultWriterType  
		* @param defaultWriterType string 
		*/
		setDefaultWriterType?( defaultWriterType?:string ): void;
		/** [Method] Sets the value of recordParam  
		* @param recordParam string 
		*/
		setRecordParam?( recordParam?:string ): void;
	}
}
declare module Ext.data {
	export interface IScriptTagProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Boolean) */
		autoAppendParams?: bool;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
		/** [Method] Aborts the current server request if one is currently running  */
		abort?(): void;
		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.IRequest The request object. 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] Performs the read request to the remote domain  
		* @param operation Ext.data.IOperation The Operation object to execute. 
		* @param callback any A callback function to execute when the Operation has been completed. 
		* @param scope any The scope to execute the callback in. 
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): any;
		/** [Method] Returns the value of autoAppendParams  */
		getAutoAppendParams?(): bool;
		/** [Method] Returns the value of callbackKey  */
		getCallbackKey?(): string;
		/** [Method] Returns the value of defaultWriterType  */
		getDefaultWriterType?(): string;
		/** [Method] Returns the value of recordParam  */
		getRecordParam?(): string;
		/** [Method] Sets the value of autoAppendParams  
		* @param autoAppendParams bool 
		*/
		setAutoAppendParams?( autoAppendParams?:bool ): void;
		/** [Method] Sets the value of callbackKey  
		* @param callbackKey string 
		*/
		setCallbackKey?( callbackKey?:string ): void;
		/** [Method] Sets the value of defaultWriterType  
		* @param defaultWriterType string 
		*/
		setDefaultWriterType?( defaultWriterType?:string ): void;
		/** [Method] Sets the value of recordParam  
		* @param recordParam string 
		*/
		setRecordParam?( recordParam?:string ): void;
	}
}
declare module Ext.data.proxy {
	export interface ILocalStorage extends Ext.data.proxy.IWebStorage {
	}
}
declare module Ext.data {
	export interface ILocalStorageProxy extends Ext.data.proxy.IWebStorage {
	}
}
declare module Ext.data.proxy {
	export interface IMemory extends Ext.data.proxy.IClient {
		/** [Config Option] (Object) */
		data?: any;
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Reads data from the configured data object  
		* @param operation Ext.data.IOperation The read Operation 
		* @param callback any The callback to call when reading has completed 
		* @param scope any The scope to call the callback function in 
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data {
	export interface IMemoryProxy extends Ext.data.proxy.IClient {
		/** [Config Option] (Object) */
		data?: any;
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Reads data from the configured data object  
		* @param operation Ext.data.IOperation The read Operation 
		* @param callback any The callback to call when reading has completed 
		* @param scope any The scope to call the callback function in 
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data.proxy {
	export interface IProxy extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		batchActions?: bool;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Method] Performs a batch of Operations in the order specified by batchOrder  
		* @param options any Object containing one or more properties supported by the batch method: 
		*/
		batch?( options?:any ): Ext.data.IBatch;
		/** [Method] Performs the given create operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of batchActions  */
		getBatchActions?(): bool;
		/** [Method] Returns the value of batchOrder  */
		getBatchOrder?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): Ext.data.IModel;
		/** [Method] Returns the value of reader  */
		getReader?(): any;
		/** [Method] Returns the value of writer  */
		getWriter?(): any;
		/** [Method] Performs the given read operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of batchActions  
		* @param batchActions bool 
		*/
		setBatchActions?( batchActions?:bool ): void;
		/** [Method] Sets the value of batchOrder  
		* @param batchOrder string 
		*/
		setBatchOrder?( batchOrder?:string ): void;
		/** [Method] Sets the value of model  
		* @param model any 
		*/
		setModel?( model?:any ): any;
		setModel?( model?:string ): void;
		setModel?( model?:Ext.data.IModel ): void;
		/** [Method] Sets the value of reader  
		* @param reader any 
		*/
		setReader?( reader?:any ): void;
		/** [Method] Sets the value of writer  
		* @param writer any 
		*/
		setWriter?( writer?:any ): void;
		/** [Method] Performs the given update operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data {
	export interface IDataProxy extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		batchActions?: bool;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Method] Performs a batch of Operations in the order specified by batchOrder  
		* @param options any Object containing one or more properties supported by the batch method: 
		*/
		batch?( options?:any ): Ext.data.IBatch;
		/** [Method] Performs the given create operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of batchActions  */
		getBatchActions?(): bool;
		/** [Method] Returns the value of batchOrder  */
		getBatchOrder?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): Ext.data.IModel;
		/** [Method] Returns the value of reader  */
		getReader?(): any;
		/** [Method] Returns the value of writer  */
		getWriter?(): any;
		/** [Method] Performs the given read operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of batchActions  
		* @param batchActions bool 
		*/
		setBatchActions?( batchActions?:bool ): void;
		/** [Method] Sets the value of batchOrder  
		* @param batchOrder string 
		*/
		setBatchOrder?( batchOrder?:string ): void;
		/** [Method] Sets the value of model  
		* @param model any 
		*/
		setModel?( model?:any ): any;
		setModel?( model?:string ): void;
		setModel?( model?:Ext.data.IModel ): void;
		/** [Method] Sets the value of reader  
		* @param reader any 
		*/
		setReader?( reader?:any ): void;
		/** [Method] Sets the value of writer  
		* @param writer any 
		*/
		setWriter?( writer?:any ): void;
		/** [Method] Performs the given update operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data {
	export interface IProxy extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		batchActions?: bool;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Method] Performs a batch of Operations in the order specified by batchOrder  
		* @param options any Object containing one or more properties supported by the batch method: 
		*/
		batch?( options?:any ): Ext.data.IBatch;
		/** [Method] Performs the given create operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		create?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		destroy?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of batchActions  */
		getBatchActions?(): bool;
		/** [Method] Returns the value of batchOrder  */
		getBatchOrder?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): Ext.data.IModel;
		/** [Method] Returns the value of reader  */
		getReader?(): any;
		/** [Method] Returns the value of writer  */
		getWriter?(): any;
		/** [Method] Performs the given read operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		read?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of batchActions  
		* @param batchActions bool 
		*/
		setBatchActions?( batchActions?:bool ): void;
		/** [Method] Sets the value of batchOrder  
		* @param batchOrder string 
		*/
		setBatchOrder?( batchOrder?:string ): void;
		/** [Method] Sets the value of model  
		* @param model any 
		*/
		setModel?( model?:any ): any;
		setModel?( model?:string ): void;
		setModel?( model?:Ext.data.IModel ): void;
		/** [Method] Sets the value of reader  
		* @param reader any 
		*/
		setReader?( reader?:any ): void;
		/** [Method] Sets the value of writer  
		* @param writer any 
		*/
		setWriter?( writer?:any ): void;
		/** [Method] Performs the given update operation  
		* @param operation Ext.data.IOperation The Operation to perform 
		* @param callback any Callback function to be called when the Operation has completed (whether successful or not) 
		* @param scope any Scope to execute the callback function in 
		*/
		update?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data.proxy {
	export interface IRest extends Ext.data.proxy.IAjax {
		/** [Config Option] (Boolean) */
		appendId?: bool;
		/** [Config Option] (Boolean) */
		batchActions?: bool;
		/** [Config Option] (String) */
		format?: string;
		/** [Method] Specialized version of buildUrl that incorporates the appendId and format options into the generated url  
		* @param request any 
		*/
		buildUrl?( request?:any ): string;
		/** [Method] Returns the value of actionMethods  */
		getActionMethods?(): any;
		/** [Method] Returns the value of appendId  */
		getAppendId?(): bool;
		/** [Method] Returns the value of batchActions  */
		getBatchActions?(): bool;
		/** [Method] Returns the value of format  */
		getFormat?(): string;
		/** [Method] Sets the value of actionMethods  
		* @param actionMethods any 
		*/
		setActionMethods?( actionMethods?:any ): void;
		/** [Method] Sets the value of appendId  
		* @param appendId bool 
		*/
		setAppendId?( appendId?:bool ): void;
		/** [Method] Sets the value of batchActions  
		* @param batchActions bool 
		*/
		setBatchActions?( batchActions?:bool ): void;
		/** [Method] Sets the value of format  
		* @param format string 
		*/
		setFormat?( format?:string ): void;
	}
}
declare module Ext.data {
	export interface IRestProxy extends Ext.data.proxy.IAjax {
		/** [Config Option] (Boolean) */
		appendId?: bool;
		/** [Config Option] (Boolean) */
		batchActions?: bool;
		/** [Config Option] (String) */
		format?: string;
		/** [Method] Specialized version of buildUrl that incorporates the appendId and format options into the generated url  
		* @param request any 
		*/
		buildUrl?( request?:any ): string;
		/** [Method] Returns the value of actionMethods  */
		getActionMethods?(): any;
		/** [Method] Returns the value of appendId  */
		getAppendId?(): bool;
		/** [Method] Returns the value of batchActions  */
		getBatchActions?(): bool;
		/** [Method] Returns the value of format  */
		getFormat?(): string;
		/** [Method] Sets the value of actionMethods  
		* @param actionMethods any 
		*/
		setActionMethods?( actionMethods?:any ): void;
		/** [Method] Sets the value of appendId  
		* @param appendId bool 
		*/
		setAppendId?( appendId?:bool ): void;
		/** [Method] Sets the value of batchActions  
		* @param batchActions bool 
		*/
		setBatchActions?( batchActions?:bool ): void;
		/** [Method] Sets the value of format  
		* @param format string 
		*/
		setFormat?( format?:string ): void;
	}
}
declare module Ext.data.proxy {
	export interface IServer extends Ext.data.proxy.IProxy {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Boolean) */
		enablePagingParams?: bool;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: bool;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleSortMode?: bool;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Optional callback function which can be used to clean up after a request has been completed  
		* @param request Ext.data.IRequest The Request object 
		* @param success bool True if the request was successful 
		*/
		afterRequest?( request?:Ext.data.IRequest, success?:bool ): void;
		/** [Method] Creates and returns an Ext data Request object based on the options passed by the Store that this Proxy is attached to  
		* @param operation Ext.data.IOperation The Operation object to execute 
		*/
		buildRequest?( operation?:Ext.data.IOperation ): Ext.data.IRequest;
		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.IRequest The request object 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] in a ServerProxy all four CRUD operations are executed in the same manner so we delegate to doRequest in each case */
		create?(): void;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest  
		* @param operation Ext.data.IOperation The Ext.data.Operation object 
		* @param callback any The callback function to call when the Operation has completed 
		* @param scope any The scope in which to execute the callback 
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Encodes the array of Ext util Filter objects into a string to be sent in the request url  
		* @param filters Ext.util.IFilter[] The array of Filter objects 
		*/
		encodeFilters?( filters?:Ext.util.IFilter[] ): string;
		/** [Method] Encodes the array of Ext util Sorter objects into a string to be sent in the request url  
		* @param sorters Ext.util.ISorter[] The array of Sorter objects 
		*/
		encodeSorters?( sorters?:Ext.util.ISorter[] ): string;
		/** [Method] Returns the value of api  */
		getApi?(): any;
		/** [Method] Returns the value of cacheString  */
		getCacheString?(): string;
		/** [Method] Returns the value of directionParam  */
		getDirectionParam?(): string;
		/** [Method] Returns the value of enablePagingParams  */
		getEnablePagingParams?(): bool;
		/** [Method] Returns the value of extraParams  */
		getExtraParams?(): any;
		/** [Method] Returns the value of filterParam  */
		getFilterParam?(): string;
		/** [Method] Returns the value of groupParam  */
		getGroupParam?(): string;
		/** [Method] Returns the value of limitParam  */
		getLimitParam?(): string;
		/** [Method] Returns the value of noCache  */
		getNoCache?(): bool;
		/** [Method] Returns the value of pageParam  */
		getPageParam?(): string;
		/** [Method] Returns the value of simpleSortMode  */
		getSimpleSortMode?(): bool;
		/** [Method] Returns the value of sortParam  */
		getSortParam?(): string;
		/** [Method] Returns the value of startParam  */
		getStartParam?(): string;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] This method handles the processing of the response and is usually overridden by subclasses to do additional processing  
		* @param success bool Whether or not this request was successful 
		* @param operation Ext.data.IOperation The operation we made this request for 
		* @param request Ext.data.IRequest The request that was made 
		* @param response any The response that we got 
		* @param callback any The callback to be fired onces the response is processed 
		* @param scope any The scope in which we call the callback 
		*/
		processResponse?( success?:bool, operation?:Ext.data.IOperation, request?:Ext.data.IRequest, response?:any, callback?:any, scope?:any ): void;
		/** [Method] Performs the given read operation  */
		read?(): void;
		/** [Method] Sets the value of api  
		* @param api any 
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of cacheString  
		* @param cacheString string 
		*/
		setCacheString?( cacheString?:string ): void;
		/** [Method] Sets the value of directionParam  
		* @param directionParam string 
		*/
		setDirectionParam?( directionParam?:string ): void;
		/** [Method] Sets the value of enablePagingParams  
		* @param enablePagingParams bool 
		*/
		setEnablePagingParams?( enablePagingParams?:bool ): void;
		/** [Method] Sets a value in the underlying extraParams  
		* @param name string The key for the new value 
		* @param value any The value 
		*/
		setExtraParam?( name?:string, value?:any ): void;
		/** [Method] Sets the value of extraParams  
		* @param extraParams any 
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of filterParam  
		* @param filterParam string 
		*/
		setFilterParam?( filterParam?:string ): void;
		/** [Method] Sets the value of groupParam  
		* @param groupParam string 
		*/
		setGroupParam?( groupParam?:string ): void;
		/** [Method] Sets the value of limitParam  
		* @param limitParam string 
		*/
		setLimitParam?( limitParam?:string ): void;
		/** [Method] Sets the value of noCache  
		* @param noCache bool 
		*/
		setNoCache?( noCache?:bool ): void;
		/** [Method] Sets the value of pageParam  
		* @param pageParam string 
		*/
		setPageParam?( pageParam?:string ): void;
		/** [Method] Sets the value of simpleSortMode  
		* @param simpleSortMode bool 
		*/
		setSimpleSortMode?( simpleSortMode?:bool ): void;
		/** [Method] Sets the value of sortParam  
		* @param sortParam string 
		*/
		setSortParam?( sortParam?:string ): void;
		/** [Method] Sets the value of startParam  
		* @param startParam string 
		*/
		setStartParam?( startParam?:string ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Performs the given update operation  */
		update?(): void;
	}
}
declare module Ext.data {
	export interface IServerProxy extends Ext.data.proxy.IProxy {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Boolean) */
		enablePagingParams?: bool;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: bool;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleSortMode?: bool;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Optional callback function which can be used to clean up after a request has been completed  
		* @param request Ext.data.IRequest The Request object 
		* @param success bool True if the request was successful 
		*/
		afterRequest?( request?:Ext.data.IRequest, success?:bool ): void;
		/** [Method] Creates and returns an Ext data Request object based on the options passed by the Store that this Proxy is attached to  
		* @param operation Ext.data.IOperation The Operation object to execute 
		*/
		buildRequest?( operation?:Ext.data.IOperation ): Ext.data.IRequest;
		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.IRequest The request object 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;
		/** [Method] in a ServerProxy all four CRUD operations are executed in the same manner so we delegate to doRequest in each case */
		create?(): void;
		/** [Method] Performs the given destroy operation  */
		destroy?(): void;
		/** [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest  
		* @param operation Ext.data.IOperation The Ext.data.Operation object 
		* @param callback any The callback function to call when the Operation has completed 
		* @param scope any The scope in which to execute the callback 
		*/
		doRequest?( operation?:Ext.data.IOperation, callback?:any, scope?:any ): void;
		/** [Method] Encodes the array of Ext util Filter objects into a string to be sent in the request url  
		* @param filters Ext.util.IFilter[] The array of Filter objects 
		*/
		encodeFilters?( filters?:Ext.util.IFilter[] ): string;
		/** [Method] Encodes the array of Ext util Sorter objects into a string to be sent in the request url  
		* @param sorters Ext.util.ISorter[] The array of Sorter objects 
		*/
		encodeSorters?( sorters?:Ext.util.ISorter[] ): string;
		/** [Method] Returns the value of api  */
		getApi?(): any;
		/** [Method] Returns the value of cacheString  */
		getCacheString?(): string;
		/** [Method] Returns the value of directionParam  */
		getDirectionParam?(): string;
		/** [Method] Returns the value of enablePagingParams  */
		getEnablePagingParams?(): bool;
		/** [Method] Returns the value of extraParams  */
		getExtraParams?(): any;
		/** [Method] Returns the value of filterParam  */
		getFilterParam?(): string;
		/** [Method] Returns the value of groupParam  */
		getGroupParam?(): string;
		/** [Method] Returns the value of limitParam  */
		getLimitParam?(): string;
		/** [Method] Returns the value of noCache  */
		getNoCache?(): bool;
		/** [Method] Returns the value of pageParam  */
		getPageParam?(): string;
		/** [Method] Returns the value of simpleSortMode  */
		getSimpleSortMode?(): bool;
		/** [Method] Returns the value of sortParam  */
		getSortParam?(): string;
		/** [Method] Returns the value of startParam  */
		getStartParam?(): string;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] This method handles the processing of the response and is usually overridden by subclasses to do additional processing  
		* @param success bool Whether or not this request was successful 
		* @param operation Ext.data.IOperation The operation we made this request for 
		* @param request Ext.data.IRequest The request that was made 
		* @param response any The response that we got 
		* @param callback any The callback to be fired onces the response is processed 
		* @param scope any The scope in which we call the callback 
		*/
		processResponse?( success?:bool, operation?:Ext.data.IOperation, request?:Ext.data.IRequest, response?:any, callback?:any, scope?:any ): void;
		/** [Method] Performs the given read operation  */
		read?(): void;
		/** [Method] Sets the value of api  
		* @param api any 
		*/
		setApi?( api?:any ): void;
		/** [Method] Sets the value of cacheString  
		* @param cacheString string 
		*/
		setCacheString?( cacheString?:string ): void;
		/** [Method] Sets the value of directionParam  
		* @param directionParam string 
		*/
		setDirectionParam?( directionParam?:string ): void;
		/** [Method] Sets the value of enablePagingParams  
		* @param enablePagingParams bool 
		*/
		setEnablePagingParams?( enablePagingParams?:bool ): void;
		/** [Method] Sets a value in the underlying extraParams  
		* @param name string The key for the new value 
		* @param value any The value 
		*/
		setExtraParam?( name?:string, value?:any ): void;
		/** [Method] Sets the value of extraParams  
		* @param extraParams any 
		*/
		setExtraParams?( extraParams?:any ): void;
		/** [Method] Sets the value of filterParam  
		* @param filterParam string 
		*/
		setFilterParam?( filterParam?:string ): void;
		/** [Method] Sets the value of groupParam  
		* @param groupParam string 
		*/
		setGroupParam?( groupParam?:string ): void;
		/** [Method] Sets the value of limitParam  
		* @param limitParam string 
		*/
		setLimitParam?( limitParam?:string ): void;
		/** [Method] Sets the value of noCache  
		* @param noCache bool 
		*/
		setNoCache?( noCache?:bool ): void;
		/** [Method] Sets the value of pageParam  
		* @param pageParam string 
		*/
		setPageParam?( pageParam?:string ): void;
		/** [Method] Sets the value of simpleSortMode  
		* @param simpleSortMode bool 
		*/
		setSimpleSortMode?( simpleSortMode?:bool ): void;
		/** [Method] Sets the value of sortParam  
		* @param sortParam string 
		*/
		setSortParam?( sortParam?:string ): void;
		/** [Method] Sets the value of startParam  
		* @param startParam string 
		*/
		setStartParam?( startParam?:string ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Performs the given update operation  */
		update?(): void;
	}
}
declare module Ext.data.proxy {
	export interface ISessionStorage extends Ext.data.proxy.IWebStorage {
	}
}
declare module Ext.data {
	export interface ISessionStorageProxy extends Ext.data.proxy.IWebStorage {
	}
}
declare module Ext.data.proxy {
	export interface ISql extends Ext.data.proxy.IClient {
		/** [Config Option] (String) */
		database?: string;
		/** [Config Option] (String) */
		table?: string;
		/** [Method] Performs the given create operation  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Performs the given destroy operation  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		destroy?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of columns  */
		getColumns?(): string;
		/** [Method] Returns the value of database  */
		getDatabase?(): string;
		/** [Method] Returns the value of defaultDateFormat  */
		getDefaultDateFormat?(): string;
		/** [Method] Formats the data for each record before sending it to the server  
		* @param record any The record that we are writing to the server. 
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of table  */
		getTable?(): string;
		/** [Method] Returns the value of tableExists  */
		getTableExists?(): bool;
		/** [Method] Returns the value of uniqueIdStrategy  */
		getUniqueIdStrategy?(): bool;
		/** [Method] Performs the given read operation  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of columns  
		* @param columns string 
		*/
		setColumns?( columns?:string ): void;
		/** [Method] Sets the value of database  
		* @param database string 
		*/
		setDatabase?( database?:string ): void;
		/** [Method] Sets the value of defaultDateFormat  
		* @param defaultDateFormat string 
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;
		/** [Method] Sets the value of table  
		* @param table string 
		*/
		setTable?( table?:string ): void;
		/** [Method] Sets the value of tableExists  
		* @param tableExists bool 
		*/
		setTableExists?( tableExists?:bool ): void;
		/** [Method] Sets the value of uniqueIdStrategy  
		* @param uniqueIdStrategy bool 
		*/
		setUniqueIdStrategy?( uniqueIdStrategy?:bool ): void;
		/** [Method] Performs the given update operation  
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data.proxy {
	export interface IWebStorage extends Ext.data.proxy.IClient {
		/** [Config Option] (Boolean) */
		enablePagingParams?: bool;
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		cache?: any;
		/** [Method] Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o  */
		clear?(): void;
		/** [Method] inherit docs 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] inherit 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		destroy?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of defaultDateFormat  */
		getDefaultDateFormat?(): string;
		/** [Method] Returns the value of enablePagingParams  */
		getEnablePagingParams?(): bool;
		/** [Method] Returns the value of id  */
		getId?(): string;
		/** [Method] inherit docs 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of defaultDateFormat  
		* @param defaultDateFormat string 
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;
		/** [Method] Sets the value of enablePagingParams  
		* @param enablePagingParams bool 
		*/
		setEnablePagingParams?( enablePagingParams?:bool ): void;
		/** [Method] Sets the value of id  
		* @param id string 
		*/
		setId?( id?:string ): void;
		/** [Method] Saves the given record in the Proxy  
		* @param record Ext.data.IModel The model instance 
		* @param id string The id to save the record under (defaults to the value of the record's getId() function) 
		*/
		setRecord?( record?:Ext.data.IModel, id?:string ): void;
		/** [Method] inherit docs 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data {
	export interface IWebStorageProxy extends Ext.data.proxy.IClient {
		/** [Config Option] (Boolean) */
		enablePagingParams?: bool;
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		cache?: any;
		/** [Method] Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o  */
		clear?(): void;
		/** [Method] inherit docs 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] inherit 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		destroy?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Returns the value of defaultDateFormat  */
		getDefaultDateFormat?(): string;
		/** [Method] Returns the value of enablePagingParams  */
		getEnablePagingParams?(): bool;
		/** [Method] Returns the value of id  */
		getId?(): string;
		/** [Method] inherit docs 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;
		/** [Method] Sets the value of defaultDateFormat  
		* @param defaultDateFormat string 
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;
		/** [Method] Sets the value of enablePagingParams  
		* @param enablePagingParams bool 
		*/
		setEnablePagingParams?( enablePagingParams?:bool ): void;
		/** [Method] Sets the value of id  
		* @param id string 
		*/
		setId?( id?:string ): void;
		/** [Method] Saves the given record in the Proxy  
		* @param record Ext.data.IModel The model instance 
		* @param id string The id to save the record under (defaults to the value of the record's getId() function) 
		*/
		setRecord?( record?:Ext.data.IModel, id?:string ): void;
		/** [Method] inherit docs 
		* @param operation any 
		* @param callback any 
		* @param scope any 
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;
	}
}
declare module Ext.data.reader {
	export interface IArray extends Ext.data.reader.IJson {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Returns the value of successProperty  */
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty  */
		getTotalProperty?(): any;
		/** [Method] Sets the value of successProperty  
		* @param successProperty any 
		*/
		setSuccessProperty?( successProperty?:any ): void;
		/** [Method] Sets the value of totalProperty  
		* @param totalProperty any 
		*/
		setTotalProperty?( totalProperty?:any ): void;
	}
}
declare module Ext.data {
	export interface IArrayReader extends Ext.data.reader.IJson {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Returns the value of successProperty  */
		getSuccessProperty?(): any;
		/** [Method] Returns the value of totalProperty  */
		getTotalProperty?(): any;
		/** [Method] Sets the value of successProperty  
		* @param successProperty any 
		*/
		setSuccessProperty?( successProperty?:any ): void;
		/** [Method] Sets the value of totalProperty  
		* @param totalProperty any 
		*/
		setTotalProperty?( totalProperty?:any ): void;
	}
}
declare module Ext.data.reader {
	export interface IJson extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: bool;
		/** [Method] Returns the value of record  */
		getRecord?(): string;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it  
		* @param response any 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of useSimpleAccessors  */
		getUseSimpleAccessors?(): bool;
		/** [Method] Sets the value of record  
		* @param record string 
		*/
		setRecord?( record?:string ): void;
		/** [Method] Sets the value of useSimpleAccessors  
		* @param useSimpleAccessors bool 
		*/
		setUseSimpleAccessors?( useSimpleAccessors?:bool ): void;
	}
}
declare module Ext.data {
	export interface IJsonReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: bool;
		/** [Method] Returns the value of record  */
		getRecord?(): string;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it  
		* @param response any 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of useSimpleAccessors  */
		getUseSimpleAccessors?(): bool;
		/** [Method] Sets the value of record  
		* @param record string 
		*/
		setRecord?( record?:string ): void;
		/** [Method] Sets the value of useSimpleAccessors  
		* @param useSimpleAccessors bool 
		*/
		setUseSimpleAccessors?( useSimpleAccessors?:bool ): void;
	}
}
declare module Ext.data.reader {
	export interface IReader extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Boolean) */
		implicitIncludes?: bool;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Property] (Object) */
		metaData?: any;
		/** [Property] (Object) */
		rawData?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of clientIdProperty  */
		getClientIdProperty?(): string;
		/** [Method] Returns the value of idProperty  */
		getIdProperty?(): string;
		/** [Method] Returns the value of implicitIncludes  */
		getImplicitIncludes?(): bool;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of messageProperty  */
		getMessageProperty?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): any;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it  
		* @param response any The response object 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of rootProperty  */
		getRootProperty?(): string;
		/** [Method] Returns the value of successProperty  */
		getSuccessProperty?(): string;
		/** [Method] Returns the value of totalProperty  */
		getTotalProperty?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Reads the given response object  
		* @param response any The response object. This may be either an XMLHttpRequest object or a plain JS object 
		*/
		read?( response?:any ): Ext.data.IResultSet;
		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param data any The raw data object 
		*/
		readRecords?( data?:any ): Ext.data.IResultSet;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty string 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] Sets the value of idProperty  
		* @param idProperty string 
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of implicitIncludes  
		* @param implicitIncludes bool 
		*/
		setImplicitIncludes?( implicitIncludes?:bool ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of messageProperty  
		* @param messageProperty string 
		*/
		setMessageProperty?( messageProperty?:string ): void;
		/** [Method] Sets the value of model  
		* @param model any 
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of rootProperty  
		* @param rootProperty string 
		*/
		setRootProperty?( rootProperty?:string ): void;
		/** [Method] Sets the value of successProperty  
		* @param successProperty string 
		*/
		setSuccessProperty?( successProperty?:string ): void;
		/** [Method] Sets the value of totalProperty  
		* @param totalProperty string 
		*/
		setTotalProperty?( totalProperty?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.data {
	export interface IReader extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Boolean) */
		implicitIncludes?: bool;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Property] (Object) */
		metaData?: any;
		/** [Property] (Object) */
		rawData?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of clientIdProperty  */
		getClientIdProperty?(): string;
		/** [Method] Returns the value of idProperty  */
		getIdProperty?(): string;
		/** [Method] Returns the value of implicitIncludes  */
		getImplicitIncludes?(): bool;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of messageProperty  */
		getMessageProperty?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): any;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it  
		* @param response any The response object 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of rootProperty  */
		getRootProperty?(): string;
		/** [Method] Returns the value of successProperty  */
		getSuccessProperty?(): string;
		/** [Method] Returns the value of totalProperty  */
		getTotalProperty?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Reads the given response object  
		* @param response any The response object. This may be either an XMLHttpRequest object or a plain JS object 
		*/
		read?( response?:any ): Ext.data.IResultSet;
		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param data any The raw data object 
		*/
		readRecords?( data?:any ): Ext.data.IResultSet;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty string 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] Sets the value of idProperty  
		* @param idProperty string 
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of implicitIncludes  
		* @param implicitIncludes bool 
		*/
		setImplicitIncludes?( implicitIncludes?:bool ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of messageProperty  
		* @param messageProperty string 
		*/
		setMessageProperty?( messageProperty?:string ): void;
		/** [Method] Sets the value of model  
		* @param model any 
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of rootProperty  
		* @param rootProperty string 
		*/
		setRootProperty?( rootProperty?:string ): void;
		/** [Method] Sets the value of successProperty  
		* @param successProperty string 
		*/
		setSuccessProperty?( successProperty?:string ): void;
		/** [Method] Sets the value of totalProperty  
		* @param totalProperty string 
		*/
		setTotalProperty?( totalProperty?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.data {
	export interface IDataReader extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (Boolean) */
		implicitIncludes?: bool;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Property] (Object) */
		metaData?: any;
		/** [Property] (Object) */
		rawData?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of clientIdProperty  */
		getClientIdProperty?(): string;
		/** [Method] Returns the value of idProperty  */
		getIdProperty?(): string;
		/** [Method] Returns the value of implicitIncludes  */
		getImplicitIncludes?(): bool;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of messageProperty  */
		getMessageProperty?(): string;
		/** [Method] Returns the value of model  */
		getModel?(): any;
		/** [Method] Takes a raw response object as passed to this read and returns the useful data segment of it  
		* @param response any The response object 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Returns the value of rootProperty  */
		getRootProperty?(): string;
		/** [Method] Returns the value of successProperty  */
		getSuccessProperty?(): string;
		/** [Method] Returns the value of totalProperty  */
		getTotalProperty?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Reads the given response object  
		* @param response any The response object. This may be either an XMLHttpRequest object or a plain JS object 
		*/
		read?( response?:any ): Ext.data.IResultSet;
		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param data any The raw data object 
		*/
		readRecords?( data?:any ): Ext.data.IResultSet;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty string 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;
		/** [Method] Sets the value of idProperty  
		* @param idProperty string 
		*/
		setIdProperty?( idProperty?:string ): void;
		/** [Method] Sets the value of implicitIncludes  
		* @param implicitIncludes bool 
		*/
		setImplicitIncludes?( implicitIncludes?:bool ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of messageProperty  
		* @param messageProperty string 
		*/
		setMessageProperty?( messageProperty?:string ): void;
		/** [Method] Sets the value of model  
		* @param model any 
		*/
		setModel?( model?:any ): void;
		/** [Method] Sets the value of rootProperty  
		* @param rootProperty string 
		*/
		setRootProperty?( rootProperty?:string ): void;
		/** [Method] Sets the value of successProperty  
		* @param successProperty string 
		*/
		setSuccessProperty?( successProperty?:string ): void;
		/** [Method] Sets the value of totalProperty  
		* @param totalProperty string 
		*/
		setTotalProperty?( totalProperty?:string ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.data.reader {
	export interface IXml extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Normalizes the data object  
		* @param data any The raw data object. 
		*/
		getData?( data?:any ): any;
		/** [Method] Returns the value of record  */
		getRecord?(): string;
		/** [Method] inherit docs 
		* @param response any 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Parses an XML document and returns a ResultSet containing the model instances  
		* @param doc any Parsed XML document. 
		*/
		readRecords?( doc?:any ): Ext.data.IResultSet;
		/** [Method] Sets the value of record  
		* @param record string 
		*/
		setRecord?( record?:string ): void;
	}
}
declare module Ext.data {
	export interface IXmlReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Normalizes the data object  
		* @param data any The raw data object. 
		*/
		getData?( data?:any ): any;
		/** [Method] Returns the value of record  */
		getRecord?(): string;
		/** [Method] inherit docs 
		* @param response any 
		*/
		getResponseData?( response?:any ): any;
		/** [Method] Parses an XML document and returns a ResultSet containing the model instances  
		* @param doc any Parsed XML document. 
		*/
		readRecords?( doc?:any ): Ext.data.IResultSet;
		/** [Method] Sets the value of record  
		* @param record string 
		*/
		setRecord?( record?:string ): void;
	}
}
declare module Ext.data {
	export interface IRequest extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: bool;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Object) */
		jsonData?: any;
		/** [Config Option] (Ext.data.JsonP) */
		jsonp?: Ext.data.IJsonP;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Ext.data.Operation) */
		operation?: Ext.data.IOperation;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: bool;
		/** [Config Option] (Object) */
		xmlData?: any;
		/** [Method] Returns the value of action  */
		getAction?(): string;
		/** [Method] Returns the value of args  */
		getArgs?(): any;
		/** [Method] Returns the value of callback  */
		getCallback?(): any;
		/** [Method] Returns the value of callbackKey  */
		getCallbackKey?(): string;
		/** [Method] Returns the value of directFn  */
		getDirectFn?(): any;
		/** [Method] Returns the value of disableCaching  */
		getDisableCaching?(): bool;
		/** [Method] Returns the value of headers  */
		getHeaders?(): any;
		/** [Method] Returns the value of jsonData  */
		getJsonData?(): any;
		/** [Method] Returns the value of method  */
		getMethod?(): string;
		/** [Method] Returns the value of operation  */
		getOperation?(): Ext.data.IOperation;
		/** [Method] Returns the value of params  */
		getParams?(): any;
		/** [Method] Returns the value of password  */
		getPassword?(): string;
		/** [Method] Returns the value of proxy  */
		getProxy?(): Ext.data.proxy.IProxy;
		/** [Method] Returns the value of records  */
		getRecords?(): any;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns the value of username  */
		getUsername?(): string;
		/** [Method] Returns the value of withCredentials  */
		getWithCredentials?(): bool;
		/** [Method] Returns the value of xmlData  */
		getXmlData?(): any;
		/** [Method] Sets the value of action  
		* @param action string 
		*/
		setAction?( action?:string ): void;
		/** [Method] Sets the value of args  
		* @param args any 
		*/
		setArgs?( args?:any ): void;
		/** [Method] Sets the value of callback  
		* @param callback any 
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of callbackKey  
		* @param callbackKey string 
		*/
		setCallbackKey?( callbackKey?:string ): void;
		/** [Method] Sets the value of directFn  
		* @param directFn any 
		*/
		setDirectFn?( directFn?:any ): void;
		/** [Method] Sets the value of disableCaching  
		* @param disableCaching bool 
		*/
		setDisableCaching?( disableCaching?:bool ): void;
		/** [Method] Sets the value of headers  
		* @param headers any 
		*/
		setHeaders?( headers?:any ): void;
		/** [Method] Sets the value of jsonData  
		* @param jsonData any 
		*/
		setJsonData?( jsonData?:any ): void;
		/** [Method] Sets the value of method  
		* @param method string 
		*/
		setMethod?( method?:string ): void;
		/** [Method] Sets the value of operation  
		* @param operation Ext.data.IOperation 
		*/
		setOperation?( operation?:Ext.data.IOperation ): void;
		/** [Method] Sets the value of params  
		* @param params any 
		*/
		setParams?( params?:any ): void;
		/** [Method] Sets the value of password  
		* @param password string 
		*/
		setPassword?( password?:string ): void;
		/** [Method] Sets the value of proxy  
		* @param proxy Ext.data.proxy.IProxy 
		*/
		setProxy?( proxy?:Ext.data.proxy.IProxy ): void;
		/** [Method] Sets the value of records  
		* @param records any 
		*/
		setRecords?( records?:any ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the value of username  
		* @param username string 
		*/
		setUsername?( username?:string ): void;
		/** [Method] Sets the value of withCredentials  
		* @param withCredentials bool 
		*/
		setWithCredentials?( withCredentials?:bool ): void;
		/** [Method] Sets the value of xmlData  
		* @param xmlData any 
		*/
		setXmlData?( xmlData?:any ): void;
	}
}
declare module Ext.data {
	export interface IResultSet extends Ext.IBase {
		/** [Config Option] (Number) */
		count?: number;
		/** [Config Option] (Boolean) */
		loaded?: bool;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (Ext.data.Model[]) */
		records?: Ext.data.IModel[];
		/** [Config Option] (Boolean) */
		success?: bool;
		/** [Config Option] (Number) */
		total?: number;
		/** [Method] Returns the value of count  */
		getCount?(): number;
		/** [Method] Returns the value of loaded  */
		getLoaded?(): bool;
		/** [Method] Returns the value of message  */
		getMessage?(): string;
		/** [Method] Returns the value of records  */
		getRecords?(): Ext.data.IModel[];
		/** [Method] Returns the value of success  */
		getSuccess?(): bool;
		/** [Method] Returns the value of total  */
		getTotal?(): number;
		/** [Method] Sets the value of count  
		* @param count number 
		*/
		setCount?( count?:number ): void;
		/** [Method] Sets the value of loaded  
		* @param loaded bool 
		*/
		setLoaded?( loaded?:bool ): void;
		/** [Method] Sets the value of message  
		* @param message string 
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of records  
		* @param records Ext.data.IModel[] 
		*/
		setRecords?( records?:Ext.data.IModel[] ): void;
		/** [Method] Sets the value of success  
		* @param success bool 
		*/
		setSuccess?( success?:bool ): void;
		/** [Method] Sets the value of total  
		* @param total number 
		*/
		setTotal?( total?:number ): void;
	}
}
declare module Ext.data {
	export interface ISortTypes extends Ext.IBase {
	}
	export class SortTypes {
		/** [Method] Date sorting  
		* @param value any The value being converted. 
		*/
		static asDate( value?:any ): number;
		/** [Method] Float sorting  
		* @param value any The value being converted. 
		*/
		static asFloat( value?:any ): number;
		/** [Method] Integer sorting  
		* @param value any The value being converted. 
		*/
		static asInt( value?:any ): number;
		/** [Method] Strips all HTML tags to sort on text only  
		* @param value any The value being converted. 
		*/
		static asText( value?:any ): string;
		/** [Method] Case insensitive string  
		* @param value any The value being converted. 
		*/
		static asUCString( value?:any ): string;
		/** [Method] Strips all HTML tags to sort on text only  case insensitive  
		* @param value any The value being converted. 
		*/
		static asUCText( value?:any ): string;
		/** [Method] Default sort that does nothing  
		* @param value any The value being converted. 
		*/
		static none( value?:any ): any;
	}
}
declare module Ext.data {
	export interface IStore extends Ext.IEvented {
		/** [Config Option] (Boolean/Object) */
		autoLoad?: any;
		/** [Config Option] (Boolean) */
		autoSync?: bool;
		/** [Config Option] (Boolean) */
		clearOnPageLoad?: bool;
		/** [Config Option] (Object[]/Ext.data.Model[]) */
		data?: any;
		/** [Config Option] (Boolean) */
		destroyRemovedRecords?: bool;
		/** [Config Option] (Object[]) */
		fields?: any[];
		/** [Config Option] (Object[]) */
		filters?: any[];
		/** [Config Option] (Function) */
		getGroupString?: any;
		/** [Config Option] (String) */
		groupDir?: string;
		/** [Config Option] (String) */
		groupField?: string;
		/** [Config Option] (Object) */
		grouper?: any;
		/** [Config Option] (String) */
		model?: string;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		remoteFilter?: bool;
		/** [Config Option] (Boolean) */
		remoteGroup?: bool;
		/** [Config Option] (Boolean) */
		remoteSort?: bool;
		/** [Config Option] (Object[]) */
		sorters?: any[];
		/** [Config Option] (String) */
		storeId?: string;
		/** [Config Option] (Boolean) */
		syncRemovedRecords?: bool;
		/** [Config Option] (Number) */
		totalCount?: number;
		/** [Property] (Number) */
		currentPage?: number;
		/** [Method] Adds Model instance to the Store  
		* @param model any An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments. 
		*/
		add?( model?:any ): any;
		add?( model?:Ext.data.IModel[] ): Ext.data.IModel[];
		add?( model?:Ext.data.IModel ): Ext.data.IModel[];
		/** [Method] We are using applyData so that we can return nothing and prevent the this data property to be overridden  
		* @param data any 
		*/
		applyData?( data?:any ): void;
		/** [Method] Gets the average value in the store  
		* @param field string The field in each record you want to get the average for. 
		*/
		average?( field?:string ): number;
		/** [Method] Reverts to a view of the Record cache with no filtering applied  
		* @param suppressEvent bool true to clear silently without firing the refresh event. 
		*/
		clearFilter?( suppressEvent?:bool ): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Calls the specified function for each of the Records in the cache  
		* @param fn any The function to call. Returning false aborts and exits the iteration. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current Record in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Filters the loaded set of records by a given set of filters  
		* @param filters any The set of filters to apply to the data. These are stored internally on the store, but the filtering itself is done on the Store's MixedCollection. See MixedCollection's filter method for filter syntax. Alternatively, pass in a property string. 
		* @param value string value to filter by (only if using a property string as the first argument). 
		* @param anyMatch bool true to allow any match, false to anchor regex beginning with ^. 
		* @param caseSensitive bool true to make the filtering regex case sensitive. 
		*/
		filter?( filters?:any, value?:string, anyMatch?:bool, caseSensitive?:bool ): void;
		/** [Method] Filter by a function  
		* @param fn any The function to be called. It will be passed the following parameters: 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this Store. 
		*/
		filterBy?( fn?:any, scope?:any ): void;
		/** [Method] Finds the index of the first matching Record in this store by a specific field value  
		* @param fieldName any The name of the Record field to test. 
		* @param value any Either a string that the field value should begin with, or a RegExp to test against the field. 
		* @param startIndex any The index to start searching at. 
		* @param anyMatch any true to match any part of the string, not just the beginning. 
		* @param caseSensitive any true for case sensitive comparison. 
		* @param exactMatch any true to force exact match (^ and $ characters added to the regex). 
		*/
		find?( fieldName?:any, value?:any, startIndex?:any, anyMatch?:any, caseSensitive?:any, exactMatch?:any ): any;
		find?( fieldName?:string, value?:string, startIndex?:number, anyMatch?:bool, caseSensitive?:bool, exactMatch?:bool ): number;
		find?( fieldName?:string, value?:RegExp, startIndex?:number, anyMatch?:bool, caseSensitive?:bool, exactMatch?:bool ): number;
		/** [Method] Find the index of the first matching Record in this Store by a function  
		* @param fn any The function to be called. It will be passed the following parameters: 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this Store. 
		* @param startIndex number The index to start searching at. 
		*/
		findBy?( fn?:any, scope?:any, startIndex?:number ): number;
		/** [Method] Finds the index of the first matching Record in this store by a specific field value  
		* @param fieldName string The name of the Record field to test. 
		* @param value any The value to match the field against. 
		* @param startIndex number The index to start searching at. 
		*/
		findExact?( fieldName?:string, value?:any, startIndex?:number ): number;
		/** [Method] Finds the first matching Record in this store by a specific field value  
		* @param fieldName any The name of the Record field to test. 
		* @param value any Either a string that the field value should begin with, or a RegExp to test against the field. 
		* @param startIndex any The index to start searching at. 
		* @param anyMatch any true to match any part of the string, not just the beginning. 
		* @param caseSensitive any true for case sensitive comparison. 
		* @param exactMatch any true to force exact match (^ and $ characters added to the regex). 
		*/
		findRecord?( fieldName?:any, value?:any, startIndex?:any, anyMatch?:any, caseSensitive?:any, exactMatch?:any ): any;
		findRecord?( fieldName?:string, value?:string, startIndex?:number, anyMatch?:bool, caseSensitive?:bool, exactMatch?:bool ): Ext.data.IModel;
		findRecord?( fieldName?:string, value?:RegExp, startIndex?:number, anyMatch?:bool, caseSensitive?:bool, exactMatch?:bool ): Ext.data.IModel;
		/** [Method] Convenience function for getting the first model instance in the store  */
		first?(): Ext.data.IModel;
		/** [Method] Convenience function for getting the first model instance in the store  */
		first?(): void;
		/** [Method] Gets the number of all cached records including the ones currently filtered  */
		getAllCount?(): number;
		/** [Method] Get the Record at the specified index  
		* @param index number The index of the Record to find. 
		*/
		getAt?( index?:number ): Ext.data.IModel;
		/** [Method] Get the Record at the specified index  
		* @param index number The index of the Record to find. 
		*/
		getAt?( index?:number ): void;
		/** [Method] Returns the value of autoLoad  */
		getAutoLoad?(): any;
		/** [Method] Returns the value of autoSync  */
		getAutoSync?(): bool;
		/** [Method] Get the Record with the specified id  
		* @param id string The id of the Record to find. 
		*/
		getById?( id?:string ): Ext.data.IModel;
		/** [Method] Get the Record with the specified id  
		* @param id string The id of the Record to find. 
		*/
		getById?( id?:string ): void;
		/** [Method] Returns the value of clearOnPageLoad  */
		getClearOnPageLoad?(): bool;
		/** [Method] Gets the number of cached records  */
		getCount?(): number;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Returns the value of destroyRemovedRecords  */
		getDestroyRemovedRecords?(): bool;
		/** [Method] Returns the value of fields  */
		getFields?(): any[];
		/** [Method] Returns the value of getGroupString  */
		getGetGroupString?(): any;
		/** [Method] Returns the value of groupDir  */
		getGroupDir?(): string;
		/** [Method] Returns the value of groupField  */
		getGroupField?(): string;
		/** [Method] Returns the value of grouper  */
		getGrouper?(): any;
		/** [Method] Returns an array containing the result of applying the grouper to the records in this store  
		* @param groupName string Pass in an optional groupName argument to access a specific group as defined by grouper. 
		*/
		getGroups?( groupName?:string ): any;
		/** [Method] Returns the value of model  */
		getModel?(): string;
		/** [Method] Returns the value of modelDefaults  */
		getModelDefaults?(): any;
		/** [Method] Returns all Model instances that are either currently a phantom e g  */
		getNewRecords?(): Ext.data.IModel[];
		/** [Method] Returns the value of pageSize  */
		getPageSize?(): number;
		/** [Method] Returns the value of proxy  */
		getProxy?(): any;
		/** [Method] Returns a range of Records between specified indices  
		* @param startIndex number The starting index. 
		* @param endIndex number The ending index (defaults to the last Record in the Store). 
		*/
		getRange?( startIndex?:number, endIndex?:number ): Ext.data.IModel[];
		/** [Method] Returns the value of remoteFilter  */
		getRemoteFilter?(): bool;
		/** [Method] Returns the value of remoteGroup  */
		getRemoteGroup?(): bool;
		/** [Method] Returns the value of remoteSort  */
		getRemoteSort?(): bool;
		/** [Method] Returns any records that have been removed from the store but not yet destroyed on the proxy  */
		getRemovedRecords?(): Ext.data.IModel[];
		/** [Method] Returns the value of storeId  */
		getStoreId?(): string;
		/** [Method] Returns the value of syncRemovedRecords  */
		getSyncRemovedRecords?(): bool;
		/** [Method] Returns the value of totalCount  */
		getTotalCount?(): number;
		/** [Method] Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy  */
		getUpdatedRecords?(): Ext.data.IModel[];
		/** [Method] Get the index within the cache of the passed Record  
		* @param record Ext.data.IModel The Ext.data.Model object to find. 
		*/
		indexOf?( record?:Ext.data.IModel ): number;
		/** [Method] Get the index within the cache of the Record with the passed id  
		* @param id string The id of the Record to find. 
		*/
		indexOfId?( id?:string ): number;
		/** [Method] Inserts Model instances into the Store at the given index and fires the add event  
		* @param index number The start index at which to insert the passed Records. 
		* @param records Ext.data.IModel[] An Array of Ext.data.Model objects to add to the cache. 
		*/
		insert?( index?:number, records?:Ext.data.IModel[] ): any;
		/** [Method] Returns true if the Store is set to autoLoad or is a type which loads upon instantiation  */
		isAutoLoading?(): bool;
		/** [Method] Returns true if this store is currently filtered  */
		isFiltered?(): bool;
		/** [Method] This method tells you if this store has a grouper defined on it  */
		isGrouped?(): bool;
		/** [Method] Returns true if the Store has been loaded  */
		isLoaded?(): bool;
		/** [Method] Returns true if the Store is currently performing a load operation  */
		isLoading?(): bool;
		/** [Method] Returns true if this store is currently sorted  */
		isSorted?(): bool;
		/** [Method] Convenience function for getting the last model instance in the store  */
		last?(): Ext.data.IModel;
		/** [Method] Convenience function for getting the last model instance in the store  */
		last?(): void;
		/** [Method] Loads data into the Store via the configured proxy  
		* @param options any config object, passed into the Ext.data.Operation object before loading. 
		* @param scope any Scope for the function. 
		*/
		load?( options?:any, scope?:any ): any;
		/** [Method] Loads an array of data straight into the Store  
		* @param data any Array of data to load. Any non-model instances will be cast into model instances first. 
		* @param append bool true to add the records to the existing records in the store, false to remove the old ones first. 
		*/
		loadData?( data?:any, append?:bool ): void;
		/** [Method] Loads a given page of data by setting the start and limit values appropriately  
		* @param page number The number of the page to load. 
		* @param options any See options for load. 
		* @param scope any 
		*/
		loadPage?( page?:number, options?:any, scope?:any ): void;
		/** [Method] Adds Model instance to the Store  
		* @param model any An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments. 
		*/
		loadRecords?( model?:any ): any;
		loadRecords?( model?:Ext.data.IModel[] ): Ext.data.IModel[];
		loadRecords?( model?:Ext.data.IModel ): Ext.data.IModel[];
		/** [Method] Gets the maximum value in the store  
		* @param field string The field in each record. 
		*/
		max?( field?:string ): any;
		/** [Method] Gets the minimum value in the store  
		* @param field string The field in each record. 
		*/
		min?( field?:string ): any;
		/** [Method] Loads the next page in the current data set  
		* @param options any See options for load. 
		*/
		nextPage?( options?:any ): void;
		/** [Method] Loads the previous page in the current data set  
		* @param options any See options for load. 
		*/
		previousPage?( options?:any ): void;
		/** [Method] Query the cached records in this Store using a filtering function  
		* @param fn any The function to be called. It will be passed the following parameters: 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this Store. 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Removes the given record from the Store firing the removerecords event passing all the instances that are removed  
		* @param records any Model instance or array of instances to remove. 
		*/
		remove?( records?:any ): any;
		remove?( records?:Ext.data.IModel ): void;
		remove?( records?:Ext.data.IModel[] ): void;
		/** [Method] Remove all items from the store  
		* @param silent bool Prevent the clear event from being fired. 
		*/
		removeAll?( silent?:bool ): void;
		/** [Method] Removes the model instance at the given index  
		* @param index number The record index. 
		*/
		removeAt?( index?:number ): void;
		/** [Method] Sets the value of autoLoad  
		* @param autoLoad any 
		*/
		setAutoLoad?( autoLoad?:any ): void;
		/** [Method] Sets the value of autoSync  
		* @param autoSync bool 
		*/
		setAutoSync?( autoSync?:bool ): void;
		/** [Method] Sets the value of clearOnPageLoad  
		* @param clearOnPageLoad bool 
		*/
		setClearOnPageLoad?( clearOnPageLoad?:bool ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of destroyRemovedRecords  
		* @param destroyRemovedRecords bool 
		*/
		setDestroyRemovedRecords?( destroyRemovedRecords?:bool ): void;
		/** [Method] Sets the value of fields  
		* @param fields any[] 
		*/
		setFields?( fields?:any[] ): void;
		/** [Method] Sets the value of filters  
		* @param filters any[] 
		*/
		setFilters?( filters?:any[] ): void;
		/** [Method] Sets the value of getGroupString  
		* @param getGroupString any 
		*/
		setGetGroupString?( getGroupString?:any ): void;
		/** [Method] Sets the value of groupDir  
		* @param groupDir string 
		*/
		setGroupDir?( groupDir?:string ): void;
		/** [Method] Sets the value of groupField  
		* @param groupField string 
		*/
		setGroupField?( groupField?:string ): void;
		/** [Method] Sets the value of grouper  
		* @param grouper any 
		*/
		setGrouper?( grouper?:any ): void;
		/** [Method] Sets the value of model  
		* @param model string 
		*/
		setModel?( model?:string ): void;
		/** [Method] Sets the value of modelDefaults  
		* @param modelDefaults any 
		*/
		setModelDefaults?( modelDefaults?:any ): void;
		/** [Method] Sets the value of pageSize  
		* @param pageSize number 
		*/
		setPageSize?( pageSize?:number ): void;
		/** [Method] Sets the value of proxy  
		* @param proxy any 
		*/
		setProxy?( proxy?:any ): void;
		/** [Method] Sets the value of remoteFilter  
		* @param remoteFilter bool 
		*/
		setRemoteFilter?( remoteFilter?:bool ): void;
		/** [Method] Sets the value of remoteGroup  
		* @param remoteGroup bool 
		*/
		setRemoteGroup?( remoteGroup?:bool ): void;
		/** [Method] Sets the value of remoteSort  
		* @param remoteSort bool 
		*/
		setRemoteSort?( remoteSort?:bool ): void;
		/** [Method] Sets the value of sorters  
		* @param sorters any[] 
		*/
		setSorters?( sorters?:any[] ): void;
		/** [Method] Sets the value of storeId  
		* @param storeId string 
		*/
		setStoreId?( storeId?:string ): void;
		/** [Method] Sets the value of syncRemovedRecords  
		* @param syncRemovedRecords bool 
		*/
		setSyncRemovedRecords?( syncRemovedRecords?:bool ): void;
		/** [Method] Sets the value of totalCount  
		* @param totalCount number 
		*/
		setTotalCount?( totalCount?:number ): void;
		/** [Method] Sorts the data in the Store by one or more of its properties  
		* @param sorters any Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param defaultDirection any The default overall direction to sort the data by. 
		* @param where any This can be either 'prepend' or 'append'. If you leave this undefined it will clear the current sorters. 
		*/
		sort?( sorters?:any, defaultDirection?:any, where?:any ): any;
		sort?( sorters?:string, defaultDirection?:string, where?:string ): void;
		sort?( sorters?:Ext.util.ISorter[], defaultDirection?:string, where?:string ): void;
		/** [Method] Sums the value of property for each record between start and end and returns the result  
		* @param field string The field in each record. 
		*/
		sum?( field?:string ): number;
		/** [Method] Synchronizes the Store with its Proxy  */
		sync?(): any;
	}
}
declare module Ext.data {
	export interface IStoreManager extends Ext.util.ICollection {
	}
	export class StoreManager {
		/** [Method] getKey implementation for MixedCollection 
		* @param o any 
		*/
		static getKey( o?:any ): any;
		/** [Method] Gets a registered Store by id  
		* @param store any The id of the Store, or a Store instance, or a store configuration. 
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.IStore Any number of Store instances. 
		*/
		static register( stores?:Ext.data.IStore ): void;
		/** [Method] Unregisters one or more Stores with the StoreManager  
		* @param stores any Any number of Store instances or ID-s. 
		*/
		static unregister( stores?:any ): void;
	}
}
declare module Ext {
	export interface IStoreMgr extends Ext.util.ICollection {
	}
	export class StoreMgr {
		/** [Method] getKey implementation for MixedCollection 
		* @param o any 
		*/
		static getKey( o?:any ): any;
		/** [Method] Gets a registered Store by id  
		* @param store any The id of the Store, or a Store instance, or a store configuration. 
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.IStore Any number of Store instances. 
		*/
		static register( stores?:Ext.data.IStore ): void;
		/** [Method] Unregisters one or more Stores with the StoreManager  
		* @param stores any Any number of Store instances or ID-s. 
		*/
		static unregister( stores?:any ): void;
	}
}
declare module Ext.data {
	export interface IStoreMgr extends Ext.util.ICollection {
	}
	export class StoreMgr {
		/** [Method] getKey implementation for MixedCollection 
		* @param o any 
		*/
		static getKey( o?:any ): any;
		/** [Method] Gets a registered Store by id  
		* @param store any The id of the Store, or a Store instance, or a store configuration. 
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.IStore Any number of Store instances. 
		*/
		static register( stores?:Ext.data.IStore ): void;
		/** [Method] Unregisters one or more Stores with the StoreManager  
		* @param stores any Any number of Store instances or ID-s. 
		*/
		static unregister( stores?:any ): void;
	}
}
declare module Ext {
	export interface IStoreManager extends Ext.util.ICollection {
	}
	export class StoreManager {
		/** [Method] getKey implementation for MixedCollection 
		* @param o any 
		*/
		static getKey( o?:any ): any;
		/** [Method] Gets a registered Store by id  
		* @param store any The id of the Store, or a Store instance, or a store configuration. 
		*/
		static lookup( store?:any ): Ext.data.IStore;
		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.IStore Any number of Store instances. 
		*/
		static register( stores?:Ext.data.IStore ): void;
		/** [Method] Unregisters one or more Stores with the StoreManager  
		* @param stores any Any number of Store instances or ID-s. 
		*/
		static unregister( stores?:any ): void;
	}
}
declare module Ext.data {
	export interface ITreeStore extends Ext.data.INodeStore {
		/** [Config Option] (Boolean) */
		clearOnLoad?: bool;
		/** [Config Option] (String) */
		defaultRootId?: string;
		/** [Config Option] (String) */
		defaultRootProperty?: string;
		/** [Config Option] (String) */
		nodeParam?: string;
		/** [Config Option] (Ext.data.Model/Ext.data.NodeInterface/Object) */
		root?: any;
		/** [Method] Returns the value of clearOnLoad  */
		getClearOnLoad?(): bool;
		/** [Method] Returns the value of defaultRootId  */
		getDefaultRootId?(): string;
		/** [Method] Returns the value of defaultRootProperty  */
		getDefaultRootProperty?(): string;
		/** [Method] Returns the record node by id 
		* @param id any 
		*/
		getNodeById?( id?:any ): Ext.data.INodeInterface;
		/** [Method] Returns the value of nodeParam  */
		getNodeParam?(): string;
		/** [Method] Returns the value of root  */
		getRoot?(): any;
		/** [Method] Returns the root node for this tree  
		* @param node any 
		*/
		getRootNode?( node?:any ): Ext.data.IModel;
		/** [Method] Loads the Store using its configured proxy  
		* @param options any config object. This is passed into the Operation object that is created and then sent to the proxy's Ext.data.proxy.Proxy.read function. The options can also contain a node, which indicates which node is to be loaded. If not specified, it will default to the root node. 
		*/
		load?( options?:any ): any;
		/** [Method] Called internally when a Proxy has completed a load request  
		* @param operation any 
		*/
		onProxyLoad?( operation?:any ): void;
		/** [Method] Remove all items from the store  
		* @param silent bool Prevent the clear event from being fired. 
		*/
		removeAll?( silent?:bool ): void;
		/** [Method] Sets the value of clearOnLoad  
		* @param clearOnLoad bool 
		*/
		setClearOnLoad?( clearOnLoad?:bool ): void;
		/** [Method] Sets the value of defaultRootId  
		* @param defaultRootId string 
		*/
		setDefaultRootId?( defaultRootId?:string ): void;
		/** [Method] Sets the value of defaultRootProperty  
		* @param defaultRootProperty string 
		*/
		setDefaultRootProperty?( defaultRootProperty?:string ): void;
		/** [Method] Sets the value of nodeParam  
		* @param nodeParam string 
		*/
		setNodeParam?( nodeParam?:string ): void;
		/** [Method] Sets the value of root  
		* @param root any 
		*/
		setRoot?( root?:any ): void;
		/** [Method] Sets the root node for this tree  
		* @param node Ext.data.IModel 
		*/
		setRootNode?( node?:Ext.data.IModel ): Ext.data.IModel;
	}
}
declare module Ext.data {
	export interface ITypes extends Ext.IBase {
	}
	export class Types {
	}
}
declare module Ext.data {
	export interface IValidations extends Ext.IBase {
	}
	export class Validations {
		/** [Method]  
		* @param config any 
		*/
		constructor( config?:any );
		/** [Method] Validates that an email string is in the correct format  
		* @param config any Config object. 
		* @param email string The email address. 
		*/
		static email( config?:any, email?:string ): bool;
		/** [Method] Validates that the given value is present in the configured list  
		* @param config any Config object. 
		* @param value string The value to validate. 
		*/
		static exclusion( config?:any, value?:string ): bool;
		/** [Method] Returns true if the given value passes validation against the configured matcher regex  
		* @param config any Config object. 
		* @param value string The value to validate. 
		*/
		static format( config?:any, value?:string ): bool;
		/** [Method] Returns the configured error message for any of the validation types  
		* @param type string The type of validation you want to get the error message for. 
		*/
		static getMessage( type?:string ): any;
		/** [Method] Validates that the given value is present in the configured list  
		* @param config any Config object. 
		* @param value string The value to validate. 
		*/
		static inclusion( config?:any, value?:string ): bool;
		/** [Method] Returns true if the given value is between the configured min and max values  
		* @param config any Config object. 
		* @param value string The value to validate. 
		*/
		static length( config?:any, value?:string ): bool;
		/** [Method] Validates that the given value is present  
		* @param config any Config object. 
		* @param value any The value to validate. 
		*/
		static presence( config?:any, value?:any ): bool;
	}
}
declare module Ext.data.writer {
	export interface IJson extends Ext.data.writer.IWriter {
		/** [Config Option] (Boolean) */
		allowSingle?: bool;
		/** [Config Option] (Boolean) */
		encode?: bool;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Returns the value of allowSingle  */
		getAllowSingle?(): bool;
		/** [Method] Returns the value of encode  */
		getEncode?(): bool;
		/** [Method] Returns the value of encodeRequest  */
		getEncodeRequest?(): bool;
		/** [Method] Returns the value of rootProperty  */
		getRootProperty?(): string;
		/** [Method] Sets the value of allowSingle  
		* @param allowSingle bool 
		*/
		setAllowSingle?( allowSingle?:bool ): void;
		/** [Method] Sets the value of encode  
		* @param encode bool 
		*/
		setEncode?( encode?:bool ): void;
		/** [Method] Sets the value of encodeRequest  
		* @param encodeRequest bool 
		*/
		setEncodeRequest?( encodeRequest?:bool ): void;
		/** [Method] Sets the value of rootProperty  
		* @param rootProperty string 
		*/
		setRootProperty?( rootProperty?:string ): void;
	}
}
declare module Ext.data {
	export interface IJsonWriter extends Ext.data.writer.IWriter {
		/** [Config Option] (Boolean) */
		allowSingle?: bool;
		/** [Config Option] (Boolean) */
		encode?: bool;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Returns the value of allowSingle  */
		getAllowSingle?(): bool;
		/** [Method] Returns the value of encode  */
		getEncode?(): bool;
		/** [Method] Returns the value of encodeRequest  */
		getEncodeRequest?(): bool;
		/** [Method] Returns the value of rootProperty  */
		getRootProperty?(): string;
		/** [Method] Sets the value of allowSingle  
		* @param allowSingle bool 
		*/
		setAllowSingle?( allowSingle?:bool ): void;
		/** [Method] Sets the value of encode  
		* @param encode bool 
		*/
		setEncode?( encode?:bool ): void;
		/** [Method] Sets the value of encodeRequest  
		* @param encodeRequest bool 
		*/
		setEncodeRequest?( encodeRequest?:bool ): void;
		/** [Method] Sets the value of rootProperty  
		* @param rootProperty string 
		*/
		setRootProperty?( rootProperty?:string ): void;
	}
}
declare module Ext.data.writer {
	export interface IWriter extends Ext.IBase {
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Boolean) */
		writeAllFields?: bool;
		/** [Method] Returns the value of nameProperty  */
		getNameProperty?(): string;
		/** [Method] Formats the data for each record before sending it to the server  
		* @param record any The record that we are writing to the server. 
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of writeAllFields  */
		getWriteAllFields?(): bool;
		/** [Method] Sets the value of nameProperty  
		* @param nameProperty string 
		*/
		setNameProperty?( nameProperty?:string ): void;
		/** [Method] Sets the value of writeAllFields  
		* @param writeAllFields bool 
		*/
		setWriteAllFields?( writeAllFields?:bool ): void;
		/** [Method] Prepares a Proxy s Ext data Request object  
		* @param request Ext.data.IRequest The request object. 
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;
	}
}
declare module Ext.data {
	export interface IDataWriter extends Ext.IBase {
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Boolean) */
		writeAllFields?: bool;
		/** [Method] Returns the value of nameProperty  */
		getNameProperty?(): string;
		/** [Method] Formats the data for each record before sending it to the server  
		* @param record any The record that we are writing to the server. 
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of writeAllFields  */
		getWriteAllFields?(): bool;
		/** [Method] Sets the value of nameProperty  
		* @param nameProperty string 
		*/
		setNameProperty?( nameProperty?:string ): void;
		/** [Method] Sets the value of writeAllFields  
		* @param writeAllFields bool 
		*/
		setWriteAllFields?( writeAllFields?:bool ): void;
		/** [Method] Prepares a Proxy s Ext data Request object  
		* @param request Ext.data.IRequest The request object. 
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;
	}
}
declare module Ext.data {
	export interface IWriter extends Ext.IBase {
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Boolean) */
		writeAllFields?: bool;
		/** [Method] Returns the value of nameProperty  */
		getNameProperty?(): string;
		/** [Method] Formats the data for each record before sending it to the server  
		* @param record any The record that we are writing to the server. 
		*/
		getRecordData?( record?:any ): any;
		/** [Method] Returns the value of writeAllFields  */
		getWriteAllFields?(): bool;
		/** [Method] Sets the value of nameProperty  
		* @param nameProperty string 
		*/
		setNameProperty?( nameProperty?:string ): void;
		/** [Method] Sets the value of writeAllFields  
		* @param writeAllFields bool 
		*/
		setWriteAllFields?( writeAllFields?:bool ): void;
		/** [Method] Prepares a Proxy s Ext data Request object  
		* @param request Ext.data.IRequest The request object. 
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;
	}
}
declare module Ext.data.writer {
	export interface IXml extends Ext.data.writer.IWriter {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Returns the value of defaultDocumentRoot  */
		getDefaultDocumentRoot?(): string;
		/** [Method] Returns the value of documentRoot  */
		getDocumentRoot?(): string;
		/** [Method] Returns the value of header  */
		getHeader?(): string;
		/** [Method] Returns the value of record  */
		getRecord?(): string;
		/** [Method] Sets the value of defaultDocumentRoot  
		* @param defaultDocumentRoot string 
		*/
		setDefaultDocumentRoot?( defaultDocumentRoot?:string ): void;
		/** [Method] Sets the value of documentRoot  
		* @param documentRoot string 
		*/
		setDocumentRoot?( documentRoot?:string ): void;
		/** [Method] Sets the value of header  
		* @param header string 
		*/
		setHeader?( header?:string ): void;
		/** [Method] Sets the value of record  
		* @param record string 
		*/
		setRecord?( record?:string ): void;
		/** [Method]  
		* @param request any 
		* @param data any 
		*/
		writeRecords?( request?:any, data?:any ): any;
	}
}
declare module Ext.data {
	export interface IXmlWriter extends Ext.data.writer.IWriter {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Returns the value of defaultDocumentRoot  */
		getDefaultDocumentRoot?(): string;
		/** [Method] Returns the value of documentRoot  */
		getDocumentRoot?(): string;
		/** [Method] Returns the value of header  */
		getHeader?(): string;
		/** [Method] Returns the value of record  */
		getRecord?(): string;
		/** [Method] Sets the value of defaultDocumentRoot  
		* @param defaultDocumentRoot string 
		*/
		setDefaultDocumentRoot?( defaultDocumentRoot?:string ): void;
		/** [Method] Sets the value of documentRoot  
		* @param documentRoot string 
		*/
		setDocumentRoot?( documentRoot?:string ): void;
		/** [Method] Sets the value of header  
		* @param header string 
		*/
		setHeader?( header?:string ): void;
		/** [Method] Sets the value of record  
		* @param record string 
		*/
		setRecord?( record?:string ): void;
		/** [Method]  
		* @param request any 
		* @param data any 
		*/
		writeRecords?( request?:any, data?:any ): any;
	}
}
declare module Ext.dataview.component {
	export interface IContainer extends Ext.IContainer {
		/** [Method]  */
		destroy?(): void;
	}
}
declare module Ext.dataview.component {
	export interface IDataItem extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		dataMap?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of dataMap  */
		getDataMap?(): any;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of itemCls  */
		getItemCls?(): string;
		/** [Method] Returns the value of items  */
		getItems?(): any[];
		/** [Method] Returns the value of record  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of width  */
		getWidth?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of dataMap  
		* @param dataMap any 
		*/
		setDataMap?( dataMap?:any ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of itemCls  
		* @param itemCls string 
		*/
		setItemCls?( itemCls?:string ): void;
		/** [Method] Sets the value of items  
		* @param items any[] 
		*/
		setItems?( items?:any[] ): void;
		/** [Method] Sets the value of record  
		* @param record Ext.data.IModel 
		*/
		setRecord?( record?:Ext.data.IModel ): void;
		/** [Method] Sets the value of width  
		* @param width string 
		*/
		setWidth?( width?:string ): void;
	}
}
declare module Ext.dataview.component {
	export interface IListItem extends Ext.dataview.component.IDataItem {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		dataMap?: any;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (String/String[]/Ext.Template[]/Ext.XTemplate[]) */
		tpl?: any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of body  */
		getBody?(): any;
		/** [Method] Returns the value of dataMap  */
		getDataMap?(): any;
		/** [Method] Returns the value of disclosure  */
		getDisclosure?(): any;
		/** [Method] Returns the value of header  */
		getHeader?(): any;
		/** [Method] Returns the value of items  */
		getItems?(): any;
		/** [Method] Returns the value of tpl  */
		getTpl?(): any;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of body  
		* @param body any 
		*/
		setBody?( body?:any ): void;
		/** [Method] Sets the value of dataMap  
		* @param dataMap any 
		*/
		setDataMap?( dataMap?:any ): void;
		/** [Method] Sets the value of disclosure  
		* @param disclosure any 
		*/
		setDisclosure?( disclosure?:any ): void;
		/** [Method] Sets the value of header  
		* @param header any 
		*/
		setHeader?( header?:any ): void;
		/** [Method] Sets the value of items  
		* @param items any 
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of tpl  
		* @param tpl any 
		*/
		setTpl?( tpl?:any ): void;
	}
}
declare module Ext.dataview.component {
	export interface ISimpleListItem extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of disclosure  */
		getDisclosure?(): any;
		/** [Method] Returns the value of header  */
		getHeader?(): any;
		/** [Method] Returns the value of record  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of disclosure  
		* @param disclosure any 
		*/
		setDisclosure?( disclosure?:any ): void;
		/** [Method] Sets the value of header  
		* @param header any 
		*/
		setHeader?( header?:any ): void;
		/** [Method] Sets the value of record  
		* @param record Ext.data.IModel 
		*/
		setRecord?( record?:Ext.data.IModel ): void;
	}
}
declare module Ext.dataview {
	export interface IDataView extends Ext.IContainer,Ext.mixin.ISelectable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		blockRefresh?: bool;
		/** [Config Option] (Object[]) */
		data?: any[];
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		deferEmptyText?: bool;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: bool;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean/Object) */
		inline?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Object) */
		itemConfig?: any;
		/** [Config Option] (Boolean) */
		itemSelector?: bool;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Number) */
		maxItemCache?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: bool;
		/** [Config Option] (Boolean) */
		overItemCls?: bool;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Number) */
		pressedDelay?: number;
		/** [Config Option] (Boolean) */
		scrollToTopOnRefresh?: bool;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		selectedItemCls?: bool;
		/** [Config Option] (Boolean) */
		simpleSelect?: bool;
		/** [Config Option] (Boolean) */
		singleSelect?: bool;
		/** [Config Option] (Ext.data.Store/Object) */
		store?: any;
		/** [Config Option] (Boolean) */
		trackOver?: bool;
		/** [Config Option] (String) */
		triggerCtEvent?: string;
		/** [Config Option] (String) */
		triggerEvent?: string;
		/** [Config Option] (Boolean) */
		useComponents?: bool;
		/** [Method] Binds a new Store to this DataView  */
		bindStore?(): void;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;
		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  */
		collectData?(): void;
		/** [Method] Deselects the given record s 
		* @param records any The record(s) to deselect. Can also be a number to reference by index. 
		* @param suppressEvent any If true the deselect event will not be fired. 
		*/
		deselect?( records?:any, suppressEvent?:any ): any;
		deselect?( records?:number, suppressEvent?:bool ): void;
		deselect?( records?:any[], suppressEvent?:bool ): void;
		deselect?( records?:Ext.data.IModel, suppressEvent?:bool ): void;
		/** [Method] Deselects all records  
		* @param supress any 
		*/
		deselectAll?( supress?:any ): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Deselects a record instance by record instance or index  
		* @param records any An array of records or an index. 
		* @param suppressEvent any Set to false to not fire a deselect event. 
		*/
		doDeselect?( records?:any, suppressEvent?:any ): any;
		doDeselect?( records?:Ext.data.IModel, suppressEvent?:bool ): void;
		doDeselect?( records?:number, suppressEvent?:bool ): void;
		/** [Method] Selects a record instance by record instance or index  
		* @param records any An array of records or an index. 
		* @param keepExisting any 
		* @param suppressEvent any Set to false to not fire a select event. 
		*/
		doSelect?( records?:any, keepExisting?:any, suppressEvent?:any ): any;
		doSelect?( records?:Ext.data.IModel, keepExisting?:bool, suppressEvent?:bool ): void;
		doSelect?( records?:number, keepExisting?:bool, suppressEvent?:bool ): void;
		/** [Method] Returns the template node the passed child belongs to or null if it doesn t belong to one  */
		findItemByChild?(): void;
		/** [Method] Returns the template node by the Ext EventObject or null if it is not found  */
		findTargetByEvent?(): void;
		/** [Method] Returns the value of allowDeselect  */
		getAllowDeselect?(): bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the number of selections  */
		getCount?(): number;
		/** [Method] Returns the value of data  */
		getData?(): any[];
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of deferEmptyText  */
		getDeferEmptyText?(): bool;
		/** [Method] Returns the value of deselectOnContainerClick  */
		getDeselectOnContainerClick?(): bool;
		/** [Method] Returns the value of disableSelection  */
		getDisableSelection?(): bool;
		/** [Method] Returns the value of emptyText  */
		getEmptyText?(): string;
		/** [Method] Returns the value of inline  */
		getInline?(): any;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dataview.component.IDataItem;
		/** [Method] Returns the value of itemCls  */
		getItemCls?(): string;
		/** [Method] Returns the value of itemConfig  */
		getItemConfig?(): any;
		/** [Method] Returns an index for the specified item  
		* @param item number The item to locate. 
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): string;
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): string[];
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): Ext.IXTemplate;
		/** [Method] Returns the array of previously selected items  */
		getLastSelected?(): any[];
		/** [Method] Returns the value of loadingText  */
		getLoadingText?(): string;
		/** [Method] Returns the value of maxItemCache  */
		getMaxItemCache?(): number;
		/** [Method] Returns the value of mode  */
		getMode?(): string;
		/** [Method] Gets a template node  */
		getNode?(): void;
		/** [Method] Gets a range nodes  */
		getNodes?(): void;
		/** [Method] Returns the value of pressedCls  */
		getPressedCls?(): string;
		/** [Method] Returns the value of pressedDelay  */
		getPressedDelay?(): number;
		/** [Method] Gets an array of the records from an array of nodes  */
		getRecords?(): void;
		/** [Method] Returns the value of scrollToTopOnRefresh  */
		getScrollToTopOnRefresh?(): bool;
		/** [Method] Returns the value of scrollable  */
		getScrollable?(): bool;
		/** [Method] Returns the value of selectedCls  */
		getSelectedCls?(): string;
		/** [Method] Gets the currently selected nodes  */
		getSelectedNodes?(): void;
		/** [Method] Gets an array of the selected records  */
		getSelectedRecords?(): void;
		/** [Method] Returns an array of the currently selected records  */
		getSelection?(): any[];
		/** [Method] Returns the number of selections  */
		getSelectionCount?(): number;
		/** [Method] Returns the selection mode currently used by this Selectable  */
		getSelectionMode?(): string;
		/** [Method] Returns the value of store  */
		getStore?(): any;
		/** [Method] Returns the value of triggerCtEvent  */
		getTriggerCtEvent?(): string;
		/** [Method] Returns the value of triggerEvent  */
		getTriggerEvent?(): string;
		/** [Method] Returns the value of useComponents  */
		getUseComponents?(): bool;
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dom.IElement[];
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dataview.component.IDataItem[];
		/** [Method] Method called when the Store s Reader throws an exception */
		handleException?(): void;
		/** [Method] Returns true if there is a selected record  */
		hasSelection?(): bool;
		/** [Method] Finds the index of the passed node  */
		indexOf?(): void;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if the Selectable is currently locked  */
		isLocked?(): bool;
		/** [Method] Returns true if the specified row is selected  
		* @param record any The record or index of the record to check. 
		*/
		isSelected?( record?:any ): any;
		isSelected?( record?:Ext.data.IModel ): bool;
		isSelected?( record?:number ): bool;
		/** [Method] Function which can be overridden to provide custom formatting for each Record that is used by this DataView s templat  
		* @param data any The raw data object that was used to create the Record. 
		* @param index number the index number of the Record being prepared for rendering. 
		* @param record Ext.data.IModel The Record being prepared for rendering. 
		*/
		prepareData?( data?:any, index?:number, record?:Ext.data.IModel ): any;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Refreshes an individual node s data from the store  */
		refreshNode?(): void;
		/** [Method] Adds the given records to the currently selected set  
		* @param records any The records to select. 
		* @param keepExisting any If true, the existing selection will be added to (if not, the old selection is replaced). 
		* @param suppressEvent any If true, the select event will not be fired. 
		*/
		select?( records?:any, keepExisting?:any, suppressEvent?:any ): any;
		select?( records?:Ext.data.IModel, keepExisting?:bool, suppressEvent?:bool ): void;
		select?( records?:any[], keepExisting?:bool, suppressEvent?:bool ): void;
		select?( records?:number, keepExisting?:bool, suppressEvent?:bool ): void;
		/** [Method] Selects all records  
		* @param silent bool true to suppress all select events. 
		*/
		selectAll?( silent?:bool ): void;
		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked  
		* @param startRecord number The index of the first row in the range. 
		* @param endRecord number The index of the last row in the range. 
		* @param keepExisting bool true to retain existing selections. 
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:bool ): void;
		/** [Method] Sets the value of allowDeselect  
		* @param allowDeselect bool 
		*/
		setAllowDeselect?( allowDeselect?:bool ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of data  
		* @param data any[] 
		*/
		setData?( data?:any[] ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of deferEmptyText  
		* @param deferEmptyText bool 
		*/
		setDeferEmptyText?( deferEmptyText?:bool ): void;
		/** [Method] Sets the value of deselectOnContainerClick  
		* @param deselectOnContainerClick bool 
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:bool ): void;
		/** [Method] Sets the value of disableSelection  
		* @param disableSelection bool 
		*/
		setDisableSelection?( disableSelection?:bool ): void;
		/** [Method] Sets the value of emptyText  
		* @param emptyText string 
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of inline  
		* @param inline any 
		*/
		setInline?( inline?:any ): void;
		/** [Method] Sets the value of itemCls  
		* @param itemCls string 
		*/
		setItemCls?( itemCls?:string ): void;
		/** [Method] Sets the value of itemConfig  
		* @param itemConfig any 
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemTpl  
		* @param itemTpl any 
		*/
		setItemTpl?( itemTpl?:any ): any;
		setItemTpl?( itemTpl?:string ): void;
		setItemTpl?( itemTpl?:string[] ): void;
		setItemTpl?( itemTpl?:Ext.IXTemplate ): void;
		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;
		/** [Method] Sets the value of loadingText  
		* @param loadingText string 
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of maxItemCache  
		* @param maxItemCache number 
		*/
		setMaxItemCache?( maxItemCache?:number ): void;
		/** [Method] Sets the value of mode  
		* @param mode string 
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets the value of pressedCls  
		* @param pressedCls string 
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of pressedDelay  
		* @param pressedDelay number 
		*/
		setPressedDelay?( pressedDelay?:number ): void;
		/** [Method] Sets the value of scrollToTopOnRefresh  
		* @param scrollToTopOnRefresh bool 
		*/
		setScrollToTopOnRefresh?( scrollToTopOnRefresh?:bool ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable bool 
		*/
		setScrollable?( scrollable?:bool ): void;
		/** [Method] Sets the value of selectedCls  
		* @param selectedCls string 
		*/
		setSelectedCls?( selectedCls?:string ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of triggerCtEvent  
		* @param triggerCtEvent string 
		*/
		setTriggerCtEvent?( triggerCtEvent?:string ): void;
		/** [Method] Sets the value of triggerEvent  
		* @param triggerEvent string 
		*/
		setTriggerEvent?( triggerEvent?:string ): void;
		/** [Method] Sets the value of useComponents  
		* @param useComponents bool 
		*/
		setUseComponents?( useComponents?:bool ): void;
		/** [Method] Sets a record as the last focused record  
		* @param newRecord Ext.data.IRecord 
		* @param oldRecord Ext.data.IRecord 
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;
	}
}
declare module Ext {
	export interface IDataView extends Ext.IContainer,Ext.mixin.ISelectable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		blockRefresh?: bool;
		/** [Config Option] (Object[]) */
		data?: any[];
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		deferEmptyText?: bool;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: bool;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean/Object) */
		inline?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Object) */
		itemConfig?: any;
		/** [Config Option] (Boolean) */
		itemSelector?: bool;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Number) */
		maxItemCache?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: bool;
		/** [Config Option] (Boolean) */
		overItemCls?: bool;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Number) */
		pressedDelay?: number;
		/** [Config Option] (Boolean) */
		scrollToTopOnRefresh?: bool;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		selectedItemCls?: bool;
		/** [Config Option] (Boolean) */
		simpleSelect?: bool;
		/** [Config Option] (Boolean) */
		singleSelect?: bool;
		/** [Config Option] (Ext.data.Store/Object) */
		store?: any;
		/** [Config Option] (Boolean) */
		trackOver?: bool;
		/** [Config Option] (String) */
		triggerCtEvent?: string;
		/** [Config Option] (String) */
		triggerEvent?: string;
		/** [Config Option] (Boolean) */
		useComponents?: bool;
		/** [Method] Binds a new Store to this DataView  */
		bindStore?(): void;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;
		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  */
		collectData?(): void;
		/** [Method] Deselects the given record s 
		* @param records any The record(s) to deselect. Can also be a number to reference by index. 
		* @param suppressEvent any If true the deselect event will not be fired. 
		*/
		deselect?( records?:any, suppressEvent?:any ): any;
		deselect?( records?:number, suppressEvent?:bool ): void;
		deselect?( records?:any[], suppressEvent?:bool ): void;
		deselect?( records?:Ext.data.IModel, suppressEvent?:bool ): void;
		/** [Method] Deselects all records  
		* @param supress any 
		*/
		deselectAll?( supress?:any ): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Deselects a record instance by record instance or index  
		* @param records any An array of records or an index. 
		* @param suppressEvent any Set to false to not fire a deselect event. 
		*/
		doDeselect?( records?:any, suppressEvent?:any ): any;
		doDeselect?( records?:Ext.data.IModel, suppressEvent?:bool ): void;
		doDeselect?( records?:number, suppressEvent?:bool ): void;
		/** [Method] Selects a record instance by record instance or index  
		* @param records any An array of records or an index. 
		* @param keepExisting any 
		* @param suppressEvent any Set to false to not fire a select event. 
		*/
		doSelect?( records?:any, keepExisting?:any, suppressEvent?:any ): any;
		doSelect?( records?:Ext.data.IModel, keepExisting?:bool, suppressEvent?:bool ): void;
		doSelect?( records?:number, keepExisting?:bool, suppressEvent?:bool ): void;
		/** [Method] Returns the template node the passed child belongs to or null if it doesn t belong to one  */
		findItemByChild?(): void;
		/** [Method] Returns the template node by the Ext EventObject or null if it is not found  */
		findTargetByEvent?(): void;
		/** [Method] Returns the value of allowDeselect  */
		getAllowDeselect?(): bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the number of selections  */
		getCount?(): number;
		/** [Method] Returns the value of data  */
		getData?(): any[];
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of deferEmptyText  */
		getDeferEmptyText?(): bool;
		/** [Method] Returns the value of deselectOnContainerClick  */
		getDeselectOnContainerClick?(): bool;
		/** [Method] Returns the value of disableSelection  */
		getDisableSelection?(): bool;
		/** [Method] Returns the value of emptyText  */
		getEmptyText?(): string;
		/** [Method] Returns the value of inline  */
		getInline?(): any;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dataview.component.IDataItem;
		/** [Method] Returns the value of itemCls  */
		getItemCls?(): string;
		/** [Method] Returns the value of itemConfig  */
		getItemConfig?(): any;
		/** [Method] Returns an index for the specified item  
		* @param item number The item to locate. 
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): string;
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): string[];
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): Ext.IXTemplate;
		/** [Method] Returns the array of previously selected items  */
		getLastSelected?(): any[];
		/** [Method] Returns the value of loadingText  */
		getLoadingText?(): string;
		/** [Method] Returns the value of maxItemCache  */
		getMaxItemCache?(): number;
		/** [Method] Returns the value of mode  */
		getMode?(): string;
		/** [Method] Gets a template node  */
		getNode?(): void;
		/** [Method] Gets a range nodes  */
		getNodes?(): void;
		/** [Method] Returns the value of pressedCls  */
		getPressedCls?(): string;
		/** [Method] Returns the value of pressedDelay  */
		getPressedDelay?(): number;
		/** [Method] Gets an array of the records from an array of nodes  */
		getRecords?(): void;
		/** [Method] Returns the value of scrollToTopOnRefresh  */
		getScrollToTopOnRefresh?(): bool;
		/** [Method] Returns the value of scrollable  */
		getScrollable?(): bool;
		/** [Method] Returns the value of selectedCls  */
		getSelectedCls?(): string;
		/** [Method] Gets the currently selected nodes  */
		getSelectedNodes?(): void;
		/** [Method] Gets an array of the selected records  */
		getSelectedRecords?(): void;
		/** [Method] Returns an array of the currently selected records  */
		getSelection?(): any[];
		/** [Method] Returns the number of selections  */
		getSelectionCount?(): number;
		/** [Method] Returns the selection mode currently used by this Selectable  */
		getSelectionMode?(): string;
		/** [Method] Returns the value of store  */
		getStore?(): any;
		/** [Method] Returns the value of triggerCtEvent  */
		getTriggerCtEvent?(): string;
		/** [Method] Returns the value of triggerEvent  */
		getTriggerEvent?(): string;
		/** [Method] Returns the value of useComponents  */
		getUseComponents?(): bool;
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dom.IElement[];
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dataview.component.IDataItem[];
		/** [Method] Method called when the Store s Reader throws an exception */
		handleException?(): void;
		/** [Method] Returns true if there is a selected record  */
		hasSelection?(): bool;
		/** [Method] Finds the index of the passed node  */
		indexOf?(): void;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns true if the Selectable is currently locked  */
		isLocked?(): bool;
		/** [Method] Returns true if the specified row is selected  
		* @param record any The record or index of the record to check. 
		*/
		isSelected?( record?:any ): any;
		isSelected?( record?:Ext.data.IModel ): bool;
		isSelected?( record?:number ): bool;
		/** [Method] Function which can be overridden to provide custom formatting for each Record that is used by this DataView s templat  
		* @param data any The raw data object that was used to create the Record. 
		* @param index number the index number of the Record being prepared for rendering. 
		* @param record Ext.data.IModel The Record being prepared for rendering. 
		*/
		prepareData?( data?:any, index?:number, record?:Ext.data.IModel ): any;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Refreshes an individual node s data from the store  */
		refreshNode?(): void;
		/** [Method] Adds the given records to the currently selected set  
		* @param records any The records to select. 
		* @param keepExisting any If true, the existing selection will be added to (if not, the old selection is replaced). 
		* @param suppressEvent any If true, the select event will not be fired. 
		*/
		select?( records?:any, keepExisting?:any, suppressEvent?:any ): any;
		select?( records?:Ext.data.IModel, keepExisting?:bool, suppressEvent?:bool ): void;
		select?( records?:any[], keepExisting?:bool, suppressEvent?:bool ): void;
		select?( records?:number, keepExisting?:bool, suppressEvent?:bool ): void;
		/** [Method] Selects all records  
		* @param silent bool true to suppress all select events. 
		*/
		selectAll?( silent?:bool ): void;
		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked  
		* @param startRecord number The index of the first row in the range. 
		* @param endRecord number The index of the last row in the range. 
		* @param keepExisting bool true to retain existing selections. 
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:bool ): void;
		/** [Method] Sets the value of allowDeselect  
		* @param allowDeselect bool 
		*/
		setAllowDeselect?( allowDeselect?:bool ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of data  
		* @param data any[] 
		*/
		setData?( data?:any[] ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of deferEmptyText  
		* @param deferEmptyText bool 
		*/
		setDeferEmptyText?( deferEmptyText?:bool ): void;
		/** [Method] Sets the value of deselectOnContainerClick  
		* @param deselectOnContainerClick bool 
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:bool ): void;
		/** [Method] Sets the value of disableSelection  
		* @param disableSelection bool 
		*/
		setDisableSelection?( disableSelection?:bool ): void;
		/** [Method] Sets the value of emptyText  
		* @param emptyText string 
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of inline  
		* @param inline any 
		*/
		setInline?( inline?:any ): void;
		/** [Method] Sets the value of itemCls  
		* @param itemCls string 
		*/
		setItemCls?( itemCls?:string ): void;
		/** [Method] Sets the value of itemConfig  
		* @param itemConfig any 
		*/
		setItemConfig?( itemConfig?:any ): void;
		/** [Method] Sets the value of itemTpl  
		* @param itemTpl any 
		*/
		setItemTpl?( itemTpl?:any ): any;
		setItemTpl?( itemTpl?:string ): void;
		setItemTpl?( itemTpl?:string[] ): void;
		setItemTpl?( itemTpl?:Ext.IXTemplate ): void;
		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;
		/** [Method] Sets the value of loadingText  
		* @param loadingText string 
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of maxItemCache  
		* @param maxItemCache number 
		*/
		setMaxItemCache?( maxItemCache?:number ): void;
		/** [Method] Sets the value of mode  
		* @param mode string 
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets the value of pressedCls  
		* @param pressedCls string 
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of pressedDelay  
		* @param pressedDelay number 
		*/
		setPressedDelay?( pressedDelay?:number ): void;
		/** [Method] Sets the value of scrollToTopOnRefresh  
		* @param scrollToTopOnRefresh bool 
		*/
		setScrollToTopOnRefresh?( scrollToTopOnRefresh?:bool ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable bool 
		*/
		setScrollable?( scrollable?:bool ): void;
		/** [Method] Sets the value of selectedCls  
		* @param selectedCls string 
		*/
		setSelectedCls?( selectedCls?:string ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of triggerCtEvent  
		* @param triggerCtEvent string 
		*/
		setTriggerCtEvent?( triggerCtEvent?:string ): void;
		/** [Method] Sets the value of triggerEvent  
		* @param triggerEvent string 
		*/
		setTriggerEvent?( triggerEvent?:string ): void;
		/** [Method] Sets the value of useComponents  
		* @param useComponents bool 
		*/
		setUseComponents?( useComponents?:bool ): void;
		/** [Method] Sets a record as the last focused record  
		* @param newRecord Ext.data.IRecord 
		* @param oldRecord Ext.data.IRecord 
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;
	}
}
declare module Ext.dataview.element {
	export interface IContainer extends Ext.IComponent {
		/** [Method] Destroys this Component  */
		destroy?(): void;
	}
}
declare module Ext.dataview.element {
	export interface IList extends Ext.dataview.element.IContainer {
		/** [Method] Destroys this Component  */
		destroy?(): void;
	}
}
declare module Ext.dataview {
	export interface IIndexBar extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		alphabet?: bool;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		itemSelector?: bool;
		/** [Config Option] (Array) */
		letters?: any[];
		/** [Config Option] (String) */
		listPrefix?: string;
		/** [Config Option] (Boolean) */
		store?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of letters  */
		getLetters?(): any[];
		/** [Method] Returns the value of listPrefix  */
		getListPrefix?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal  */
		isHorizontal?(): void;
		/** [Method] Returns true when direction is vertical  */
		isVertical?(): void;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of letters  
		* @param letters any[] 
		*/
		setLetters?( letters?:any[] ): void;
		/** [Method] Sets the value of listPrefix  
		* @param listPrefix string 
		*/
		setListPrefix?( listPrefix?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext {
	export interface IIndexBar extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		alphabet?: bool;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		itemSelector?: bool;
		/** [Config Option] (Array) */
		letters?: any[];
		/** [Config Option] (String) */
		listPrefix?: string;
		/** [Config Option] (Boolean) */
		store?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of letters  */
		getLetters?(): any[];
		/** [Method] Returns the value of listPrefix  */
		getListPrefix?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns true when direction is horizontal  */
		isHorizontal?(): void;
		/** [Method] Returns true when direction is vertical  */
		isVertical?(): void;
		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of letters  
		* @param letters any[] 
		*/
		setLetters?( letters?:any[] ): void;
		/** [Method] Sets the value of listPrefix  
		* @param listPrefix string 
		*/
		setListPrefix?( listPrefix?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.dataview {
	export interface IList extends Ext.dataview.IDataView,Ext.mixin.IBindable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		disclosureProperty?: string;
		/** [Config Option] (Boolean) */
		grouped?: bool;
		/** [Config Option] (Boolean/Object) */
		indexBar?: any;
		/** [Config Option] (Boolean) */
		infinite?: bool;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Boolean/Function/Object) */
		onItemDisclosure?: any;
		/** [Config Option] (Boolean) */
		pinHeaders?: bool;
		/** [Config Option] (Boolean) */
		preventSelectionOnDisclose?: bool;
		/** [Config Option] (Boolean) */
		refreshHeightOnUpdate?: bool;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		striped?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		useSimpleItems?: bool;
		/** [Config Option] (Boolean) */
		variableHeights?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of disclosureProperty  */
		getDisclosureProperty?(): string;
		/** [Method] Returns the value of grouped  */
		getGrouped?(): bool;
		/** [Method] Returns the value of icon  */
		getIcon?(): any;
		/** [Method] Returns the value of indexBar  */
		getIndexBar?(): any;
		/** [Method] Returns the value of infinite  */
		getInfinite?(): bool;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dataview.component.IDataItem;
		/** [Method] Returns the value of itemHeight  */
		getItemHeight?(): number;
		/** [Method] Returns an index for the specified item  
		* @param item number The item to locate. 
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of onItemDisclosure  */
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of pinHeaders  */
		getPinHeaders?(): bool;
		/** [Method] Returns the value of preventSelectionOnDisclose  */
		getPreventSelectionOnDisclose?(): bool;
		/** [Method] Returns the value of refreshHeightOnUpdate  */
		getRefreshHeightOnUpdate?(): bool;
		/** [Method] Returns all the items that are docked in the scroller in this list  */
		getScrollDockedItems?(): any[];
		/** [Method] Returns the value of scrollable  */
		getScrollable?(): any;
		/** [Method] Returns the value of striped  */
		getStriped?(): bool;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of useSimpleItems  */
		getUseSimpleItems?(): bool;
		/** [Method] Returns the value of variableHeights  */
		getVariableHeights?(): bool;
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dom.IElement[];
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dataview.component.IDataItem[];
		/** [Method] We override DataView s initialize method with an empty function */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of disclosureProperty  
		* @param disclosureProperty string 
		*/
		setDisclosureProperty?( disclosureProperty?:string ): void;
		/** [Method] Sets the value of grouped  
		* @param grouped bool 
		*/
		setGrouped?( grouped?:bool ): void;
		/** [Method] Sets the value of icon  
		* @param icon any 
		*/
		setIcon?( icon?:any ): void;
		/** [Method] Sets the value of indexBar  
		* @param indexBar any 
		*/
		setIndexBar?( indexBar?:any ): void;
		/** [Method] Sets the value of infinite  
		* @param infinite bool 
		*/
		setInfinite?( infinite?:bool ): void;
		/** [Method] Sets the value of itemHeight  
		* @param itemHeight number 
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of onItemDisclosure  
		* @param onItemDisclosure any 
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): void;
		/** [Method] Sets the value of pinHeaders  
		* @param pinHeaders bool 
		*/
		setPinHeaders?( pinHeaders?:bool ): void;
		/** [Method] Sets the value of preventSelectionOnDisclose  
		* @param preventSelectionOnDisclose bool 
		*/
		setPreventSelectionOnDisclose?( preventSelectionOnDisclose?:bool ): void;
		/** [Method] Sets the value of refreshHeightOnUpdate  
		* @param refreshHeightOnUpdate bool 
		*/
		setRefreshHeightOnUpdate?( refreshHeightOnUpdate?:bool ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Sets the value of striped  
		* @param striped bool 
		*/
		setStriped?( striped?:bool ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of useSimpleItems  
		* @param useSimpleItems bool 
		*/
		setUseSimpleItems?( useSimpleItems?:bool ): void;
		/** [Method] Sets the value of variableHeights  
		* @param variableHeights bool 
		*/
		setVariableHeights?( variableHeights?:bool ): void;
	}
}
declare module Ext {
	export interface IList extends Ext.dataview.IDataView,Ext.mixin.IBindable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		disclosureProperty?: string;
		/** [Config Option] (Boolean) */
		grouped?: bool;
		/** [Config Option] (Boolean/Object) */
		indexBar?: any;
		/** [Config Option] (Boolean) */
		infinite?: bool;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Boolean/Function/Object) */
		onItemDisclosure?: any;
		/** [Config Option] (Boolean) */
		pinHeaders?: bool;
		/** [Config Option] (Boolean) */
		preventSelectionOnDisclose?: bool;
		/** [Config Option] (Boolean) */
		refreshHeightOnUpdate?: bool;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		striped?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		useSimpleItems?: bool;
		/** [Config Option] (Boolean) */
		variableHeights?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of disclosureProperty  */
		getDisclosureProperty?(): string;
		/** [Method] Returns the value of grouped  */
		getGrouped?(): bool;
		/** [Method] Returns the value of icon  */
		getIcon?(): any;
		/** [Method] Returns the value of indexBar  */
		getIndexBar?(): any;
		/** [Method] Returns the value of infinite  */
		getInfinite?(): bool;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns an item at the specified index  
		* @param index number Index of the item. 
		*/
		getItemAt?( index?:number ): Ext.dataview.component.IDataItem;
		/** [Method] Returns the value of itemHeight  */
		getItemHeight?(): number;
		/** [Method] Returns an index for the specified item  
		* @param item number The item to locate. 
		*/
		getItemIndex?( item?:number ): number;
		/** [Method] Returns the value of onItemDisclosure  */
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of pinHeaders  */
		getPinHeaders?(): bool;
		/** [Method] Returns the value of preventSelectionOnDisclose  */
		getPreventSelectionOnDisclose?(): bool;
		/** [Method] Returns the value of refreshHeightOnUpdate  */
		getRefreshHeightOnUpdate?(): bool;
		/** [Method] Returns all the items that are docked in the scroller in this list  */
		getScrollDockedItems?(): any[];
		/** [Method] Returns the value of scrollable  */
		getScrollable?(): any;
		/** [Method] Returns the value of striped  */
		getStriped?(): bool;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of useSimpleItems  */
		getUseSimpleItems?(): bool;
		/** [Method] Returns the value of variableHeights  */
		getVariableHeights?(): bool;
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dom.IElement[];
		/** [Method] Returns an array of the current items in the DataView  */
		getViewItems?(): Ext.dataview.component.IDataItem[];
		/** [Method] We override DataView s initialize method with an empty function */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of disclosureProperty  
		* @param disclosureProperty string 
		*/
		setDisclosureProperty?( disclosureProperty?:string ): void;
		/** [Method] Sets the value of grouped  
		* @param grouped bool 
		*/
		setGrouped?( grouped?:bool ): void;
		/** [Method] Sets the value of icon  
		* @param icon any 
		*/
		setIcon?( icon?:any ): void;
		/** [Method] Sets the value of indexBar  
		* @param indexBar any 
		*/
		setIndexBar?( indexBar?:any ): void;
		/** [Method] Sets the value of infinite  
		* @param infinite bool 
		*/
		setInfinite?( infinite?:bool ): void;
		/** [Method] Sets the value of itemHeight  
		* @param itemHeight number 
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of onItemDisclosure  
		* @param onItemDisclosure any 
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): void;
		/** [Method] Sets the value of pinHeaders  
		* @param pinHeaders bool 
		*/
		setPinHeaders?( pinHeaders?:bool ): void;
		/** [Method] Sets the value of preventSelectionOnDisclose  
		* @param preventSelectionOnDisclose bool 
		*/
		setPreventSelectionOnDisclose?( preventSelectionOnDisclose?:bool ): void;
		/** [Method] Sets the value of refreshHeightOnUpdate  
		* @param refreshHeightOnUpdate bool 
		*/
		setRefreshHeightOnUpdate?( refreshHeightOnUpdate?:bool ): void;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Sets the value of striped  
		* @param striped bool 
		*/
		setStriped?( striped?:bool ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of useSimpleItems  
		* @param useSimpleItems bool 
		*/
		setUseSimpleItems?( useSimpleItems?:bool ): void;
		/** [Method] Sets the value of variableHeights  
		* @param variableHeights bool 
		*/
		setVariableHeights?( variableHeights?:bool ): void;
	}
}
declare module Ext.dataview {
	export interface IListItemHeader extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of docked  */
		getDocked?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of docked  
		* @param docked string 
		*/
		setDocked?( docked?:string ): void;
	}
}
declare module Ext.dataview {
	export interface INestedList extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowDeselect?: bool;
		/** [Config Option] (Object) */
		backButton?: any;
		/** [Config Option] (String) */
		backText?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Number) */
		clearSelectionDelay?: number;
		/** [Config Option] (Ext.Component) */
		detailCard?: Ext.IComponent;
		/** [Config Option] (Ext.Container) */
		detailContainer?: Ext.IContainer;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Boolean/Function) */
		onItemDisclosure?: any;
		/** [Config Option] (Ext.data.TreeStore/String) */
		store?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Ext.Toolbar/Object/Boolean) */
		toolbar?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		updateTitleText?: bool;
		/** [Config Option] (Boolean) */
		useSimpleItems?: bool;
		/** [Config Option] (Boolean) */
		useTitleAsBackText?: bool;
		/** [Config Option] (Boolean) */
		useToolbar?: bool;
		/** [Config Option] (Boolean) */
		variableHeights?: bool;
		/** [Method] Returns the value of allowDeselect  */
		getAllowDeselect?(): bool;
		/** [Method] Returns the value of backButton  */
		getBackButton?(): any;
		/** [Method] Returns the value of backText  */
		getBackText?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of detailCard  */
		getDetailCard?(): Ext.IComponent;
		/** [Method] Returns the value of detailContainer  */
		getDetailContainer?(): Ext.IContainer;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): string;
		/** [Method] Returns the value of emptyText  */
		getEmptyText?(): string;
		/** [Method] Returns the value of itemHeight  */
		getItemHeight?(): number;
		/** [Method] Override this method to provide custom template rendering of individual nodes  
		* @param node Ext.data.IRecord 
		*/
		getItemTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of listConfig  */
		getListConfig?(): any;
		/** [Method] Returns the value of loadingText  */
		getLoadingText?(): string;
		/** [Method] Returns the value of onItemDisclosure  */
		getOnItemDisclosure?(): bool;
		/** [Method] Returns the value of onItemDisclosure  */
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of store  */
		getStore?(): Ext.data.ITreeStore;
		/** [Method] Returns the value of store  */
		getStore?(): string;
		/** [Method] Returns the subList for a specified node  */
		getSubList?(): void;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Override this method to provide custom template rendering of titles back buttons when useTitleAsBackText is enabled  
		* @param node Ext.data.IRecord 
		*/
		getTitleTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of toolbar  */
		getToolbar?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): any;
		/** [Method] Returns the value of updateTitleText  */
		getUpdateTitleText?(): bool;
		/** [Method] Returns the value of useSimpleItems  */
		getUseSimpleItems?(): bool;
		/** [Method] Returns the value of useTitleAsBackText  */
		getUseTitleAsBackText?(): bool;
		/** [Method] Returns the value of useToolbar  */
		getUseToolbar?(): bool;
		/** [Method] Returns the value of variableHeights  */
		getVariableHeights?(): bool;
		/** [Method] The leaf you want to navigate to  
		* @param node Ext.data.INodeInterface The specified node to navigate to. 
		*/
		goToLeaf?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Method to handle going to a specific node within this nested list  
		* @param node Ext.data.INodeInterface The specified node to navigate to. 
		*/
		goToNode?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Called when the backButton has been tapped  */
		onBackTap?(): void;
		/** [Method] Called when an list item has been tapped  
		* @param list Ext.IList The subList the item is on. 
		* @param index number The id of the item tapped. 
		* @param target Ext.IElement The list item tapped. 
		* @param record Ext.data.IRecord The record which as tapped. 
		* @param e Ext.event.IEvent The event. 
		*/
		onItemTap?( list?:Ext.IList, index?:number, target?:Ext.IElement, record?:Ext.data.IRecord, e?:Ext.event.IEvent ): void;
		/** [Method] Sets the value of allowDeselect  
		* @param allowDeselect bool 
		*/
		setAllowDeselect?( allowDeselect?:bool ): void;
		/** [Method] Sets the value of backButton  
		* @param backButton any 
		*/
		setBackButton?( backButton?:any ): void;
		/** [Method] Sets the value of backText  
		* @param backText string 
		*/
		setBackText?( backText?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of detailCard  
		* @param detailCard Ext.IComponent 
		*/
		setDetailCard?( detailCard?:Ext.IComponent ): void;
		/** [Method] Sets the value of detailContainer  
		* @param detailContainer Ext.IContainer 
		*/
		setDetailContainer?( detailContainer?:Ext.IContainer ): void;
		/** [Method] Sets the value of displayField  
		* @param displayField string 
		*/
		setDisplayField?( displayField?:string ): void;
		/** [Method] Sets the value of emptyText  
		* @param emptyText string 
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of itemHeight  
		* @param itemHeight number 
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of listConfig  
		* @param listConfig any 
		*/
		setListConfig?( listConfig?:any ): void;
		/** [Method] Sets the value of loadingText  
		* @param loadingText string 
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of onItemDisclosure  
		* @param onItemDisclosure any 
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): any;
		setOnItemDisclosure?( onItemDisclosure?:bool ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): any;
		setStore?( store?:Ext.data.ITreeStore ): void;
		setStore?( store?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of toolbar  
		* @param toolbar any 
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui any 
		*/
		setUi?( ui?:any ): void;
		/** [Method] Sets the value of updateTitleText  
		* @param updateTitleText bool 
		*/
		setUpdateTitleText?( updateTitleText?:bool ): void;
		/** [Method] Sets the value of useSimpleItems  
		* @param useSimpleItems bool 
		*/
		setUseSimpleItems?( useSimpleItems?:bool ): void;
		/** [Method] Sets the value of useTitleAsBackText  
		* @param useTitleAsBackText bool 
		*/
		setUseTitleAsBackText?( useTitleAsBackText?:bool ): void;
		/** [Method] Sets the value of useToolbar  
		* @param useToolbar bool 
		*/
		setUseToolbar?( useToolbar?:bool ): void;
		/** [Method] Sets the value of variableHeights  
		* @param variableHeights bool 
		*/
		setVariableHeights?( variableHeights?:bool ): void;
	}
}
declare module Ext {
	export interface INestedList extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowDeselect?: bool;
		/** [Config Option] (Object) */
		backButton?: any;
		/** [Config Option] (String) */
		backText?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object/Boolean) */
		cardSwitchAnimation?: any;
		/** [Config Option] (Number) */
		clearSelectionDelay?: number;
		/** [Config Option] (Ext.Component) */
		detailCard?: Ext.IComponent;
		/** [Config Option] (Ext.Container) */
		detailContainer?: Ext.IContainer;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Number) */
		itemHeight?: number;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Boolean/Function) */
		onItemDisclosure?: any;
		/** [Config Option] (Ext.data.TreeStore/String) */
		store?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Ext.Toolbar/Object/Boolean) */
		toolbar?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Boolean) */
		updateTitleText?: bool;
		/** [Config Option] (Boolean) */
		useSimpleItems?: bool;
		/** [Config Option] (Boolean) */
		useTitleAsBackText?: bool;
		/** [Config Option] (Boolean) */
		useToolbar?: bool;
		/** [Config Option] (Boolean) */
		variableHeights?: bool;
		/** [Method] Returns the value of allowDeselect  */
		getAllowDeselect?(): bool;
		/** [Method] Returns the value of backButton  */
		getBackButton?(): any;
		/** [Method] Returns the value of backText  */
		getBackText?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of detailCard  */
		getDetailCard?(): Ext.IComponent;
		/** [Method] Returns the value of detailContainer  */
		getDetailContainer?(): Ext.IContainer;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): string;
		/** [Method] Returns the value of emptyText  */
		getEmptyText?(): string;
		/** [Method] Returns the value of itemHeight  */
		getItemHeight?(): number;
		/** [Method] Override this method to provide custom template rendering of individual nodes  
		* @param node Ext.data.IRecord 
		*/
		getItemTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of listConfig  */
		getListConfig?(): any;
		/** [Method] Returns the value of loadingText  */
		getLoadingText?(): string;
		/** [Method] Returns the value of onItemDisclosure  */
		getOnItemDisclosure?(): bool;
		/** [Method] Returns the value of onItemDisclosure  */
		getOnItemDisclosure?(): any;
		/** [Method] Returns the value of store  */
		getStore?(): Ext.data.ITreeStore;
		/** [Method] Returns the value of store  */
		getStore?(): string;
		/** [Method] Returns the subList for a specified node  */
		getSubList?(): void;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Override this method to provide custom template rendering of titles back buttons when useTitleAsBackText is enabled  
		* @param node Ext.data.IRecord 
		*/
		getTitleTextTpl?( node?:Ext.data.IRecord ): string;
		/** [Method] Returns the value of toolbar  */
		getToolbar?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): any;
		/** [Method] Returns the value of updateTitleText  */
		getUpdateTitleText?(): bool;
		/** [Method] Returns the value of useSimpleItems  */
		getUseSimpleItems?(): bool;
		/** [Method] Returns the value of useTitleAsBackText  */
		getUseTitleAsBackText?(): bool;
		/** [Method] Returns the value of useToolbar  */
		getUseToolbar?(): bool;
		/** [Method] Returns the value of variableHeights  */
		getVariableHeights?(): bool;
		/** [Method] The leaf you want to navigate to  
		* @param node Ext.data.INodeInterface The specified node to navigate to. 
		*/
		goToLeaf?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Method to handle going to a specific node within this nested list  
		* @param node Ext.data.INodeInterface The specified node to navigate to. 
		*/
		goToNode?( node?:Ext.data.INodeInterface ): void;
		/** [Method] Called when the backButton has been tapped  */
		onBackTap?(): void;
		/** [Method] Called when an list item has been tapped  
		* @param list Ext.IList The subList the item is on. 
		* @param index number The id of the item tapped. 
		* @param target Ext.IElement The list item tapped. 
		* @param record Ext.data.IRecord The record which as tapped. 
		* @param e Ext.event.IEvent The event. 
		*/
		onItemTap?( list?:Ext.IList, index?:number, target?:Ext.IElement, record?:Ext.data.IRecord, e?:Ext.event.IEvent ): void;
		/** [Method] Sets the value of allowDeselect  
		* @param allowDeselect bool 
		*/
		setAllowDeselect?( allowDeselect?:bool ): void;
		/** [Method] Sets the value of backButton  
		* @param backButton any 
		*/
		setBackButton?( backButton?:any ): void;
		/** [Method] Sets the value of backText  
		* @param backText string 
		*/
		setBackText?( backText?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of detailCard  
		* @param detailCard Ext.IComponent 
		*/
		setDetailCard?( detailCard?:Ext.IComponent ): void;
		/** [Method] Sets the value of detailContainer  
		* @param detailContainer Ext.IContainer 
		*/
		setDetailContainer?( detailContainer?:Ext.IContainer ): void;
		/** [Method] Sets the value of displayField  
		* @param displayField string 
		*/
		setDisplayField?( displayField?:string ): void;
		/** [Method] Sets the value of emptyText  
		* @param emptyText string 
		*/
		setEmptyText?( emptyText?:string ): void;
		/** [Method] Sets the value of itemHeight  
		* @param itemHeight number 
		*/
		setItemHeight?( itemHeight?:number ): void;
		/** [Method] Sets the value of listConfig  
		* @param listConfig any 
		*/
		setListConfig?( listConfig?:any ): void;
		/** [Method] Sets the value of loadingText  
		* @param loadingText string 
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of onItemDisclosure  
		* @param onItemDisclosure any 
		*/
		setOnItemDisclosure?( onItemDisclosure?:any ): any;
		setOnItemDisclosure?( onItemDisclosure?:bool ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): any;
		setStore?( store?:Ext.data.ITreeStore ): void;
		setStore?( store?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of toolbar  
		* @param toolbar any 
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui any 
		*/
		setUi?( ui?:any ): void;
		/** [Method] Sets the value of updateTitleText  
		* @param updateTitleText bool 
		*/
		setUpdateTitleText?( updateTitleText?:bool ): void;
		/** [Method] Sets the value of useSimpleItems  
		* @param useSimpleItems bool 
		*/
		setUseSimpleItems?( useSimpleItems?:bool ): void;
		/** [Method] Sets the value of useTitleAsBackText  
		* @param useTitleAsBackText bool 
		*/
		setUseTitleAsBackText?( useTitleAsBackText?:bool ): void;
		/** [Method] Sets the value of useToolbar  
		* @param useToolbar bool 
		*/
		setUseToolbar?( useToolbar?:bool ): void;
		/** [Method] Sets the value of variableHeights  
		* @param variableHeights bool 
		*/
		setVariableHeights?( variableHeights?:bool ): void;
	}
}
declare module Ext {
	export interface IDate extends Ext.IDateExtras {
	}
	export class Date {
		/** [Method] Provides a convenient method for performing basic date arithmetic  
		* @param date any The date to modify. 
		* @param interval string A valid date interval enum value. 
		* @param value number The amount to add to the current date. 
		*/
		static add( date?:any, interval?:string, value?:number ): any;
		/** [Method] Align the date to unit  
		* @param date any The date to be aligned. 
		* @param unit string The unit. This unit is compatible with the date interval constants. 
		*/
		static align( date?:any, unit?:string ): any;
		/** [Method] Checks if a date falls on or between the given start and end dates  
		* @param date any The date to check. 
		* @param start any Start date. 
		* @param end any End date. 
		*/
		static between( date?:any, start?:any, end?:any ): bool;
		/** [Method] Attempts to clear all time information from this Date by setting the time to midnight of the same day automatically 
		* @param date any The date. 
		* @param clone bool true to create a clone of this date, clear the time and return it. 
		*/
		static clearTime( date?:any, clone?:bool ): any;
		/** [Method] Creates and returns a new Date instance with the exact same date value as the called instance  
		* @param date any The date. 
		*/
		static clone( date?:any ): any;
		/** [Method] Calculate how many units are there between two time  
		* @param min any The first time. 
		* @param max any The second time. 
		* @param unit string The unit. This unit is compatible with the date interval constants. 
		*/
		static diff( min?:any, max?:any, unit?:string ): number;
		/** [Method] Formats a date given the supplied format string  
		* @param date any The date to format. 
		* @param format string The format string. 
		*/
		static format( date?:any, format?:string ): string;
		/** [Method] Get the numeric day number of the year adjusted for leap year  
		* @param date any The date. 
		*/
		static getDayOfYear( date?:any ): number;
		/** [Method] Get the number of days in the current month adjusted for leap year  
		* @param date any The date. 
		*/
		static getDaysInMonth( date?:any ): number;
		/** [Method] Returns the number of milliseconds between two dates  
		* @param dateA any The first date. 
		* @param dateB any The second date, defaults to now. 
		*/
		static getElapsed( dateA?:any, dateB?:any ): number;
		/** [Method] Get the date of the first day of the month in which this date resides  
		* @param date any The date. 
		*/
		static getFirstDateOfMonth( date?:any ): any;
		/** [Method] Get the first day of the current month adjusted for leap year  
		* @param date any The date 
		*/
		static getFirstDayOfMonth( date?:any ): number;
		/** [Method] Get the offset from GMT of the current date equivalent to the format specifier O  
		* @param date any The date. 
		* @param colon bool true to separate the hours and minutes with a colon. 
		*/
		static getGMTOffset( date?:any, colon?:bool ): string;
		/** [Method] Get the date of the last day of the month in which this date resides  
		* @param date any The date. 
		*/
		static getLastDateOfMonth( date?:any ): any;
		/** [Method] Get the last day of the current month adjusted for leap year  
		* @param date any The date. 
		*/
		static getLastDayOfMonth( date?:any ): number;
		/** [Method] Get the zero based JavaScript month number for the given short full month name  
		* @param name string The short/full month name. 
		*/
		static getMonthNumber( name?:string ): number;
		/** [Method] Get the short day name for the given day number  
		* @param day number A zero-based JavaScript day number. 
		*/
		static getShortDayName( day?:number ): string;
		/** [Method] Get the short month name for the given month number  
		* @param month number A zero-based JavaScript month number. 
		*/
		static getShortMonthName( month?:number ): string;
		/** [Method] Get the English ordinal suffix of the current day equivalent to the format specifier S  
		* @param date any The date. 
		*/
		static getSuffix( date?:any ): string;
		/** [Method] Get the timezone abbreviation of the current date equivalent to the format specifier T  
		* @param date any The date. 
		*/
		static getTimezone( date?:any ): string;
		/** [Method] Get the numeric ISO 8601 week number of the year equivalent to the format specifier W  but without a leading zero 
		* @param date any The date. 
		*/
		static getWeekOfYear( date?:any ): number;
		/** [Method] Checks if the current date is affected by Daylight Saving Time DST 
		* @param date any The date. 
		*/
		static isDST( date?:any ): bool;
		/** [Method] Checks if the current date falls within a leap year  
		* @param date any The date. 
		*/
		static isLeapYear( date?:any ): bool;
		/** [Method] Checks if the passed Date parameters will cause a JavaScript Date rollover 
		* @param year number 4-digit year. 
		* @param month number 1-based month-of-year. 
		* @param day number Day of month. 
		* @param hour number Hour. 
		* @param minute number Minute. 
		* @param second number Second. 
		* @param millisecond number Millisecond. 
		*/
		static isValid( year?:number, month?:number, day?:number, hour?:number, minute?:number, second?:number, millisecond?:number ): bool;
		/** [Method] Returns the current timestamp  */
		static now(): number;
		/** [Method] Parses the passed string using the specified date format  
		* @param input string The raw date string. 
		* @param format string The expected date string format. 
		* @param strict bool true to validate date strings while parsing (i.e. prevents JavaScript Date "rollover"). Invalid date strings will return null when parsed. 
		*/
		static parse( input?:string, format?:string, strict?:bool ): any;
	}
}
declare module Ext {
	export interface IDateExtras {
	}
	export class DateExtras {
		/** [Method] Provides a convenient method for performing basic date arithmetic  
		* @param date any The date to modify. 
		* @param interval string A valid date interval enum value. 
		* @param value number The amount to add to the current date. 
		*/
		static add( date?:any, interval?:string, value?:number ): any;
		/** [Method] Align the date to unit  
		* @param date any The date to be aligned. 
		* @param unit string The unit. This unit is compatible with the date interval constants. 
		*/
		static align( date?:any, unit?:string ): any;
		/** [Method] Checks if a date falls on or between the given start and end dates  
		* @param date any The date to check. 
		* @param start any Start date. 
		* @param end any End date. 
		*/
		static between( date?:any, start?:any, end?:any ): bool;
		/** [Method] Attempts to clear all time information from this Date by setting the time to midnight of the same day automatically 
		* @param date any The date. 
		* @param clone bool true to create a clone of this date, clear the time and return it. 
		*/
		static clearTime( date?:any, clone?:bool ): any;
		/** [Method] Creates and returns a new Date instance with the exact same date value as the called instance  
		* @param date any The date. 
		*/
		static clone( date?:any ): any;
		/** [Method] Calculate how many units are there between two time  
		* @param min any The first time. 
		* @param max any The second time. 
		* @param unit string The unit. This unit is compatible with the date interval constants. 
		*/
		static diff( min?:any, max?:any, unit?:string ): number;
		/** [Method] Formats a date given the supplied format string  
		* @param date any The date to format. 
		* @param format string The format string. 
		*/
		static format( date?:any, format?:string ): string;
		/** [Method] Get the numeric day number of the year adjusted for leap year  
		* @param date any The date. 
		*/
		static getDayOfYear( date?:any ): number;
		/** [Method] Get the number of days in the current month adjusted for leap year  
		* @param date any The date. 
		*/
		static getDaysInMonth( date?:any ): number;
		/** [Method] Returns the number of milliseconds between two dates  
		* @param dateA any The first date. 
		* @param dateB any The second date, defaults to now. 
		*/
		static getElapsed( dateA?:any, dateB?:any ): number;
		/** [Method] Get the date of the first day of the month in which this date resides  
		* @param date any The date. 
		*/
		static getFirstDateOfMonth( date?:any ): any;
		/** [Method] Get the first day of the current month adjusted for leap year  
		* @param date any The date 
		*/
		static getFirstDayOfMonth( date?:any ): number;
		/** [Method] Get the offset from GMT of the current date equivalent to the format specifier O  
		* @param date any The date. 
		* @param colon bool true to separate the hours and minutes with a colon. 
		*/
		static getGMTOffset( date?:any, colon?:bool ): string;
		/** [Method] Get the date of the last day of the month in which this date resides  
		* @param date any The date. 
		*/
		static getLastDateOfMonth( date?:any ): any;
		/** [Method] Get the last day of the current month adjusted for leap year  
		* @param date any The date. 
		*/
		static getLastDayOfMonth( date?:any ): number;
		/** [Method] Get the zero based JavaScript month number for the given short full month name  
		* @param name string The short/full month name. 
		*/
		static getMonthNumber( name?:string ): number;
		/** [Method] Get the short day name for the given day number  
		* @param day number A zero-based JavaScript day number. 
		*/
		static getShortDayName( day?:number ): string;
		/** [Method] Get the short month name for the given month number  
		* @param month number A zero-based JavaScript month number. 
		*/
		static getShortMonthName( month?:number ): string;
		/** [Method] Get the English ordinal suffix of the current day equivalent to the format specifier S  
		* @param date any The date. 
		*/
		static getSuffix( date?:any ): string;
		/** [Method] Get the timezone abbreviation of the current date equivalent to the format specifier T  
		* @param date any The date. 
		*/
		static getTimezone( date?:any ): string;
		/** [Method] Get the numeric ISO 8601 week number of the year equivalent to the format specifier W  but without a leading zero 
		* @param date any The date. 
		*/
		static getWeekOfYear( date?:any ): number;
		/** [Method] Checks if the current date is affected by Daylight Saving Time DST 
		* @param date any The date. 
		*/
		static isDST( date?:any ): bool;
		/** [Method] Checks if the current date falls within a leap year  
		* @param date any The date. 
		*/
		static isLeapYear( date?:any ): bool;
		/** [Method] Checks if the passed Date parameters will cause a JavaScript Date rollover 
		* @param year number 4-digit year. 
		* @param month number 1-based month-of-year. 
		* @param day number Day of month. 
		* @param hour number Hour. 
		* @param minute number Minute. 
		* @param second number Second. 
		* @param millisecond number Millisecond. 
		*/
		static isValid( year?:number, month?:number, day?:number, hour?:number, minute?:number, second?:number, millisecond?:number ): bool;
		/** [Method] Returns the current timestamp  */
		static now(): number;
		/** [Method] Parses the passed string using the specified date format  
		* @param input string The raw date string. 
		* @param format string The expected date string format. 
		* @param strict bool true to validate date strings while parsing (i.e. prevents JavaScript Date "rollover"). Invalid date strings will return null when parsed. 
		*/
		static parse( input?:string, format?:string, strict?:bool ): any;
	}
}
declare module Ext {
	export interface IDecorator extends Ext.IComponent {
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.device.camera {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Allows you to capture a photo  
		* @param options any The options to use when taking a photo. 
		* @param scope any The scope in which to call the success and failure functions, if specified. 
		* @param destination string The destination of the image which is returned. Available options are:  data - returns a base64 encoded string file - returns the file's URI  
		* @param encoding string The encoding of the returned image. Available options are:  jpg png  
		* @param width number The width of the image to return 
		* @param height number The height of the image to return 
		*/
		capture?( options?:any, scope?:any, destination?:string, encoding?:string, width?:number, height?:number ): void;
	}
}
declare module Ext.device {
	export interface ICamera extends Ext.IBase,Ext.device.camera.IAbstract {
	}
	export class Camera {
		/** [Method]  */
		constructor();
		/** [Method] Allows you to capture a photo  
		* @param options any The options to use when taking a photo. 
		* @param scope any The scope in which to call the success and failure functions, if specified. 
		* @param destination string The destination of the image which is returned. Available options are:  data - returns a base64 encoded string file - returns the file's URI  
		* @param encoding string The encoding of the returned image. Available options are:  jpg png  
		* @param width number The width of the image to return 
		* @param height number The height of the image to return 
		*/
		static capture( options?:any, scope?:any, destination?:string, encoding?:string, width?:number, height?:number ): void;
	}
}
declare module Ext.device.camera {
	export interface IPhoneGap extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo  
		* @param args any 
		*/
		capture?( args?:any ): void;
	}
}
declare module Ext.device.camera {
	export interface ISencha extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo  
		* @param options any 
		*/
		capture?( options?:any ): void;
	}
}
declare module Ext.device.camera {
	export interface ISimulator extends Ext.device.camera.IAbstract {
		/** [Method] Allows you to capture a photo  
		* @param options any 
		*/
		capture?( options?:any ): void;
		/** [Method] Returns the value of samples  */
		getSamples?(): any[];
		/** [Method] Sets the value of samples  
		* @param samples any[] 
		*/
		setSamples?( samples?:any[] ): void;
	}
}
declare module Ext.device.communicator {
	export interface IAndroid extends Ext.device.communicator.IDefault {
	}
}
declare module Ext.device.communicator {
	export interface IDefault extends Ext.IBase {
	}
}
declare module Ext.device {
	export interface ICommunicator extends Ext.IBase {
	}
	export class Communicator {
		/** [Method]  */
		constructor();
	}
}
declare module Ext.device.connection {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (String) */
		CELL_2G?: string;
		/** [Property] (String) */
		CELL_3G?: string;
		/** [Property] (String) */
		CELL_4G?: string;
		/** [Property] (String) */
		ETHERNET?: string;
		/** [Property] (String) */
		NONE?: string;
		/** [Property] (String) */
		UNKNOWN?: string;
		/** [Property] (String) */
		WIFI?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of online  */
		getOnline?(): bool;
		/** [Method] Returns the current connection type  */
		getType?(): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] True if the device is currently online */
		isOnline?(): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of online  
		* @param online bool 
		*/
		setOnline?( online?:bool ): void;
		/** [Method] Sets the value of type  
		* @param type any 
		*/
		setType?( type?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.device {
	export interface IConnection extends Ext.IBase,Ext.device.connection.IAbstract {
	}
	export class Connection {
		/** [Method] Returns the value of online  */
		static getOnline(): bool;
		/** [Method] Returns the current connection type  */
		static getType(): string;
		/** [Method] True if the device is currently online */
		static isOnline(): bool;
		/** [Method] Sets the value of online  
		* @param online bool 
		*/
		static setOnline( online?:bool ): void;
		/** [Method] Sets the value of type  
		* @param type any 
		*/
		static setType( type?:any ): void;
	}
}
declare module Ext.device.connection {
	export interface IPhoneGap extends Ext.device.connection.IAbstract {
		/** [Method] Returns the value of online  */
		getOnline?(): bool;
		/** [Method] Returns the current connection type  */
		getType?(): string;
	}
}
declare module Ext.device.connection {
	export interface ISencha extends Ext.device.connection.IAbstract {
	}
}
declare module Ext.device.connection {
	export interface ISimulator extends Ext.device.connection.IAbstract {
		/** [Method] Returns the value of online  */
		getOnline?(): bool;
	}
}
declare module Ext.device.contacts {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		includeImages?: bool;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns an Array of contact objects  
		* @param config any 
		*/
		getContacts?( config?:any ): any[];
		/** [Method] Returns the value of includeImages  */
		getIncludeImages?(): bool;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns localized user readable label for a contact field i e  
		* @param config any 
		*/
		getLocalizedLabel?( config?:any ): string;
		/** [Method] Returns base64 encoded image thumbnail for a contact specified in config id 
		* @param config any 
		*/
		getThumbnail?( config?:any ): string;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of includeImages  
		* @param includeImages bool 
		*/
		setIncludeImages?( includeImages?:bool ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.device {
	export interface IContacts extends Ext.IBase,Ext.device.contacts.IAbstract,Ext.device.contacts.ISencha {
	}
	export class Contacts {
		/** [Method]  */
		constructor();
		/** [Method] Returns an Array of contact objects  
		* @param config any 
		*/
		static getContacts( config?:any ): any[];
		/** [Method] Returns the value of includeImages  */
		static getIncludeImages(): bool;
		/** [Method] Returns localized user readable label for a contact field i e  
		* @param config any 
		*/
		static getLocalizedLabel( config?:any ): string;
		/** [Method] Returns base64 encoded image thumbnail for a contact specified in config id 
		* @param config any 
		*/
		static getThumbnail( config?:any ): string;
		/** [Method] Sets the value of includeImages  
		* @param includeImages bool 
		*/
		static setIncludeImages( includeImages?:bool ): void;
	}
}
declare module Ext.device.contacts {
	export interface ISencha extends Ext.device.contacts.IAbstract {
		/** [Method] Returns an Array of contact objects  
		* @param config any 
		*/
		getContacts?( config?:any ): any[];
		/** [Method] Returns localized user readable label for a contact field i e  
		* @param config any 
		*/
		getLocalizedLabel?( config?:any ): string;
		/** [Method] Returns base64 encoded image thumbnail for a contact specified in config id 
		* @param config any 
		*/
		getThumbnail?( config?:any ): string;
	}
}
declare module Ext.device.device {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (String) */
		name?: string;
		/** [Property] (String) */
		platform?: string;
		/** [Property] (Object/Boolean) */
		scheme?: any;
		/** [Property] (String) */
		uuid?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Opens a specified URL  
		* @param url string The URL to open 
		*/
		openURL?( url?:string ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.device {
	export interface IDevice extends Ext.IBase,Ext.device.device.IAbstract {
	}
	export class Device {
		/** [Method]  */
		constructor();
		/** [Method] Opens a specified URL  
		* @param url string The URL to open 
		*/
		static openURL( url?:string ): void;
	}
}
declare module Ext.device.device {
	export interface IPhoneGap extends Ext.device.device.IAbstract {
	}
}
declare module Ext.device.device {
	export interface ISencha extends Ext.device.device.IAbstract {
		/** [Method] Opens a specified URL  
		* @param url any 
		*/
		openURL?( url?:any ): void;
	}
}
declare module Ext.device.device {
	export interface ISimulator extends Ext.device.device.IAbstract {
	}
}
declare module Ext.device.geolocation {
	export interface IAbstract extends Ext.IBase {
		/** [Config Option] (Boolean) */
		allowHighAccuracy?: bool;
		/** [Config Option] (Number) */
		frequency?: number;
		/** [Config Option] (Number) */
		maximumAge?: number;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Returns the value of allowHighAccuracy  */
		getAllowHighAccuracy?(): bool;
		/** [Method] Attempts to get the current position of this device  
		* @param config any An object which contains the following config options: 
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Returns the value of frequency  */
		getFrequency?(): number;
		/** [Method] Returns the value of maximumAge  */
		getMaximumAge?(): number;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] Sets the value of allowHighAccuracy  
		* @param allowHighAccuracy bool 
		*/
		setAllowHighAccuracy?( allowHighAccuracy?:bool ): void;
		/** [Method] Sets the value of frequency  
		* @param frequency number 
		*/
		setFrequency?( frequency?:number ): void;
		/** [Method] Sets the value of maximumAge  
		* @param maximumAge number 
		*/
		setMaximumAge?( maximumAge?:number ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency  
		* @param config any An object which contains the following config options: 
		*/
		watchPosition?( config?:any ): void;
	}
}
declare module Ext.device {
	export interface IGeolocation extends Ext.IBase,Ext.device.geolocation.IAbstract {
	}
	export class Geolocation {
		/** [Method]  */
		constructor();
		/** [Method] If you are currently watching for the current position this will stop that task  */
		static clearWatch(): void;
		/** [Method] Returns the value of allowHighAccuracy  */
		static getAllowHighAccuracy(): bool;
		/** [Method] Attempts to get the current position of this device  
		* @param config any An object which contains the following config options: 
		*/
		static getCurrentPosition( config?:any ): void;
		/** [Method] Returns the value of frequency  */
		static getFrequency(): number;
		/** [Method] Returns the value of maximumAge  */
		static getMaximumAge(): number;
		/** [Method] Returns the value of timeout  */
		static getTimeout(): number;
		/** [Method] Sets the value of allowHighAccuracy  
		* @param allowHighAccuracy bool 
		*/
		static setAllowHighAccuracy( allowHighAccuracy?:bool ): void;
		/** [Method] Sets the value of frequency  
		* @param frequency number 
		*/
		static setFrequency( frequency?:number ): void;
		/** [Method] Sets the value of maximumAge  
		* @param maximumAge number 
		*/
		static setMaximumAge( maximumAge?:number ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		static setTimeout( timeout?:number ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency  
		* @param config any An object which contains the following config options: 
		*/
		static watchPosition( config?:any ): void;
	}
}
declare module Ext.device.geolocation {
	export interface ISencha extends Ext.device.geolocation.IAbstract {
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Attempts to get the current position of this device  
		* @param config any 
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency  
		* @param config any 
		*/
		watchPosition?( config?:any ): void;
	}
}
declare module Ext.device.geolocation {
	export interface ISimulator extends Ext.device.geolocation.IAbstract {
		/** [Method] If you are currently watching for the current position this will stop that task  */
		clearWatch?(): void;
		/** [Method] Attempts to get the current position of this device  
		* @param config any 
		*/
		getCurrentPosition?( config?:any ): void;
		/** [Method] Watches for the current position and calls the callback when successful depending on the specified frequency  
		* @param config any 
		*/
		watchPosition?( config?:any ): void;
	}
}
declare module Ext.device.notification {
	export interface IAbstract extends Ext.IBase {
		/** [Method] A simple way to show a notification  
		* @param config any An object which contains the following config options: 
		*/
		show?( config?:any ): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare module Ext.device {
	export interface INotification extends Ext.IBase,Ext.device.notification.IAbstract {
	}
	export class Notification {
		/** [Method]  */
		constructor();
		/** [Method] A simple way to show a notification  
		* @param config any An object which contains the following config options: 
		*/
		static show( config?:any ): void;
		/** [Method] Vibrates the device  */
		static vibrate(): void;
	}
}
declare module Ext.device.notification {
	export interface IPhoneGap extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification  */
		show?(): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare module Ext.device.notification {
	export interface ISencha extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification  */
		show?(): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare module Ext.device.notification {
	export interface ISimulator extends Ext.device.notification.IAbstract {
		/** [Method] A simple way to show a notification  */
		show?(): void;
		/** [Method] Vibrates the device  */
		vibrate?(): void;
	}
}
declare module Ext.device.orientation {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.device.orientation {
	export interface IHTML5 extends Ext.device.orientation.IAbstract {
	}
}
declare module Ext.device {
	export interface IOrientation extends Ext.IBase,Ext.device.orientation.IAbstract {
	}
	export class Orientation {
		/** [Method]  */
		constructor();
	}
}
declare module Ext.device.orientation {
	export interface ISencha extends Ext.device.orientation.IAbstract {
	}
}
declare module Ext.device {
	export interface IPurchases extends Ext.IBase,Ext.device.purchases.ISencha {
	}
	export class Purchases {
		/** [Method]  */
		constructor();
		/** [Method] Checks if the current user is able to make payments  
		* @param config any 
		*/
		static canMakePayments( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases delivered to the current user  
		* @param config any 
		*/
		static getCompletedPurchases( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all products available to purchase  
		* @param config any 
		*/
		static getProducts( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases the current user has been charged  
		* @param config any 
		*/
		static getPurchases( config?:any ): void;
	}
}
declare module Ext.device.purchases {
	export interface IProduct extends Ext.data.IModel {
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Method] Returns the value of fields  */
		getFields?(): any[];
		/** [Method] Will attempt to purchase this product  
		* @param config any 
		*/
		purchase?( config?:any ): void;
		/** [Method] Sets the value of fields  
		* @param fields any[] 
		*/
		setFields?( fields?:any[] ): void;
	}
}
declare module Ext.device.purchases {
	export interface IPurchase extends Ext.data.IModel {
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Method] Attempts to mark this purchase as complete 
		* @param config any 
		*/
		complete?( config?:any ): void;
		/** [Method] Returns the value of fields  */
		getFields?(): any[];
		/** [Method] Sets the value of fields  
		* @param fields any[] 
		*/
		setFields?( fields?:any[] ): void;
	}
}
declare module Ext.device.purchases {
	export interface ISencha extends Ext.IBase {
		/** [Method] Checks if the current user is able to make payments  
		* @param config any 
		*/
		canMakePayments?( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases delivered to the current user  
		* @param config any 
		*/
		getCompletedPurchases?( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all products available to purchase  
		* @param config any 
		*/
		getProducts?( config?:any ): void;
		/** [Method] Returns a Ext data Store instance of all purchases the current user has been charged  
		* @param config any 
		*/
		getPurchases?( config?:any ): void;
	}
}
declare module Ext.device.push {
	export interface IAbstract extends Ext.IBase {
		/** [Property] (Number) */
		ALERT?: number;
		/** [Property] (Number) */
		BADGE?: number;
		/** [Property] (Number) */
		SOUND?: number;
		/** [Method] Registers a push notification  
		* @param config any The configuration for to pass when registering this push notification service. 
		*/
		register?( config?:any ): void;
	}
}
declare module Ext.device {
	export interface IPush extends Ext.IBase,Ext.device.push.IAbstract {
	}
	export class Push {
		/** [Method]  */
		constructor();
		/** [Method] Registers a push notification  
		* @param config any The configuration for to pass when registering this push notification service. 
		*/
		static register( config?:any ): void;
	}
}
declare module Ext.device.push {
	export interface ISencha extends Ext.device.push.IAbstract {
		/** [Method] Registers a push notification  */
		register?(): void;
	}
}
declare module Ext.device.sqlite {
	export interface IDatabase extends Ext.IBase {
		/** [Method] Verifies and changes the version of the database at the same time as doing a schema update with a Ext device SQLite S  
		* @param config any The object which contains the following config options: 
		*/
		changeVersion?( config?:any ): void;
		/** [Method] Returns the current version of the database  */
		getVersion?(): string;
		/** [Method] Works same as transaction but performs a Ext device SQLite SQLTransaction instance with a read only mode  
		* @param config any 
		*/
		readTransaction?( config?:any ): void;
		/** [Method] Performs a Ext device SQLite SQLTransaction instance with a read write mode  
		* @param config any The object which contains the following config options: 
		*/
		transaction?( config?:any ): void;
	}
}
declare module Ext.device {
	export interface ISQLite extends Ext.IBase,Ext.device.sqlite.ISencha {
	}
	export class SQLite {
		/** [Method]  */
		constructor();
		/** [Method] Returns a Ext device SQLite Database instance  
		* @param config any The object which contains the following config options: 
		*/
		static openDatabase( config?:any ): Ext.device.sqlite.IDatabase;
	}
}
declare module Ext.device.sqlite {
	export interface ISencha extends Ext.IBase {
		/** [Method] Returns a Ext device SQLite Database instance  
		* @param config any The object which contains the following config options: 
		*/
		openDatabase?( config?:any ): Ext.device.sqlite.IDatabase;
	}
}
declare module Ext.device.sqlite {
	export interface ISQLResultSet extends Ext.IBase {
		/** [Method] Returns the row ID of the last row that the SQL statement inserted into the database if the statement inserted any r  */
		getInsertId?(): number;
		/** [Method] Returns a Ext device SQLite SQLResultSetRowList instance representing rows returned by the SQL statement  */
		getRows?(): Ext.device.sqlite.ISQLResultSetRowList;
		/** [Method] Returns the number of rows that were changed by the SQL statement  */
		getRowsAffected?(): number;
	}
}
declare module Ext.device.sqlite {
	export interface ISQLResultSetRowList extends Ext.IBase {
		/** [Method] Returns the number of rows returned by the SQL statement  */
		getLength?(): number;
		/** [Method] Returns a row at specified index returned by the SQL statement  
		* @param index number The index of a row. This is required. 
		*/
		item?( index?:number ): any;
	}
}
declare module Ext.device.sqlite {
	export interface ISQLTransaction extends Ext.IBase {
		/** [Method] Executes an SQL statement  
		* @param config any The object which contains the following config options: 
		*/
		executeSql?( config?:any ): void;
	}
}
declare module Ext.direct {
	export interface IEvent extends Ext.IBase {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Method] Returns the value of code  */
		getCode?(): any;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Returns the value of message  */
		getMessage?(): string;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of result  */
		getResult?(): any;
		/** [Method] Returns the value of status  */
		getStatus?(): bool;
		/** [Method] Returns the value of transaction  */
		getTransaction?(): any;
		/** [Method] Returns the value of xhr  */
		getXhr?(): any;
		/** [Method] Sets the value of code  
		* @param code any 
		*/
		setCode?( code?:any ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of message  
		* @param message string 
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of result  
		* @param result any 
		*/
		setResult?( result?:any ): void;
		/** [Method] Sets the value of status  
		* @param status bool 
		*/
		setStatus?( status?:bool ): void;
		/** [Method] Sets the value of transaction  
		* @param transaction any 
		*/
		setTransaction?( transaction?:any ): void;
		/** [Method] Sets the value of xhr  
		* @param xhr any 
		*/
		setXhr?( xhr?:any ): void;
	}
}
declare module Ext.direct {
	export interface IExceptionEvent extends Ext.direct.IRemotingEvent {
		/** [Config Option] (String) */
		name?: string;
		/** [Method] Returns the value of error  */
		getError?(): any;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of status  */
		getStatus?(): bool;
		/** [Method] Sets the value of error  
		* @param error any 
		*/
		setError?( error?:any ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of status  
		* @param status bool 
		*/
		setStatus?( status?:bool ): void;
	}
}
declare module Ext.direct {
	export interface IJsonProvider extends Ext.direct.IProvider {
		/** [Method] Create an event from a response object  
		* @param response any The XHR response object. 
		*/
		createEvent?( response?:any ): Ext.direct.IEvent;
	}
}
declare module Ext.direct {
	export interface IManager extends Ext.IBase,Ext.mixin.IObservable {
	}
	export class Manager {
		/** [Method]  
		* @param config any 
		*/
		constructor( config?:any );
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static addAfterListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static addBeforeListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static addListener( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static addManagedListener( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		static addManagedListener( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods  
		* @param provider any Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext.Direct how to create client-side stub methods. 
		*/
		static addProvider( provider?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( events?:any ): any;
		static enableBubble( events?:string ): void;
		static enableBubble( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		static fireEvent( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		static getBubbleEvents(): string;
		/** [Method] Returns the value of bubbleEvents  */
		static getBubbleEvents(): string[];
		/** [Method] Returns the value of listeners  */
		static getListeners(): any;
		/** [Method] Retrieves a provider by the id specified when the provider is added  
		* @param id any The id of the provider, or the provider instance. 
		*/
		static getProvider( id?:any ): any;
		static getProvider( id?:string ): any;
		static getProvider( id?:Ext.direct.IProvider ): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		static hasListener( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static mon( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		static mon( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		static mun( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		static mun( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static on( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static onAfter( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static onBefore( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Parses a direct function  
		* @param fn any The direct function 
		*/
		static parseMethod( fn?:any ): any;
		static parseMethod( fn?:string ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static removeAfterListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static removeBeforeListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static removeListener( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		static removeManagedListener( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		static removeManagedListener( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Removes the provider  
		* @param provider any The provider instance or the id of the provider. 
		*/
		static removeProvider( provider?:any ): any;
		static removeProvider( provider?:string ): Ext.direct.IProvider;
		static removeProvider( provider?:Ext.direct.IProvider ): Ext.direct.IProvider;
		/** [Method] Removes the provider  
		* @param provider String The provider instance or the id of the provider. 
		*/
		static removeProvider( provider?:string ): undefined;
		static removeProvider( provider?:Ext.direct.IProvider ): undefined;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		static resumeEvents( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		static setBubbleEvents( bubbleEvents?:any ): any;
		static setBubbleEvents( bubbleEvents?:string ): void;
		static setBubbleEvents( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static un( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static unAfter( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static unBefore( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext {
	export interface IDirect extends Ext.IBase,Ext.mixin.IObservable {
	}
	export class Direct {
		/** [Method]  
		* @param config any 
		*/
		constructor( config?:any );
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static addAfterListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static addBeforeListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		static addEvents( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static addListener( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		static addManagedListener( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static addManagedListener( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		static addManagedListener( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods  
		* @param provider any Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext.Direct how to create client-side stub methods. 
		*/
		static addProvider( provider?:any ): any;
		/** [Method] Removes all listeners for this object  */
		static clearListeners(): void;
		/** [Method]  */
		static destroy(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( events?:any ): any;
		static enableBubble( events?:string ): void;
		static enableBubble( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		static fireEvent( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		static getBubbleEvents(): string;
		/** [Method] Returns the value of bubbleEvents  */
		static getBubbleEvents(): string[];
		/** [Method] Returns the value of listeners  */
		static getListeners(): any;
		/** [Method] Retrieves a provider by the id specified when the provider is added  
		* @param id any The id of the provider, or the provider instance. 
		*/
		static getProvider( id?:any ): any;
		static getProvider( id?:string ): any;
		static getProvider( id?:Ext.direct.IProvider ): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		static hasListener( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		static mon( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static mon( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		static mon( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		static mun( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		static mun( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		static mun( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static on( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static onAfter( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static onBefore( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Parses a direct function  
		* @param fn any The direct function 
		*/
		static parseMethod( fn?:any ): any;
		static parseMethod( fn?:string ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		static relayEvents( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static removeAfterListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static removeBeforeListener( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static removeListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static removeListener( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		static removeManagedListener( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		static removeManagedListener( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		static removeManagedListener( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Removes the provider  
		* @param provider any The provider instance or the id of the provider. 
		*/
		static removeProvider( provider?:any ): any;
		static removeProvider( provider?:string ): Ext.direct.IProvider;
		static removeProvider( provider?:Ext.direct.IProvider ): Ext.direct.IProvider;
		/** [Method] Removes the provider  
		* @param provider String The provider instance or the id of the provider. 
		*/
		static removeProvider( provider?:string ): undefined;
		static removeProvider( provider?:Ext.direct.IProvider ): undefined;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		static resumeEvents( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		static setBubbleEvents( bubbleEvents?:any ): any;
		static setBubbleEvents( bubbleEvents?:string ): void;
		static setBubbleEvents( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		static setListeners( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		static suspendEvents(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		static un( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		static un( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static unAfter( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		static unBefore( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.direct {
	export interface IPollingProvider extends Ext.direct.IJsonProvider {
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Config Option] (String/Function) */
		url?: any;
		/** [Method] Connect to the server side and begin the polling process  */
		connect?(): void;
		/** [Method] Disconnect from the server side and stop the polling process  */
		disconnect?(): void;
		/** [Method] Returns the value of baseParams  */
		getBaseParams?(): any;
		/** [Method] Returns the value of interval  */
		getInterval?(): number;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns the value of url  */
		getUrl?(): any;
		/** [Method] Returns whether or not the server side is currently connected  */
		isConnected?(): bool;
		/** [Method] Sets the value of baseParams  
		* @param baseParams any 
		*/
		setBaseParams?( baseParams?:any ): void;
		/** [Method] Sets the value of interval  
		* @param interval number 
		*/
		setInterval?( interval?:number ): void;
		/** [Method] Sets the value of url  
		* @param url any 
		*/
		setUrl?( url?:any ): any;
		setUrl?( url?:string ): void;
	}
}
declare module Ext.direct {
	export interface IProvider extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		id?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Abstract methods for subclasses to implement  */
		connect?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Abstract methods for subclasses to implement  */
		disconnect?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of id  */
		getId?(): string;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Returns whether or not the server side is currently connected  */
		isConnected?(): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of id  
		* @param id string 
		*/
		setId?( id?:string ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.direct {
	export interface IRemotingEvent extends Ext.direct.IEvent {
		/** [Config Option] (String) */
		name?: string;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of tid  */
		getTid?(): any;
		/** [Method] Get the transaction associated with this event  */
		getTransaction?(): Ext.direct.ITransaction;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of tid  
		* @param tid any 
		*/
		setTid?( tid?:any ): void;
		/** [Method] Sets the value of transaction  
		* @param transaction any 
		*/
		setTransaction?( transaction?:any ): void;
	}
}
declare module Ext.direct {
	export interface IRemotingMethod extends Ext.IBase {
		/** [Method] Takes the arguments for the Direct function and splits the arguments from the scope and the callback  
		* @param args any[] The arguments passed to the direct call 
		*/
		getCallData?( args?:any[] ): any;
		/** [Method] Returns the value of formHandler  */
		getFormHandler?(): any;
		/** [Method] Returns the value of len  */
		getLen?(): any;
		/** [Method] Returns the value of name  */
		getName?(): any;
		/** [Method] Returns the value of ordered  */
		getOrdered?(): bool;
		/** [Method] Returns the value of params  */
		getParams?(): any;
		/** [Method] Sets the value of formHandler  
		* @param formHandler any 
		*/
		setFormHandler?( formHandler?:any ): void;
		/** [Method] Sets the value of len  
		* @param len any 
		*/
		setLen?( len?:any ): void;
		/** [Method] Sets the value of name  
		* @param name any 
		*/
		setName?( name?:any ): void;
		/** [Method] Sets the value of ordered  
		* @param ordered bool 
		*/
		setOrdered?( ordered?:bool ): void;
		/** [Method] Sets the value of params  
		* @param params any 
		*/
		setParams?( params?:any ): void;
	}
}
declare module Ext.direct {
	export interface IRemotingProvider extends Ext.direct.IJsonProvider {
		/** [Config Option] (Object) */
		actions?: any;
		/** [Config Option] (Number/Boolean) */
		enableBuffer?: any;
		/** [Config Option] (String) */
		enableUrlEncode?: string;
		/** [Config Option] (Number) */
		maxRetries?: number;
		/** [Config Option] (String/Object) */
		namespace?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Abstract methods for subclasses to implement  */
		connect?(): void;
		/** [Method] Abstract methods for subclasses to implement  */
		disconnect?(): void;
		/** [Method] Returns the value of actions  */
		getActions?(): any;
		/** [Method] Returns the value of enableBuffer  */
		getEnableBuffer?(): number;
		/** [Method] Returns the value of enableBuffer  */
		getEnableBuffer?(): bool;
		/** [Method] Returns the value of enableUrlEncode  */
		getEnableUrlEncode?(): string;
		/** [Method] Returns the value of maxRetries  */
		getMaxRetries?(): number;
		/** [Method] Returns the value of namespace  */
		getNamespace?(): any;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns whether or not the server side is currently connected  */
		isConnected?(): bool;
		/** [Method] Sets the value of actions  
		* @param actions any 
		*/
		setActions?( actions?:any ): void;
		/** [Method] Sets the value of enableBuffer  
		* @param enableBuffer any 
		*/
		setEnableBuffer?( enableBuffer?:any ): any;
		setEnableBuffer?( enableBuffer?:number ): void;
		setEnableBuffer?( enableBuffer?:bool ): void;
		/** [Method] Sets the value of enableUrlEncode  
		* @param enableUrlEncode string 
		*/
		setEnableUrlEncode?( enableUrlEncode?:string ): void;
		/** [Method] Sets the value of maxRetries  
		* @param maxRetries number 
		*/
		setMaxRetries?( maxRetries?:number ): void;
		/** [Method] Sets the value of namespace  
		* @param namespace any 
		*/
		setNamespace?( namespace?:any ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
	}
}
declare module Ext.direct {
	export interface ITransaction extends Ext.IBase {
		/** [Method] Returns the value of action  */
		getAction?(): any;
		/** [Method] Returns the value of args  */
		getArgs?(): any;
		/** [Method] Returns the value of callback  */
		getCallback?(): any;
		/** [Method] Returns the value of data  */
		getData?(): any;
		/** [Method] Returns the value of form  */
		getForm?(): any;
		/** [Method] Returns the value of id  */
		getId?(): any;
		/** [Method] Returns the value of method  */
		getMethod?(): any;
		/** [Method] Returns the value of provider  */
		getProvider?(): any;
		/** [Method] Returns the value of retryCount  */
		getRetryCount?(): number;
		/** [Method] Sets the value of action  
		* @param action any 
		*/
		setAction?( action?:any ): void;
		/** [Method] Sets the value of args  
		* @param args any 
		*/
		setArgs?( args?:any ): void;
		/** [Method] Sets the value of callback  
		* @param callback any 
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of data  
		* @param data any 
		*/
		setData?( data?:any ): void;
		/** [Method] Sets the value of form  
		* @param form any 
		*/
		setForm?( form?:any ): void;
		/** [Method] Sets the value of id  
		* @param id any 
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of method  
		* @param method any 
		*/
		setMethod?( method?:any ): void;
		/** [Method] Sets the value of provider  
		* @param provider any 
		*/
		setProvider?( provider?:any ): void;
		/** [Method] Sets the value of retryCount  
		* @param retryCount number 
		*/
		setRetryCount?( retryCount?:number ): void;
	}
}
declare module Ext.dom {
	export interface ICompositeElement extends Ext.dom.ICompositeElementLite {
	}
}
declare module Ext {
	export interface ICompositeElement extends Ext.dom.ICompositeElementLite {
	}
}
declare module Ext.dom {
	export interface ICompositeElementLite extends Ext.IBase,Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];
		/** [Method] Adds elements to this Composite object  
		* @param els any Either an Array of DOM elements to add, or another Composite object who's elements should be added. 
		* @param root any The root element of the query or id of the root. 
		*/
		add?( els?:any, root?:any ): any;
		add?( els?:HTMLElement[], root?:HTMLElement ): Ext.dom.ICompositeElementLite;
		add?( els?:Ext.dom.ICompositeElementLite, root?:HTMLElement ): Ext.dom.ICompositeElementLite;
		add?( els?:HTMLElement[], root?:string ): Ext.dom.ICompositeElementLite;
		add?( els?:Ext.dom.ICompositeElementLite, root?:string ): Ext.dom.ICompositeElementLite;
		/** [Method] Adds the given CSS class es to this Element  
		* @param names string The CSS class(es) to add to this element. 
		* @param prefix string Prefix to prepend to each class. 
		* @param suffix string Suffix to append to each class. 
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] fixes scope with flyweight  
		* @param eventName any 
		* @param handler any 
		* @param scope any 
		* @param opt any 
		*/
		addListener?( eventName?:any, handler?:any, scope?:any, opt?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Appends the passed element s to this element  
		* @param element any a DOM Node or an existing Element. 
		*/
		appendChild?( element?:any ): any;
		appendChild?( element?:HTMLElement ): Ext.dom.IElement;
		appendChild?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element  
		* @param el any The new parent element. The id of the node, a DOM Node or an existing Element. 
		*/
		appendTo?( el?:any ): any;
		appendTo?( el?:string ): Ext.dom.IElement;
		appendTo?( el?:HTMLElement ): Ext.dom.IElement;
		appendTo?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles any A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Removes all elements  */
		clear?(): void;
		/** [Method] Returns true if this composite contains the passed element 
		* @param el any The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection. 
		*/
		contains?( el?:any ): any;
		contains?( el?:string ): bool;
		contains?( el?:HTMLElement ): bool;
		contains?( el?:Ext.IElement ): bool;
		contains?( el?:number ): bool;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config any DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element. 
		* @param returnDom bool true to return the dom node instead of creating an Element. 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Calls the passed function for each element in this composite  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the Element. 
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Clears this Composite and adds the elements passed  
		* @param els any Either an array of DOM elements, or another Composite from which to fill this Composite. 
		*/
		fill?( els?:any ): any;
		fill?( els?:HTMLElement[] ): Ext.dom.ICompositeElementLite;
		fill?( els?:Ext.dom.ICompositeElementLite ): Ext.dom.ICompositeElementLite;
		/** [Method] Filters this composite to only elements that match the passed selector  
		* @param selector any A string CSS selector or a comparison function. The comparison function will be called with the following arguments: 
		*/
		filter?( selector?:any ): any;
		filter?( selector?:string ): Ext.dom.ICompositeElementLite;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Returns the first Element */
		first?(): Ext.dom.IElement;
		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element any The element to align to. 
		* @param position string The position to align to. 
		* @param offsets any[] Offset the positioning by [x, y]. 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor string The specified anchor position. 
		* @param local bool true to get the local (element top/left-relative) anchor position instead of page coordinates. 
		* @param size any An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size) 
		*/
		getAnchorXY?( anchor?:string, local?:bool, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name string The attribute name. 
		* @param namespace string The namespace in which to look for the attribute. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s  
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height */
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox bool If true a box for the content of the element is returned. 
		* @param local bool If true the element's left and top are returned instead of page x/y. 
		*/
		getBox?( contentBox?:bool, local?:bool ): any;
		/** [Method] Returns the number of elements in this Composite  */
		getCount?(): number;
		/** [Method] Returns the innerHTML of an element  */
		getHTML?(): string;
		/** [Method] Returns the offset height of the element  
		* @param contentHeight bool true to get the height minus borders and padding. 
		*/
		getHeight?( contentHeight?:bool ): number;
		/** [Method] Returns the innerHTML of an element  */
		getHtml?(): string;
		/** [Method] Gets the left X coordinate  */
		getLeft?(): number;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides string Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element  
		* @param element any The element to get the offsets from. 
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param asRegion bool If true an Ext.util.Region will be returned. 
		*/
		getPageBox?( asRegion?:bool ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width */
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element  
		* @param contentSize bool true to get the width/size minus borders and padding. 
		*/
		getSize?( contentSize?:bool ): any;
		/** [Method] Normalizes currentStyle and computedStyle  
		* @param prop string The style property whose value is returned. 
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate  */
		getTop?(): number;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): string;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): number;
		/** [Method] Returns the dimensions of the element available to lay content out in  */
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element  
		* @param contentWidth bool true to get the width minus borders and padding. 
		*/
		getWidth?( contentWidth?:bool ): number;
		/** [Method] Gets the current X position of the element based on page coordinates  
		* @param el any 
		*/
		getX?( el?:any ): number;
		/** [Method] Gets the current position of the element based on page coordinates  */
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates  
		* @param el any 
		*/
		getY?( el?:any ): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name string The CSS class to check for. 
		*/
		hasCls?( name?:string ): bool;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Find the index of the passed element within the composite collection  
		* @param el any The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection. 
		*/
		indexOf?( el?:any ): any;
		indexOf?( el?:string ): number;
		indexOf?( el?:HTMLElement ): number;
		indexOf?( el?:Ext.IElement ): number;
		indexOf?( el?:number ): number;
		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el any The element to insert after. The id of the node, a DOM Node or an existing Element. 
		*/
		insertAfter?( el?:any ): any;
		insertAfter?( el?:string ): Ext.dom.IElement;
		insertAfter?( el?:HTMLElement ): Ext.dom.IElement;
		insertAfter?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el any The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		*/
		insertBefore?( el?:any ): any;
		insertBefore?( el?:string ): Ext.dom.IElement;
		insertBefore?( el?:HTMLElement ): Ext.dom.IElement;
		insertBefore?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element  
		* @param element any The id or element to insert. 
		*/
		insertFirst?( element?:any ): any;
		insertFirst?( element?:string ): Ext.dom.IElement;
		insertFirst?( element?:HTMLElement ): Ext.dom.IElement;
		insertFirst?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): HTMLElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): Ext.dom.IElement;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el any The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where string 'before' or 'after'. 
		* @param returnDom bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector string The simple selector to test. 
		*/
		is?( selector?:string ): bool;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style string property whose value is returned. 
		* @param value string to check against. 
		*/
		isStyle?( style?:string, value?:string ): bool;
		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop string The style property whose value is to be tested. 
		*/
		isTransparent?( prop?:string ): bool;
		/** [Method] Returns a flyweight Element of the dom element object at the specified index  
		* @param index number 
		*/
		item?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns the last Element */
		last?(): Ext.dom.IElement;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className any The CSS class to add, or an array of classes. 
		*/
		radioCls?( className?:any ): any;
		radioCls?( className?:string ): Ext.dom.IElement;
		radioCls?( className?:string[] ): Ext.dom.IElement;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes the given CSS class es from this Element  
		* @param names string The CSS class(es) to remove from this element. 
		* @param prefix string Prefix to prepend to each class to be removed. 
		* @param suffix string Suffix to append to each class to be removed. 
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes the specified element s 
		* @param el any The id of an element, the Element itself, the index of the element in this composite or an array of any of those. 
		* @param removeDom any true to also remove the element from the document 
		*/
		removeElement?( el?:any, removeDom?:any ): any;
		removeElement?( el?:string, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:HTMLElement, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:Ext.IElement, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:number, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Forces the browser to repaint this element  */
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element  
		* @param element any The element to replace. The id of the node, a DOM Node or an existing Element. 
		*/
		replace?( element?:any ): any;
		replace?( element?:string ): Ext.dom.IElement;
		replace?( element?:HTMLElement ): Ext.dom.IElement;
		replace?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName string The CSS class to replace. 
		* @param newName string The replacement CSS class. 
		* @param prefix string Prefix to prepend to each class to be replaced. 
		* @param suffix string Suffix to append to each class to be replaced. 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces the specified element with the passed element  
		* @param el any The id of an element, the Element itself, the index of the element in this composite to replace. 
		* @param replacement any The id of an element or the Element itself. 
		* @param domReplace any true to remove and replace the element in the document too. 
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:any ): any;
		replaceElement?( el?:string, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:HTMLElement, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:Ext.IElement, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:number, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:string, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:HTMLElement, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:Ext.IElement, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:number, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Replaces this element with the passed element  
		* @param el any The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create. 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector any The CSS selector or an array of elements 
		* @param composite any Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		*/
		select?( selector?:any, composite?:any ): any;
		select?( selector?:string, composite?:bool ): Ext.dom.ICompositeElementLite;
		select?( selector?:HTMLElement[], composite?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form any The form 
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes any The object with the attributes. 
		* @param useSet bool false to override the default setAttribute to use expandos. 
		*/
		set?( attributes?:any, useSet?:bool ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style  
		* @param bottom string The bottom CSS property value. 
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box  
		* @param box any The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... } 
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className any The CSS class to set on this element. 
		*/
		setCls?( className?:any ): any;
		setCls?( className?:string ): void;
		setCls?( className?:any[] ): void;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element  
		* @param height any The new height. 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): Ext.dom.IElement;
		setHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left string The left CSS property value. 
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum height of this Element  
		* @param height any The new maximum height. 
		*/
		setMaxHeight?( height?:any ): any;
		setMaxHeight?( height?:number ): Ext.dom.IElement;
		setMaxHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element  
		* @param width any The new maximum width. 
		*/
		setMaxWidth?( width?:any ): any;
		setMaxWidth?( width?:number ): Ext.dom.IElement;
		setMaxWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element  
		* @param height any The new minimum height. 
		*/
		setMinHeight?( height?:any ): any;
		setMinHeight?( height?:number ): Ext.dom.IElement;
		setMinHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element  
		* @param width any The new minimum width. 
		*/
		setMinWidth?( width?:any ): any;
		setMinWidth?( width?:number ): Ext.dom.IElement;
		setMinWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style  
		* @param right string The right CSS property value. 
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element  
		* @param width any The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height any The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.  
		*/
		setSize?( width?:any, height?:any ): any;
		setSize?( width?:number, height?:number ): Ext.dom.IElement;
		setSize?( width?:string, height?:number ): Ext.dom.IElement;
		setSize?( width?:number, height?:string ): Ext.dom.IElement;
		setSize?( width?:string, height?:string ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property any The style property to be set, or an object of multiple styles. 
		* @param value string The value to apply to the given property, or null if an object was passed. 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top string The top CSS property value. 
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param mode any 
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details 
		* @param visible bool Whether the element is visible. 
		*/
		setVisible?( visible?:bool ): Ext.IElement;
		/** [Method] Set the width of this Element  
		* @param width any The new width. 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): Ext.dom.IElement;
		setWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates  
		* @param x number The X position of the element 
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned  
		* @param pos number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based). 
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates  
		* @param y number The Y position of the element. 
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className string The CSS class to toggle. 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element  
		* @param x any The page x or an array containing [x, y]. 
		* @param y any The page y, required if x is not an array. 
		*/
		translatePoints?( x?:any, y?:any ): any;
		translatePoints?( x?:number, y?:number ): any;
		translatePoints?( x?:any[], y?:number ): any;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector any The simple selector to test 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:any, maxDepth?:any ): any;
		up?( simpleSelector?:string, maxDepth?:number ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:string ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector string The simple selector to test 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:string, maxDepth?:number ): undefined;
		up?( simpleSelector?:string, maxDepth?:string ): undefined;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): undefined;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): undefined;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): HTMLElement;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): Ext.dom.IElement;
	}
}
declare module Ext {
	export interface ICompositeElementLite extends Ext.IBase,Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];
		/** [Method] Adds elements to this Composite object  
		* @param els any Either an Array of DOM elements to add, or another Composite object who's elements should be added. 
		* @param root any The root element of the query or id of the root. 
		*/
		add?( els?:any, root?:any ): any;
		add?( els?:HTMLElement[], root?:HTMLElement ): Ext.dom.ICompositeElementLite;
		add?( els?:Ext.dom.ICompositeElementLite, root?:HTMLElement ): Ext.dom.ICompositeElementLite;
		add?( els?:HTMLElement[], root?:string ): Ext.dom.ICompositeElementLite;
		add?( els?:Ext.dom.ICompositeElementLite, root?:string ): Ext.dom.ICompositeElementLite;
		/** [Method] Adds the given CSS class es to this Element  
		* @param names string The CSS class(es) to add to this element. 
		* @param prefix string Prefix to prepend to each class. 
		* @param suffix string Suffix to append to each class. 
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] fixes scope with flyweight  
		* @param eventName any 
		* @param handler any 
		* @param scope any 
		* @param opt any 
		*/
		addListener?( eventName?:any, handler?:any, scope?:any, opt?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Appends the passed element s to this element  
		* @param element any a DOM Node or an existing Element. 
		*/
		appendChild?( element?:any ): any;
		appendChild?( element?:HTMLElement ): Ext.dom.IElement;
		appendChild?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element  
		* @param el any The new parent element. The id of the node, a DOM Node or an existing Element. 
		*/
		appendTo?( el?:any ): any;
		appendTo?( el?:string ): Ext.dom.IElement;
		appendTo?( el?:HTMLElement ): Ext.dom.IElement;
		appendTo?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles any A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Removes all elements  */
		clear?(): void;
		/** [Method] Returns true if this composite contains the passed element 
		* @param el any The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection. 
		*/
		contains?( el?:any ): any;
		contains?( el?:string ): bool;
		contains?( el?:HTMLElement ): bool;
		contains?( el?:Ext.IElement ): bool;
		contains?( el?:number ): bool;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config any DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element. 
		* @param returnDom bool true to return the dom node instead of creating an Element. 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Calls the passed function for each element in this composite  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the Element. 
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Clears this Composite and adds the elements passed  
		* @param els any Either an array of DOM elements, or another Composite from which to fill this Composite. 
		*/
		fill?( els?:any ): any;
		fill?( els?:HTMLElement[] ): Ext.dom.ICompositeElementLite;
		fill?( els?:Ext.dom.ICompositeElementLite ): Ext.dom.ICompositeElementLite;
		/** [Method] Filters this composite to only elements that match the passed selector  
		* @param selector any A string CSS selector or a comparison function. The comparison function will be called with the following arguments: 
		*/
		filter?( selector?:any ): any;
		filter?( selector?:string ): Ext.dom.ICompositeElementLite;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Returns the first Element */
		first?(): Ext.dom.IElement;
		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element any The element to align to. 
		* @param position string The position to align to. 
		* @param offsets any[] Offset the positioning by [x, y]. 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor string The specified anchor position. 
		* @param local bool true to get the local (element top/left-relative) anchor position instead of page coordinates. 
		* @param size any An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size) 
		*/
		getAnchorXY?( anchor?:string, local?:bool, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name string The attribute name. 
		* @param namespace string The namespace in which to look for the attribute. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s  
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height */
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox bool If true a box for the content of the element is returned. 
		* @param local bool If true the element's left and top are returned instead of page x/y. 
		*/
		getBox?( contentBox?:bool, local?:bool ): any;
		/** [Method] Returns the number of elements in this Composite  */
		getCount?(): number;
		/** [Method] Returns the innerHTML of an element  */
		getHTML?(): string;
		/** [Method] Returns the offset height of the element  
		* @param contentHeight bool true to get the height minus borders and padding. 
		*/
		getHeight?( contentHeight?:bool ): number;
		/** [Method] Returns the innerHTML of an element  */
		getHtml?(): string;
		/** [Method] Gets the left X coordinate  */
		getLeft?(): number;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides string Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element  
		* @param element any The element to get the offsets from. 
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param asRegion bool If true an Ext.util.Region will be returned. 
		*/
		getPageBox?( asRegion?:bool ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width */
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element  
		* @param contentSize bool true to get the width/size minus borders and padding. 
		*/
		getSize?( contentSize?:bool ): any;
		/** [Method] Normalizes currentStyle and computedStyle  
		* @param prop string The style property whose value is returned. 
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate  */
		getTop?(): number;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): string;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): number;
		/** [Method] Returns the dimensions of the element available to lay content out in  */
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element  
		* @param contentWidth bool true to get the width minus borders and padding. 
		*/
		getWidth?( contentWidth?:bool ): number;
		/** [Method] Gets the current X position of the element based on page coordinates  
		* @param el any 
		*/
		getX?( el?:any ): number;
		/** [Method] Gets the current position of the element based on page coordinates  */
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates  
		* @param el any 
		*/
		getY?( el?:any ): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name string The CSS class to check for. 
		*/
		hasCls?( name?:string ): bool;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Find the index of the passed element within the composite collection  
		* @param el any The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection. 
		*/
		indexOf?( el?:any ): any;
		indexOf?( el?:string ): number;
		indexOf?( el?:HTMLElement ): number;
		indexOf?( el?:Ext.IElement ): number;
		indexOf?( el?:number ): number;
		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el any The element to insert after. The id of the node, a DOM Node or an existing Element. 
		*/
		insertAfter?( el?:any ): any;
		insertAfter?( el?:string ): Ext.dom.IElement;
		insertAfter?( el?:HTMLElement ): Ext.dom.IElement;
		insertAfter?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el any The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		*/
		insertBefore?( el?:any ): any;
		insertBefore?( el?:string ): Ext.dom.IElement;
		insertBefore?( el?:HTMLElement ): Ext.dom.IElement;
		insertBefore?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element  
		* @param element any The id or element to insert. 
		*/
		insertFirst?( element?:any ): any;
		insertFirst?( element?:string ): Ext.dom.IElement;
		insertFirst?( element?:HTMLElement ): Ext.dom.IElement;
		insertFirst?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): HTMLElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): Ext.dom.IElement;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el any The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where string 'before' or 'after'. 
		* @param returnDom bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector string The simple selector to test. 
		*/
		is?( selector?:string ): bool;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style string property whose value is returned. 
		* @param value string to check against. 
		*/
		isStyle?( style?:string, value?:string ): bool;
		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop string The style property whose value is to be tested. 
		*/
		isTransparent?( prop?:string ): bool;
		/** [Method] Returns a flyweight Element of the dom element object at the specified index  
		* @param index number 
		*/
		item?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns the last Element */
		last?(): Ext.dom.IElement;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className any The CSS class to add, or an array of classes. 
		*/
		radioCls?( className?:any ): any;
		radioCls?( className?:string ): Ext.dom.IElement;
		radioCls?( className?:string[] ): Ext.dom.IElement;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes the given CSS class es from this Element  
		* @param names string The CSS class(es) to remove from this element. 
		* @param prefix string Prefix to prepend to each class to be removed. 
		* @param suffix string Suffix to append to each class to be removed. 
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes the specified element s 
		* @param el any The id of an element, the Element itself, the index of the element in this composite or an array of any of those. 
		* @param removeDom any true to also remove the element from the document 
		*/
		removeElement?( el?:any, removeDom?:any ): any;
		removeElement?( el?:string, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:HTMLElement, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:Ext.IElement, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:number, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Forces the browser to repaint this element  */
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element  
		* @param element any The element to replace. The id of the node, a DOM Node or an existing Element. 
		*/
		replace?( element?:any ): any;
		replace?( element?:string ): Ext.dom.IElement;
		replace?( element?:HTMLElement ): Ext.dom.IElement;
		replace?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName string The CSS class to replace. 
		* @param newName string The replacement CSS class. 
		* @param prefix string Prefix to prepend to each class to be replaced. 
		* @param suffix string Suffix to append to each class to be replaced. 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces the specified element with the passed element  
		* @param el any The id of an element, the Element itself, the index of the element in this composite to replace. 
		* @param replacement any The id of an element or the Element itself. 
		* @param domReplace any true to remove and replace the element in the document too. 
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:any ): any;
		replaceElement?( el?:string, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:HTMLElement, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:Ext.IElement, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:number, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:string, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:HTMLElement, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:Ext.IElement, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:number, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Replaces this element with the passed element  
		* @param el any The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create. 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector any The CSS selector or an array of elements 
		* @param composite any Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		*/
		select?( selector?:any, composite?:any ): any;
		select?( selector?:string, composite?:bool ): Ext.dom.ICompositeElementLite;
		select?( selector?:HTMLElement[], composite?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form any The form 
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes any The object with the attributes. 
		* @param useSet bool false to override the default setAttribute to use expandos. 
		*/
		set?( attributes?:any, useSet?:bool ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style  
		* @param bottom string The bottom CSS property value. 
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box  
		* @param box any The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... } 
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className any The CSS class to set on this element. 
		*/
		setCls?( className?:any ): any;
		setCls?( className?:string ): void;
		setCls?( className?:any[] ): void;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element  
		* @param height any The new height. 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): Ext.dom.IElement;
		setHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left string The left CSS property value. 
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum height of this Element  
		* @param height any The new maximum height. 
		*/
		setMaxHeight?( height?:any ): any;
		setMaxHeight?( height?:number ): Ext.dom.IElement;
		setMaxHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element  
		* @param width any The new maximum width. 
		*/
		setMaxWidth?( width?:any ): any;
		setMaxWidth?( width?:number ): Ext.dom.IElement;
		setMaxWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element  
		* @param height any The new minimum height. 
		*/
		setMinHeight?( height?:any ): any;
		setMinHeight?( height?:number ): Ext.dom.IElement;
		setMinHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element  
		* @param width any The new minimum width. 
		*/
		setMinWidth?( width?:any ): any;
		setMinWidth?( width?:number ): Ext.dom.IElement;
		setMinWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style  
		* @param right string The right CSS property value. 
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element  
		* @param width any The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height any The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.  
		*/
		setSize?( width?:any, height?:any ): any;
		setSize?( width?:number, height?:number ): Ext.dom.IElement;
		setSize?( width?:string, height?:number ): Ext.dom.IElement;
		setSize?( width?:number, height?:string ): Ext.dom.IElement;
		setSize?( width?:string, height?:string ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property any The style property to be set, or an object of multiple styles. 
		* @param value string The value to apply to the given property, or null if an object was passed. 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top string The top CSS property value. 
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param mode any 
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details 
		* @param visible bool Whether the element is visible. 
		*/
		setVisible?( visible?:bool ): Ext.IElement;
		/** [Method] Set the width of this Element  
		* @param width any The new width. 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): Ext.dom.IElement;
		setWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates  
		* @param x number The X position of the element 
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned  
		* @param pos number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based). 
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates  
		* @param y number The Y position of the element. 
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className string The CSS class to toggle. 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element  
		* @param x any The page x or an array containing [x, y]. 
		* @param y any The page y, required if x is not an array. 
		*/
		translatePoints?( x?:any, y?:any ): any;
		translatePoints?( x?:number, y?:number ): any;
		translatePoints?( x?:any[], y?:number ): any;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector any The simple selector to test 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:any, maxDepth?:any ): any;
		up?( simpleSelector?:string, maxDepth?:number ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:string ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector string The simple selector to test 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:string, maxDepth?:number ): undefined;
		up?( simpleSelector?:string, maxDepth?:string ): undefined;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): undefined;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): undefined;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): HTMLElement;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): Ext.dom.IElement;
	}
}
declare module Ext {
	export interface ICompositeElement extends Ext.IBase,Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];
		/** [Method] Adds elements to this Composite object  
		* @param els any Either an Array of DOM elements to add, or another Composite object who's elements should be added. 
		* @param root any The root element of the query or id of the root. 
		*/
		add?( els?:any, root?:any ): any;
		add?( els?:HTMLElement[], root?:HTMLElement ): Ext.dom.ICompositeElementLite;
		add?( els?:Ext.dom.ICompositeElementLite, root?:HTMLElement ): Ext.dom.ICompositeElementLite;
		add?( els?:HTMLElement[], root?:string ): Ext.dom.ICompositeElementLite;
		add?( els?:Ext.dom.ICompositeElementLite, root?:string ): Ext.dom.ICompositeElementLite;
		/** [Method] Adds the given CSS class es to this Element  
		* @param names string The CSS class(es) to add to this element. 
		* @param prefix string Prefix to prepend to each class. 
		* @param suffix string Suffix to append to each class. 
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] fixes scope with flyweight  
		* @param eventName any 
		* @param handler any 
		* @param scope any 
		* @param opt any 
		*/
		addListener?( eventName?:any, handler?:any, scope?:any, opt?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Appends the passed element s to this element  
		* @param element any a DOM Node or an existing Element. 
		*/
		appendChild?( element?:any ): any;
		appendChild?( element?:HTMLElement ): Ext.dom.IElement;
		appendChild?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element  
		* @param el any The new parent element. The id of the node, a DOM Node or an existing Element. 
		*/
		appendTo?( el?:any ): any;
		appendTo?( el?:string ): Ext.dom.IElement;
		appendTo?( el?:HTMLElement ): Ext.dom.IElement;
		appendTo?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles any A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Removes all elements  */
		clear?(): void;
		/** [Method] Returns true if this composite contains the passed element 
		* @param el any The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection. 
		*/
		contains?( el?:any ): any;
		contains?( el?:string ): bool;
		contains?( el?:HTMLElement ): bool;
		contains?( el?:Ext.IElement ): bool;
		contains?( el?:number ): bool;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config any DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element. 
		* @param returnDom bool true to return the dom node instead of creating an Element. 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Calls the passed function for each element in this composite  
		* @param fn any The function to call. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the Element. 
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;
		/** [Method] Clears this Composite and adds the elements passed  
		* @param els any Either an array of DOM elements, or another Composite from which to fill this Composite. 
		*/
		fill?( els?:any ): any;
		fill?( els?:HTMLElement[] ): Ext.dom.ICompositeElementLite;
		fill?( els?:Ext.dom.ICompositeElementLite ): Ext.dom.ICompositeElementLite;
		/** [Method] Filters this composite to only elements that match the passed selector  
		* @param selector any A string CSS selector or a comparison function. The comparison function will be called with the following arguments: 
		*/
		filter?( selector?:any ): any;
		filter?( selector?:string ): Ext.dom.ICompositeElementLite;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Returns the first Element */
		first?(): Ext.dom.IElement;
		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element any The element to align to. 
		* @param position string The position to align to. 
		* @param offsets any[] Offset the positioning by [x, y]. 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor string The specified anchor position. 
		* @param local bool true to get the local (element top/left-relative) anchor position instead of page coordinates. 
		* @param size any An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size) 
		*/
		getAnchorXY?( anchor?:string, local?:bool, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name string The attribute name. 
		* @param namespace string The namespace in which to look for the attribute. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s  
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height */
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox bool If true a box for the content of the element is returned. 
		* @param local bool If true the element's left and top are returned instead of page x/y. 
		*/
		getBox?( contentBox?:bool, local?:bool ): any;
		/** [Method] Returns the number of elements in this Composite  */
		getCount?(): number;
		/** [Method] Returns the innerHTML of an element  */
		getHTML?(): string;
		/** [Method] Returns the offset height of the element  
		* @param contentHeight bool true to get the height minus borders and padding. 
		*/
		getHeight?( contentHeight?:bool ): number;
		/** [Method] Returns the innerHTML of an element  */
		getHtml?(): string;
		/** [Method] Gets the left X coordinate  */
		getLeft?(): number;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides string Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element  
		* @param element any The element to get the offsets from. 
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param asRegion bool If true an Ext.util.Region will be returned. 
		*/
		getPageBox?( asRegion?:bool ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width */
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element  
		* @param contentSize bool true to get the width/size minus borders and padding. 
		*/
		getSize?( contentSize?:bool ): any;
		/** [Method] Normalizes currentStyle and computedStyle  
		* @param prop string The style property whose value is returned. 
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate  */
		getTop?(): number;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): string;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): number;
		/** [Method] Returns the dimensions of the element available to lay content out in  */
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element  
		* @param contentWidth bool true to get the width minus borders and padding. 
		*/
		getWidth?( contentWidth?:bool ): number;
		/** [Method] Gets the current X position of the element based on page coordinates  
		* @param el any 
		*/
		getX?( el?:any ): number;
		/** [Method] Gets the current position of the element based on page coordinates  */
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates  
		* @param el any 
		*/
		getY?( el?:any ): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name string The CSS class to check for. 
		*/
		hasCls?( name?:string ): bool;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Find the index of the passed element within the composite collection  
		* @param el any The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection. 
		*/
		indexOf?( el?:any ): any;
		indexOf?( el?:string ): number;
		indexOf?( el?:HTMLElement ): number;
		indexOf?( el?:Ext.IElement ): number;
		indexOf?( el?:number ): number;
		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el any The element to insert after. The id of the node, a DOM Node or an existing Element. 
		*/
		insertAfter?( el?:any ): any;
		insertAfter?( el?:string ): Ext.dom.IElement;
		insertAfter?( el?:HTMLElement ): Ext.dom.IElement;
		insertAfter?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el any The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		*/
		insertBefore?( el?:any ): any;
		insertBefore?( el?:string ): Ext.dom.IElement;
		insertBefore?( el?:HTMLElement ): Ext.dom.IElement;
		insertBefore?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element  
		* @param element any The id or element to insert. 
		*/
		insertFirst?( element?:any ): any;
		insertFirst?( element?:string ): Ext.dom.IElement;
		insertFirst?( element?:HTMLElement ): Ext.dom.IElement;
		insertFirst?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): HTMLElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): Ext.dom.IElement;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el any The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where string 'before' or 'after'. 
		* @param returnDom bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector string The simple selector to test. 
		*/
		is?( selector?:string ): bool;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style string property whose value is returned. 
		* @param value string to check against. 
		*/
		isStyle?( style?:string, value?:string ): bool;
		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop string The style property whose value is to be tested. 
		*/
		isTransparent?( prop?:string ): bool;
		/** [Method] Returns a flyweight Element of the dom element object at the specified index  
		* @param index number 
		*/
		item?( index?:number ): Ext.dom.IElement;
		/** [Method] Returns the last Element */
		last?(): Ext.dom.IElement;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className any The CSS class to add, or an array of classes. 
		*/
		radioCls?( className?:any ): any;
		radioCls?( className?:string ): Ext.dom.IElement;
		radioCls?( className?:string[] ): Ext.dom.IElement;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes the given CSS class es from this Element  
		* @param names string The CSS class(es) to remove from this element. 
		* @param prefix string Prefix to prepend to each class to be removed. 
		* @param suffix string Suffix to append to each class to be removed. 
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes the specified element s 
		* @param el any The id of an element, the Element itself, the index of the element in this composite or an array of any of those. 
		* @param removeDom any true to also remove the element from the document 
		*/
		removeElement?( el?:any, removeDom?:any ): any;
		removeElement?( el?:string, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:HTMLElement, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:Ext.IElement, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		removeElement?( el?:number, removeDom?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Forces the browser to repaint this element  */
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element  
		* @param element any The element to replace. The id of the node, a DOM Node or an existing Element. 
		*/
		replace?( element?:any ): any;
		replace?( element?:string ): Ext.dom.IElement;
		replace?( element?:HTMLElement ): Ext.dom.IElement;
		replace?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName string The CSS class to replace. 
		* @param newName string The replacement CSS class. 
		* @param prefix string Prefix to prepend to each class to be replaced. 
		* @param suffix string Suffix to append to each class to be replaced. 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces the specified element with the passed element  
		* @param el any The id of an element, the Element itself, the index of the element in this composite to replace. 
		* @param replacement any The id of an element or the Element itself. 
		* @param domReplace any true to remove and replace the element in the document too. 
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:any ): any;
		replaceElement?( el?:string, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:HTMLElement, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:Ext.IElement, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:number, replacement?:string, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:string, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:HTMLElement, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:Ext.IElement, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		replaceElement?( el?:number, replacement?:Ext.IElement, domReplace?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Replaces this element with the passed element  
		* @param el any The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create. 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector any The CSS selector or an array of elements 
		* @param composite any Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		*/
		select?( selector?:any, composite?:any ): any;
		select?( selector?:string, composite?:bool ): Ext.dom.ICompositeElementLite;
		select?( selector?:HTMLElement[], composite?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form any The form 
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes any The object with the attributes. 
		* @param useSet bool false to override the default setAttribute to use expandos. 
		*/
		set?( attributes?:any, useSet?:bool ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style  
		* @param bottom string The bottom CSS property value. 
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box  
		* @param box any The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... } 
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className any The CSS class to set on this element. 
		*/
		setCls?( className?:any ): any;
		setCls?( className?:string ): void;
		setCls?( className?:any[] ): void;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element  
		* @param height any The new height. 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): Ext.dom.IElement;
		setHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left string The left CSS property value. 
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum height of this Element  
		* @param height any The new maximum height. 
		*/
		setMaxHeight?( height?:any ): any;
		setMaxHeight?( height?:number ): Ext.dom.IElement;
		setMaxHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element  
		* @param width any The new maximum width. 
		*/
		setMaxWidth?( width?:any ): any;
		setMaxWidth?( width?:number ): Ext.dom.IElement;
		setMaxWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element  
		* @param height any The new minimum height. 
		*/
		setMinHeight?( height?:any ): any;
		setMinHeight?( height?:number ): Ext.dom.IElement;
		setMinHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element  
		* @param width any The new minimum width. 
		*/
		setMinWidth?( width?:any ): any;
		setMinWidth?( width?:number ): Ext.dom.IElement;
		setMinWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style  
		* @param right string The right CSS property value. 
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element  
		* @param width any The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height any The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.  
		*/
		setSize?( width?:any, height?:any ): any;
		setSize?( width?:number, height?:number ): Ext.dom.IElement;
		setSize?( width?:string, height?:number ): Ext.dom.IElement;
		setSize?( width?:number, height?:string ): Ext.dom.IElement;
		setSize?( width?:string, height?:string ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property any The style property to be set, or an object of multiple styles. 
		* @param value string The value to apply to the given property, or null if an object was passed. 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top string The top CSS property value. 
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param mode any 
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details 
		* @param visible bool Whether the element is visible. 
		*/
		setVisible?( visible?:bool ): Ext.IElement;
		/** [Method] Set the width of this Element  
		* @param width any The new width. 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): Ext.dom.IElement;
		setWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates  
		* @param x number The X position of the element 
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned  
		* @param pos number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based). 
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates  
		* @param y number The Y position of the element. 
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className string The CSS class to toggle. 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element  
		* @param x any The page x or an array containing [x, y]. 
		* @param y any The page y, required if x is not an array. 
		*/
		translatePoints?( x?:any, y?:any ): any;
		translatePoints?( x?:number, y?:number ): any;
		translatePoints?( x?:any[], y?:number ): any;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector any The simple selector to test 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:any, maxDepth?:any ): any;
		up?( simpleSelector?:string, maxDepth?:number ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:string ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector string The simple selector to test 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:string, maxDepth?:number ): undefined;
		up?( simpleSelector?:string, maxDepth?:string ): undefined;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): undefined;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): undefined;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): HTMLElement;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): Ext.dom.IElement;
	}
}
declare module Ext.dom {
	export interface IElement extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (Number) */
		DISPLAY?: number;
		/** [Property] (Number) */
		OFFSETS?: number;
		/** [Property] (Number) */
		VISIBILITY?: number;
		/** [Property] (String) */
		defaultUnit?: string;
		/** [Property] (HTMLElement) */
		dom?: HTMLElement;
		/** [Property] (String) */
		id?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the given CSS class es to this Element  
		* @param names string The CSS class(es) to add to this element. 
		* @param prefix string Prefix to prepend to each class. 
		* @param suffix string Suffix to append to each class. 
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends the passed element s to this element  
		* @param element any a DOM Node or an existing Element. 
		*/
		appendChild?( element?:any ): any;
		appendChild?( element?:HTMLElement ): Ext.dom.IElement;
		appendChild?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element  
		* @param el any The new parent element. The id of the node, a DOM Node or an existing Element. 
		*/
		appendTo?( el?:any ): any;
		appendTo?( el?:string ): Ext.dom.IElement;
		appendTo?( el?:HTMLElement ): Ext.dom.IElement;
		appendTo?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles any A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Returns true if this element is an ancestor of the passed element  
		* @param element any The element to check. 
		*/
		contains?( element?:any ): any;
		contains?( element?:HTMLElement ): bool;
		contains?( element?:string ): bool;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config any DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element. 
		* @param returnDom bool true to return the dom node instead of creating an Element. 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Gets the first child skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		first?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the first child skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		first?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the first child skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		first?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element any The element to align to. 
		* @param position string The position to align to. 
		* @param offsets any[] Offset the positioning by [x, y]. 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor string The specified anchor position. 
		* @param local bool true to get the local (element top/left-relative) anchor position instead of page coordinates. 
		* @param size any An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size) 
		*/
		getAnchorXY?( anchor?:string, local?:bool, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name string The attribute name. 
		* @param namespace string The namespace in which to look for the attribute. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s  
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height */
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox bool If true a box for the content of the element is returned. 
		* @param local bool If true the element's left and top are returned instead of page x/y. 
		*/
		getBox?( contentBox?:bool, local?:bool ): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the innerHTML of an element  */
		getHTML?(): string;
		/** [Method] Returns the offset height of the element  
		* @param contentHeight bool true to get the height minus borders and padding. 
		*/
		getHeight?( contentHeight?:bool ): number;
		/** [Method] Returns the innerHTML of an element  */
		getHtml?(): string;
		/** [Method] Gets the left X coordinate  */
		getLeft?(): number;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides string Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element  
		* @param element any The element to get the offsets from. 
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param asRegion bool If true an Ext.util.Region will be returned. 
		*/
		getPageBox?( asRegion?:bool ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width */
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element  
		* @param contentSize bool true to get the width/size minus borders and padding. 
		*/
		getSize?( contentSize?:bool ): any;
		/** [Method] Normalizes currentStyle and computedStyle  
		* @param prop string The style property whose value is returned. 
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate  */
		getTop?(): number;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): string;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): number;
		/** [Method] Returns the dimensions of the element available to lay content out in  */
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element  
		* @param contentWidth bool true to get the width minus borders and padding. 
		*/
		getWidth?( contentWidth?:bool ): number;
		/** [Method] Gets the current X position of the element based on page coordinates  
		* @param el any 
		*/
		getX?( el?:any ): number;
		/** [Method] Gets the current position of the element based on page coordinates  */
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates  
		* @param el any 
		*/
		getY?( el?:any ): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name string The CSS class to check for. 
		*/
		hasCls?( name?:string ): bool;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el any The element to insert after. The id of the node, a DOM Node or an existing Element. 
		*/
		insertAfter?( el?:any ): any;
		insertAfter?( el?:string ): Ext.dom.IElement;
		insertAfter?( el?:HTMLElement ): Ext.dom.IElement;
		insertAfter?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el any The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		*/
		insertBefore?( el?:any ): any;
		insertBefore?( el?:string ): Ext.dom.IElement;
		insertBefore?( el?:HTMLElement ): Ext.dom.IElement;
		insertBefore?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element  
		* @param element any The id or element to insert. 
		*/
		insertFirst?( element?:any ): any;
		insertFirst?( element?:string ): Ext.dom.IElement;
		insertFirst?( element?:HTMLElement ): Ext.dom.IElement;
		insertFirst?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): HTMLElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): Ext.dom.IElement;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el any The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where string 'before' or 'after'. 
		* @param returnDom bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector string The simple selector to test. 
		*/
		is?( selector?:string ): bool;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style string property whose value is returned. 
		* @param value string to check against. 
		*/
		isStyle?( style?:string, value?:string ): bool;
		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop string The style property whose value is to be tested. 
		*/
		isTransparent?( prop?:string ): bool;
		/** [Method] Gets the last child skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		last?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the last child skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		last?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the last child skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		last?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className any The CSS class to add, or an array of classes. 
		*/
		radioCls?( className?:any ): any;
		radioCls?( className?:string ): Ext.dom.IElement;
		radioCls?( className?:string[] ): Ext.dom.IElement;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes the given CSS class es from this Element  
		* @param names string The CSS class(es) to remove from this element. 
		* @param prefix string Prefix to prepend to each class to be removed. 
		* @param suffix string Suffix to append to each class to be removed. 
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Forces the browser to repaint this element  */
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element  
		* @param element any The element to replace. The id of the node, a DOM Node or an existing Element. 
		*/
		replace?( element?:any ): any;
		replace?( element?:string ): Ext.dom.IElement;
		replace?( element?:HTMLElement ): Ext.dom.IElement;
		replace?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName string The CSS class to replace. 
		* @param newName string The replacement CSS class. 
		* @param prefix string Prefix to prepend to each class to be replaced. 
		* @param suffix string Suffix to append to each class to be replaced. 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces this element with the passed element  
		* @param el any The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create. 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector any The CSS selector or an array of elements 
		* @param composite any Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		*/
		select?( selector?:any, composite?:any ): any;
		select?( selector?:string, composite?:bool ): Ext.dom.ICompositeElementLite;
		select?( selector?:HTMLElement[], composite?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form any The form 
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes any The object with the attributes. 
		* @param useSet bool false to override the default setAttribute to use expandos. 
		*/
		set?( attributes?:any, useSet?:bool ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style  
		* @param bottom string The bottom CSS property value. 
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box  
		* @param box any The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... } 
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className any The CSS class to set on this element. 
		*/
		setCls?( className?:any ): any;
		setCls?( className?:string ): void;
		setCls?( className?:any[] ): void;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element  
		* @param height any The new height. 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): Ext.dom.IElement;
		setHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left string The left CSS property value. 
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Set the maximum height of this Element  
		* @param height any The new maximum height. 
		*/
		setMaxHeight?( height?:any ): any;
		setMaxHeight?( height?:number ): Ext.dom.IElement;
		setMaxHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element  
		* @param width any The new maximum width. 
		*/
		setMaxWidth?( width?:any ): any;
		setMaxWidth?( width?:number ): Ext.dom.IElement;
		setMaxWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element  
		* @param height any The new minimum height. 
		*/
		setMinHeight?( height?:any ): any;
		setMinHeight?( height?:number ): Ext.dom.IElement;
		setMinHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element  
		* @param width any The new minimum width. 
		*/
		setMinWidth?( width?:any ): any;
		setMinWidth?( width?:number ): Ext.dom.IElement;
		setMinWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style  
		* @param right string The right CSS property value. 
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element  
		* @param width any The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height any The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.  
		*/
		setSize?( width?:any, height?:any ): any;
		setSize?( width?:number, height?:number ): Ext.dom.IElement;
		setSize?( width?:string, height?:number ): Ext.dom.IElement;
		setSize?( width?:number, height?:string ): Ext.dom.IElement;
		setSize?( width?:string, height?:string ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property any The style property to be set, or an object of multiple styles. 
		* @param value string The value to apply to the given property, or null if an object was passed. 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top string The top CSS property value. 
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param mode any 
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details 
		* @param visible bool Whether the element is visible. 
		*/
		setVisible?( visible?:bool ): Ext.IElement;
		/** [Method] Set the width of this Element  
		* @param width any The new width. 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): Ext.dom.IElement;
		setWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates  
		* @param x number The X position of the element 
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned  
		* @param pos number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based). 
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates  
		* @param y number The Y position of the element. 
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className string The CSS class to toggle. 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element  
		* @param x any The page x or an array containing [x, y]. 
		* @param y any The page y, required if x is not an array. 
		*/
		translatePoints?( x?:any, y?:any ): any;
		translatePoints?( x?:number, y?:number ): any;
		translatePoints?( x?:any[], y?:number ): any;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector any The simple selector to test 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:any, maxDepth?:any ): any;
		up?( simpleSelector?:string, maxDepth?:number ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:string ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector string The simple selector to test 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:string, maxDepth?:number ): undefined;
		up?( simpleSelector?:string, maxDepth?:string ): undefined;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): undefined;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): undefined;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): HTMLElement;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): Ext.dom.IElement;
		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element  
		* @param element any The DOM node or id. 
		* @param named any Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global"). 
		*/
		fly?( element?:any, named?:any ): any;
		fly?( element?:string, named?:string ): Ext.dom.IElement;
		fly?( element?:HTMLElement, named?:string ): Ext.dom.IElement;
		/** [Method] Returns the top Element that is located at the passed coordinates 
		* @param x number The x coordinate 
		* @param y number The y coordinate 
		*/
		fromPoint?( x?:number, y?:number ): string;
		/** [Method] Retrieves Ext dom Element objects  
		* @param element any The id of the node, a DOM Node or an existing Element. 
		*/
		get?( element?:any ): any;
		get?( element?:string ): Ext.dom.IElement;
		get?( element?:HTMLElement ): Ext.dom.IElement;
		get?( element?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Retrieves the document height */
		getDocumentHeight?(): number;
		/** [Method] Retrieves the document width */
		getDocumentWidth?(): number;
		/** [Method] Retrieves the current orientation of the window  */
		getOrientation?(): string;
		/** [Method] Retrieves the viewport height of the window  */
		getViewportHeight?(): number;
		/** [Method] Retrieves the viewport width of the window  */
		getViewportWidth?(): number;
		/** [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax  
		* @param prop string The property to normalize 
		*/
		normalize?( prop?:string ): string;
		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box any The encoded margins 
		*/
		parseBox?( box?:any ): any;
		parseBox?( box?:number ): any;
		parseBox?( box?:string ): any;
		/** [Method] Converts a CSS string into an object with a property for each style  
		* @param styles string A CSS string 
		*/
		parseStyles?( styles?:string ): any;
		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box any The encoded margins 
		* @param units any The type of units to add 
		*/
		unitizeBox?( box?:any, units?:any ): any;
		unitizeBox?( box?:number, units?:string ): string;
		unitizeBox?( box?:string, units?:string ): string;
	}
}
declare module Ext {
	export interface IElement extends Ext.IBase,Ext.mixin.IObservable {
		/** [Property] (Number) */
		DISPLAY?: number;
		/** [Property] (Number) */
		OFFSETS?: number;
		/** [Property] (Number) */
		VISIBILITY?: number;
		/** [Property] (String) */
		defaultUnit?: string;
		/** [Property] (HTMLElement) */
		dom?: HTMLElement;
		/** [Property] (String) */
		id?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the given CSS class es to this Element  
		* @param names string The CSS class(es) to add to this element. 
		* @param prefix string Prefix to prepend to each class. 
		* @param suffix string Suffix to append to each class. 
		*/
		addCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Appends the passed element s to this element  
		* @param element any a DOM Node or an existing Element. 
		*/
		appendChild?( element?:any ): any;
		appendChild?( element?:HTMLElement ): Ext.dom.IElement;
		appendChild?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Appends this element to the passed element  
		* @param el any The new parent element. The id of the node, a DOM Node or an existing Element. 
		*/
		appendTo?( el?:any ): any;
		appendTo?( el?:string ): Ext.dom.IElement;
		appendTo?( el?:HTMLElement ): Ext.dom.IElement;
		appendTo?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles any A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		child?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Returns true if this element is an ancestor of the passed element  
		* @param element any The element to check. 
		*/
		contains?( element?:any ): any;
		contains?( element?:HTMLElement ): bool;
		contains?( element?:string ): bool;
		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config any DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element. 
		* @param returnDom bool true to return the dom node instead of creating an Element. 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;
		/** [Method] Removes this element s DOM reference  */
		destroy?(): void;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector string The CSS selector. 
		* @param returnDom bool true to return the DOM node instead of Ext.dom.Element. 
		*/
		down?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 50 || document.body) 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParent?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParent?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector any The simple selector to test. 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:any, maxDepth?:any, returnEl?:any ): any;
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): HTMLElement;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): HTMLElement;
		/** [Method] Looks at parent nodes for a match of the passed simple selector e g  
		* @param simpleSelector string The simple selector to test. 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl bool true to return a Ext.Element object instead of DOM node. 
		*/
		findParentNode?( simpleSelector?:string, maxDepth?:number, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:string, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:HTMLElement, returnEl?:bool ): undefined;
		findParentNode?( simpleSelector?:string, maxDepth?:Ext.IElement, returnEl?:bool ): undefined;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Gets the first child skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		first?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the first child skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		first?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the first child skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		first?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element any The element to align to. 
		* @param position string The position to align to. 
		* @param offsets any[] Offset the positioning by [x, y]. 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:any[] ): any[];
		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor string The specified anchor position. 
		* @param local bool true to get the local (element top/left-relative) anchor position instead of page coordinates. 
		* @param size any An object containing the size to use for calculating anchor position. {width: (target width), height: (target height)} (defaults to the element's current size) 
		*/
		getAnchorXY?( anchor?:string, local?:bool, size?:any ): any[];
		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name string The attribute name. 
		* @param namespace string The namespace in which to look for the attribute. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;
		/** [Method] Gets the width of the border s for the specified side s  
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		*/
		getBorderWidth?( side?:string ): number;
		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height */
		getBottom?(): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox bool If true a box for the content of the element is returned. 
		* @param local bool If true the element's left and top are returned instead of page x/y. 
		*/
		getBox?( contentBox?:bool, local?:bool ): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the innerHTML of an element  */
		getHTML?(): string;
		/** [Method] Returns the offset height of the element  
		* @param contentHeight bool true to get the height minus borders and padding. 
		*/
		getHeight?( contentHeight?:bool ): number;
		/** [Method] Returns the innerHTML of an element  */
		getHtml?(): string;
		/** [Method] Gets the left X coordinate  */
		getLeft?(): number;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides string Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		*/
		getMargin?( sides?:string ): any;
		/** [Method] Returns the offsets of this element from the passed element  
		* @param element any The element to get the offsets from. 
		*/
		getOffsetsTo?( element?:any ): any[];
		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;
		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;
		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side string Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		*/
		getPadding?( side?:string ): number;
		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param asRegion bool If true an Ext.util.Region will be returned. 
		*/
		getPageBox?( asRegion?:bool ): any;
		/** [Method] Gets the right X coordinate of the element element X position  element width */
		getRight?(): number;
		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;
		/** [Method] Returns the size of the element  
		* @param contentSize bool true to get the width/size minus borders and padding. 
		*/
		getSize?( contentSize?:bool ): any;
		/** [Method] Normalizes currentStyle and computedStyle  
		* @param prop string The style property whose value is returned. 
		*/
		getStyle?( prop?:string ): string;
		/** [Method] Gets the top Y coordinate  */
		getTop?(): number;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): string;
		/** [Method] Returns the value of the value attribute  
		* @param asNumber bool true to parse the value as a number. 
		*/
		getValue?( asNumber?:bool ): number;
		/** [Method] Returns the dimensions of the element available to lay content out in  */
		getViewSize?(): any;
		/** [Method] Returns the offset width of the element  
		* @param contentWidth bool true to get the width minus borders and padding. 
		*/
		getWidth?( contentWidth?:bool ): number;
		/** [Method] Gets the current X position of the element based on page coordinates  
		* @param el any 
		*/
		getX?( el?:any ): number;
		/** [Method] Gets the current position of the element based on page coordinates  */
		getXY?(): any[];
		/** [Method] Gets the current Y position of the element based on page coordinates  
		* @param el any 
		*/
		getY?( el?:any ): number;
		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name string The CSS class to check for. 
		*/
		hasCls?( name?:string ): bool;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Hides this element  */
		hide?(): void;
		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el any The element to insert after. The id of the node, a DOM Node or an existing Element. 
		*/
		insertAfter?( el?:any ): any;
		insertAfter?( el?:string ): Ext.dom.IElement;
		insertAfter?( el?:HTMLElement ): Ext.dom.IElement;
		insertAfter?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el any The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		*/
		insertBefore?( el?:any ): any;
		insertBefore?( el?:string ): Ext.dom.IElement;
		insertBefore?( el?:HTMLElement ): Ext.dom.IElement;
		insertBefore?( el?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an element as the first child of this element  
		* @param element any The id or element to insert. 
		*/
		insertFirst?( element?:any ): any;
		insertFirst?( element?:string ): Ext.dom.IElement;
		insertFirst?( element?:HTMLElement ): Ext.dom.IElement;
		insertFirst?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): HTMLElement;
		/** [Method] Inserts an HTML fragment into this element  
		* @param where string Where to insert the HTML in relation to this element - 'beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'. See Ext.DomHelper.insertHtml for details. 
		* @param html string The HTML fragment 
		* @param returnEl bool true to return an Ext.dom.Element. 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:bool ): Ext.dom.IElement;
		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el any The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where string 'before' or 'after'. 
		* @param returnDom bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector string The simple selector to test. 
		*/
		is?( selector?:string ): bool;
		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;
		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style string property whose value is returned. 
		* @param value string to check against. 
		*/
		isStyle?( style?:string, value?:string ): bool;
		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop string The style property whose value is to be tested. 
		*/
		isTransparent?( prop?:string ): bool;
		/** [Method] Gets the last child skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		last?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the last child skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		last?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the last child skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		last?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Puts a mask over this element to disable user interaction  */
		mask?(): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the next sibling skipping text nodes  
		* @param selector string Find the next sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw dom node instead of an Ext.dom.Element. 
		*/
		next?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector  
		* @param selector string Find a parent node that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element. 
		*/
		parent?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): Ext.dom.IElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): HTMLElement;
		/** [Method] Gets the previous sibling skipping text nodes  
		* @param selector string Find the previous sibling that matches the passed simple selector. 
		* @param returnDom bool true to return a raw DOM node instead of an Ext.dom.Element 
		*/
		prev?( selector?:string, returnDom?:bool ): undefined;
		/** [Method] Removes all listeners for this object  */
		purgeAllListeners?(): void;
		/** [Method] Selects child nodes based on the passed CSS selector the selector should not contain an id 
		* @param selector string The CSS selector. 
		*/
		query?( selector?:string ): HTMLElement[];
		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className any The CSS class to add, or an array of classes. 
		*/
		radioCls?( className?:any ): any;
		radioCls?( className?:string ): Ext.dom.IElement;
		radioCls?( className?:string[] ): Ext.dom.IElement;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes this element s DOM reference  */
		remove?(): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		removeAllListeners?(): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes the given CSS class es from this Element  
		* @param names string The CSS class(es) to remove from this element. 
		* @param prefix string Prefix to prepend to each class to be removed. 
		* @param suffix string Suffix to append to each class to be removed. 
		*/
		removeCls?( names?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Forces the browser to repaint this element  */
		repaint?(): Ext.dom.IElement;
		/** [Method] Replaces the passed element with this element  
		* @param element any The element to replace. The id of the node, a DOM Node or an existing Element. 
		*/
		replace?( element?:any ): any;
		replace?( element?:string ): Ext.dom.IElement;
		replace?( element?:HTMLElement ): Ext.dom.IElement;
		replace?( element?:Ext.dom.IElement ): Ext.dom.IElement;
		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName string The CSS class to replace. 
		* @param newName string The replacement CSS class. 
		* @param prefix string Prefix to prepend to each class to be replaced. 
		* @param suffix string Suffix to append to each class to be replaced. 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;
		/** [Method] Replaces this element with the passed element  
		* @param el any The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create. 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector any The CSS selector or an array of elements 
		* @param composite any Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		*/
		select?( selector?:any, composite?:any ): any;
		select?( selector?:string, composite?:bool ): Ext.dom.ICompositeElementLite;
		select?( selector?:HTMLElement[], composite?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form any The form 
		*/
		serializeForm?( form?:any ): string;
		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes any The object with the attributes. 
		* @param useSet bool false to override the default setAttribute to use expandos. 
		*/
		set?( attributes?:any, useSet?:bool ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS bottom style  
		* @param bottom string The bottom CSS property value. 
		*/
		setBottom?( bottom?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s box  
		* @param box any The box to fill, for example: {  left: ...,  top: ...,  width: ...,  height: ... } 
		*/
		setBox?( box?:any ): Ext.dom.IElement;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className any The CSS class to set on this element. 
		*/
		setCls?( className?:any ): any;
		setCls?( className?:string ): void;
		setCls?( className?:any[] ): void;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHTML?( html?:string ): void;
		/** [Method] Set the height of this Element  
		* @param height any The new height. 
		*/
		setHeight?( height?:any ): any;
		setHeight?( height?:number ): Ext.dom.IElement;
		setHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		setHtml?( html?:string ): void;
		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left string The left CSS property value. 
		*/
		setLeft?( left?:string ): Ext.dom.IElement;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Set the maximum height of this Element  
		* @param height any The new maximum height. 
		*/
		setMaxHeight?( height?:any ): any;
		setMaxHeight?( height?:number ): Ext.dom.IElement;
		setMaxHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the maximum width of this Element  
		* @param width any The new maximum width. 
		*/
		setMaxWidth?( width?:any ): any;
		setMaxWidth?( width?:number ): Ext.dom.IElement;
		setMaxWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum height of this Element  
		* @param height any The new minimum height. 
		*/
		setMinHeight?( height?:any ): any;
		setMinHeight?( height?:number ): Ext.dom.IElement;
		setMinHeight?( height?:string ): Ext.dom.IElement;
		/** [Method] Set the minimum width of this Element  
		* @param width any The new minimum width. 
		*/
		setMinWidth?( width?:any ): any;
		setMinWidth?( width?:number ): Ext.dom.IElement;
		setMinWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s CSS right style  
		* @param right string The right CSS property value. 
		*/
		setRight?( right?:string ): Ext.dom.IElement;
		/** [Method] Set the size of this Element  
		* @param width any The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels). A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height any The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used.  
		*/
		setSize?( width?:any, height?:any ): any;
		setSize?( width?:number, height?:number ): Ext.dom.IElement;
		setSize?( width?:string, height?:number ): Ext.dom.IElement;
		setSize?( width?:number, height?:string ): Ext.dom.IElement;
		setSize?( width?:string, height?:string ): Ext.dom.IElement;
		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property any The style property to be set, or an object of multiple styles. 
		* @param value string The value to apply to the given property, or null if an object was passed. 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top string The top CSS property value. 
		*/
		setTop?( top?:string ): Ext.dom.IElement;
		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;
		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param mode any 
		*/
		setVisibilityMode?( mode?:any ): Ext.dom.IElement;
		/** [Method] Sets the visibility of the element see details 
		* @param visible bool Whether the element is visible. 
		*/
		setVisible?( visible?:bool ): Ext.IElement;
		/** [Method] Set the width of this Element  
		* @param width any The new width. 
		*/
		setWidth?( width?:any ): any;
		setWidth?( width?:number ): Ext.dom.IElement;
		setWidth?( width?:string ): Ext.dom.IElement;
		/** [Method] Sets the X position of the element based on page coordinates  
		* @param x number The X position of the element 
		*/
		setX?( x?:number ): Ext.dom.IElement;
		/** [Method] Sets the position of the element in page coordinates regardless of how the element is positioned  
		* @param pos number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based). 
		*/
		setXY?( pos?:number[] ): Ext.dom.IElement;
		/** [Method] Sets the Y position of the element based on page coordinates  
		* @param y number The Y position of the element. 
		*/
		setY?( y?:number ): Ext.dom.IElement;
		/** [Method] Shows this element  */
		show?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className string The CSS class to toggle. 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;
		/** [Method] Translates the passed page coordinates into left top CSS values for this element  
		* @param x any The page x or an array containing [x, y]. 
		* @param y any The page y, required if x is not an array. 
		*/
		translatePoints?( x?:any, y?:any ): any;
		translatePoints?( x?:number, y?:number ): any;
		translatePoints?( x?:any[], y?:number ): any;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a previously applied mask  */
		unmask?(): void;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector any The simple selector to test 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:any, maxDepth?:any ): any;
		up?( simpleSelector?:string, maxDepth?:number ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:string ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): Ext.dom.IElement;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param simpleSelector string The simple selector to test 
		* @param maxDepth Number The max depth to search as a number or element (defaults to 10 || document.body). 
		*/
		up?( simpleSelector?:string, maxDepth?:number ): undefined;
		up?( simpleSelector?:string, maxDepth?:string ): undefined;
		up?( simpleSelector?:string, maxDepth?:HTMLElement ): undefined;
		up?( simpleSelector?:string, maxDepth?:Ext.IElement ): undefined;
		/** [Method] Sets the innerHTML of this element  
		* @param html string The new HTML. 
		*/
		update?( html?:string ): void;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): HTMLElement;
		/** [Method] Creates and wraps this element with another element  
		* @param config any DomHelper element config object for the wrapper element or null for an empty div 
		* @param domNode bool true to return the raw DOM element instead of Ext.dom.Element. 
		*/
		wrap?( config?:any, domNode?:bool ): Ext.dom.IElement;
		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element  
		* @param element any The DOM node or id. 
		* @param named any Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global"). 
		*/
		fly?( element?:any, named?:any ): any;
		fly?( element?:string, named?:string ): Ext.dom.IElement;
		fly?( element?:HTMLElement, named?:string ): Ext.dom.IElement;
		/** [Method] Returns the top Element that is located at the passed coordinates 
		* @param x number The x coordinate 
		* @param y number The y coordinate 
		*/
		fromPoint?( x?:number, y?:number ): string;
		/** [Method] Retrieves Ext dom Element objects  
		* @param element any The id of the node, a DOM Node or an existing Element. 
		*/
		get?( element?:any ): any;
		get?( element?:string ): Ext.dom.IElement;
		get?( element?:HTMLElement ): Ext.dom.IElement;
		get?( element?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Retrieves the document height */
		getDocumentHeight?(): number;
		/** [Method] Retrieves the document width */
		getDocumentWidth?(): number;
		/** [Method] Retrieves the current orientation of the window  */
		getOrientation?(): string;
		/** [Method] Retrieves the viewport height of the window  */
		getViewportHeight?(): number;
		/** [Method] Retrieves the viewport width of the window  */
		getViewportWidth?(): number;
		/** [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax  
		* @param prop string The property to normalize 
		*/
		normalize?( prop?:string ): string;
		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box any The encoded margins 
		*/
		parseBox?( box?:any ): any;
		parseBox?( box?:number ): any;
		parseBox?( box?:string ): any;
		/** [Method] Converts a CSS string into an object with a property for each style  
		* @param styles string A CSS string 
		*/
		parseStyles?( styles?:string ): any;
		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box any The encoded margins 
		* @param units any The type of units to add 
		*/
		unitizeBox?( box?:any, units?:any ): any;
		unitizeBox?( box?:number, units?:string ): string;
		unitizeBox?( box?:string, units?:string ): string;
	}
}
declare module Ext.dom {
	export interface IQuery extends Ext.IBase {
		/** [Method] Returns true if the passed element s match the passed simple selector e g  
		* @param el any An element id, element or array of elements 
		* @param selector any The simple selector to test 
		*/
		is?( el?:any, selector?:any ): any;
		is?( el?:string, selector?:string ): bool;
		is?( el?:HTMLElement, selector?:string ): bool;
		is?( el?:any[], selector?:string ): bool;
		/** [Method] Selects a group of elements  
		* @param selector any The selector/xpath query (can be a comma separated list of selectors) 
		* @param root any The start of the query (defaults to document). 
		*/
		select?( selector?:any, root?:any ): any;
		select?( selector?:string, root?:HTMLElement ): HTMLElement[];
		select?( selector?:string, root?:string ): HTMLElement[];
		/** [Method] Selects a single element  
		* @param selector any The selector/xpath query 
		* @param root any The start of the query (defaults to document). 
		*/
		selectNode?( selector?:any, root?:any ): any;
		selectNode?( selector?:string, root?:HTMLElement ): HTMLElement;
		selectNode?( selector?:string, root?:string ): HTMLElement;
	}
}
declare module Ext {
	export interface IDomHelper {
		/** [Method] Creates new DOM element s and appends them to el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		append?( el?:any, o?:any, returnElement?:any ): any;
		append?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		append?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		append?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and appends them to el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		append?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		append?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		append?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Applies a style specification to an element  
		* @param el any The element to apply styles to 
		* @param styles any A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification. 
		*/
		applyStyles?( el?:any, styles?:any ): any;
		applyStyles?( el?:string, styles?:any ): void;
		applyStyles?( el?:HTMLElement, styles?:any ): void;
		/** [Method] Creates a new Ext Template from the DOM object spec  
		* @param o any The DOM object spec (and children) 
		*/
		createTemplate?( o?:any ): Ext.ITemplate;
		/** [Method] Converts the styles from the given object to text  
		* @param styles any The object describing the styles. 
		* @param buffer string[] The output buffer. 
		*/
		generateStyles?( styles?:any, buffer?:string[] ): string;
		/** [Method] Converts the styles from the given object to text  
		* @param styles any The object describing the styles. 
		* @param buffer string[] The output buffer. 
		*/
		generateStyles?( styles?:any, buffer?:string[] ): string[];
		/** [Method] Creates new DOM element s and inserts them after el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) 
		* @param returnElement any true to return a Ext.Element 
		*/
		insertAfter?( el?:any, o?:any, returnElement?:any ): any;
		insertAfter?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		insertAfter?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		insertAfter?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and inserts them after el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) 
		* @param returnElement bool true to return a Ext.Element 
		*/
		insertAfter?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		insertAfter?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		insertAfter?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Creates new DOM element s and inserts them before el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		insertBefore?( el?:any, o?:any, returnElement?:any ): any;
		insertBefore?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		insertBefore?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		insertBefore?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and inserts them before el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		insertBefore?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		insertBefore?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		insertBefore?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Creates new DOM element s and inserts them as the first child of el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		insertFirst?( el?:any, o?:any, returnElement?:any ): any;
		insertFirst?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		insertFirst?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		insertFirst?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and inserts them as the first child of el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		insertFirst?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		insertFirst?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		insertFirst?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Inserts an HTML fragment into the DOM  
		* @param where any Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;  
		* @param el any The context element 
		* @param html any The HTML fragment 
		*/
		insertHtml?( where?:any, el?:any, html?:any ): any;
		insertHtml?( where?:string, el?:HTMLElement, html?:string ): HTMLElement;
		insertHtml?( where?:string, el?:any, html?:string ): HTMLElement;
		/** [Method] Returns the markup for the passed Element s config  
		* @param spec any The DOM object spec (and children). 
		*/
		markup?( spec?:any ): string;
		/** [Method] Creates new DOM element s and overwrites the contents of el with them  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		overwrite?( el?:any, o?:any, returnElement?:any ): any;
		overwrite?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		overwrite?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		overwrite?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and overwrites the contents of el with them  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		overwrite?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		overwrite?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		overwrite?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
	}
}
declare module Ext.dom {
	export interface IHelper {
		/** [Method] Creates new DOM element s and appends them to el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		append?( el?:any, o?:any, returnElement?:any ): any;
		append?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		append?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		append?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and appends them to el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		append?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		append?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		append?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Applies a style specification to an element  
		* @param el any The element to apply styles to 
		* @param styles any A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification. 
		*/
		applyStyles?( el?:any, styles?:any ): any;
		applyStyles?( el?:string, styles?:any ): void;
		applyStyles?( el?:HTMLElement, styles?:any ): void;
		/** [Method] Creates a new Ext Template from the DOM object spec  
		* @param o any The DOM object spec (and children) 
		*/
		createTemplate?( o?:any ): Ext.ITemplate;
		/** [Method] Converts the styles from the given object to text  
		* @param styles any The object describing the styles. 
		* @param buffer string[] The output buffer. 
		*/
		generateStyles?( styles?:any, buffer?:string[] ): string;
		/** [Method] Converts the styles from the given object to text  
		* @param styles any The object describing the styles. 
		* @param buffer string[] The output buffer. 
		*/
		generateStyles?( styles?:any, buffer?:string[] ): string[];
		/** [Method] Creates new DOM element s and inserts them after el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) 
		* @param returnElement any true to return a Ext.Element 
		*/
		insertAfter?( el?:any, o?:any, returnElement?:any ): any;
		insertAfter?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		insertAfter?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		insertAfter?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and inserts them after el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) 
		* @param returnElement bool true to return a Ext.Element 
		*/
		insertAfter?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		insertAfter?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		insertAfter?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Creates new DOM element s and inserts them before el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		insertBefore?( el?:any, o?:any, returnElement?:any ): any;
		insertBefore?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		insertBefore?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		insertBefore?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and inserts them before el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		insertBefore?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		insertBefore?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		insertBefore?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Creates new DOM element s and inserts them as the first child of el  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		insertFirst?( el?:any, o?:any, returnElement?:any ): any;
		insertFirst?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		insertFirst?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		insertFirst?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and inserts them as the first child of el  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		insertFirst?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		insertFirst?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		insertFirst?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Inserts an HTML fragment into the DOM  
		* @param where any Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;  
		* @param el any The context element 
		* @param html any The HTML fragment 
		*/
		insertHtml?( where?:any, el?:any, html?:any ): any;
		insertHtml?( where?:string, el?:HTMLElement, html?:string ): HTMLElement;
		insertHtml?( where?:string, el?:any, html?:string ): HTMLElement;
		/** [Method] Returns the markup for the passed Element s config  
		* @param spec any The DOM object spec (and children). 
		*/
		markup?( spec?:any ): string;
		/** [Method] Creates new DOM element s and overwrites the contents of el with them  
		* @param el any The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement any true to return a Ext.Element 
		*/
		overwrite?( el?:any, o?:any, returnElement?:any ): any;
		overwrite?( el?:string, o?:any, returnElement?:bool ): HTMLElement;
		overwrite?( el?:HTMLElement, o?:any, returnElement?:bool ): HTMLElement;
		overwrite?( el?:Ext.IElement, o?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Creates new DOM element s and overwrites the contents of el with them  
		* @param el String The context element 
		* @param o any The DOM object spec (and children) or raw HTML blob 
		* @param returnElement bool true to return a Ext.Element 
		*/
		overwrite?( el?:string, o?:any, returnElement?:bool ): Ext.IElement;
		overwrite?( el?:HTMLElement, o?:any, returnElement?:bool ): Ext.IElement;
		overwrite?( el?:Ext.IElement, o?:any, returnElement?:bool ): Ext.IElement;
	}
}
declare module Ext {
	export interface IDomQuery extends Ext.dom.IQuery {
	}
	export class DomQuery {
	}
}
declare module Ext.core {
	export interface IDomQuery extends Ext.dom.IQuery {
	}
	export class DomQuery {
	}
}
declare module Ext.draw {
	export interface IAnimator extends Ext.IBase {
	}
	export class Animator {
		/** [Method] Adds an animated object to the animation pool  
		* @param animation any The animation descriptor to add to the pool. 
		*/
		static add( animation?:any ): void;
		/** [Method] Register a recursive callback that will be called at every frame  
		* @param callback any 
		* @param scope any 
		*/
		static addFrameCallback( callback?:any, scope?:any ): string;
		/** [Method] Cross platform animationTime implementation  */
		static animationTime(): number;
		/** [Method] Cancel a registered one time callback 
		* @param id any 
		*/
		static cancel( id?:any ): void;
		/** [Method] Returns true or false whether it contains the given animation or not  
		* @param animation any The animation to check for. 
		*/
		static contains( animation?:any ): bool;
		/** [Method] Returns true or false whether the pool is empty or not  */
		static empty(): bool;
		/** [Method] Removes an animation from the pool  
		* @param animation any The animation to remove from the pool. 
		*/
		static remove( animation?:any ): void;
		/** [Method] Unregister a recursive callback  
		* @param id any 
		*/
		static removeFrameCallback( id?:any ): void;
		/** [Method] Register an one time callback that will be called at the next frame  
		* @param callback any 
		* @param scope any 
		*/
		static schedule( callback?:any, scope?:any ): string;
		/** [Method] Given a frame time it will filter out finished animations from the pool  
		* @param frameTime number The frame's start time, in milliseconds. 
		*/
		static step( frameTime?:number ): void;
	}
}
declare module Ext.draw {
	export interface IColor extends Ext.IBase {
		/** [Config Option] (Number) */
		lightnessFactor?: number;
		/** [Method] Return a new color that is darker than this color  
		* @param factor number Darker factor (0..1). 
		*/
		createDarker?( factor?:number ): Ext.draw.IColor;
		/** [Method] Return a new color that is lighter than this color  
		* @param factor number Lighter factor (0..1). 
		*/
		createLighter?( factor?:number ): Ext.draw.IColor;
		/** [Method] Returns the gray value 0 to 255 of the color  */
		getGrayscale?(): number;
		/** [Method] Get the equivalent HSL components of the color  
		* @param target any[] Optional array to receive the values. 
		*/
		getHSL?( target?:any[] ): any[];
		/** [Method] Parse the string and set current color  
		* @param str string Color in string. 
		*/
		setFromString?( str?:string ): any;
		/** [Method] Set current color based on the specified HSL values  
		* @param h number Hue component (0..359) 
		* @param s number Saturation component (0..1) 
		* @param l number Lightness component (0..1) 
		*/
		setHSL?( h?:number, s?:number, l?:number ): any;
		/** [Method] Convert a color to hexadecimal format  
		* @param color any The color value (i.e 'rgb(255, 255, 255)', 'color: #ffffff'). Can also be an Array, in this case the function handles the first member. 
		*/
		toHex?( color?:any ): any;
		toHex?( color?:string ): string;
		toHex?( color?:any[] ): string;
		/** [Method] Return the color in the hex format i e  */
		toString?(): string;
		/** [Method] Convenience method for creating a color  
		* @param red any Red component (0..255), CSS color string or array of all components. 
		* @param green any Green component (0..255) 
		* @param blue any Blue component (0..255) 
		* @param alpha any Alpha component (0..1) 
		*/
		create?( red?:any, green?:any, blue?:any, alpha?:any ): any;
		create?( red?:Ext.draw.IColor, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		create?( red?:string, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		create?( red?:number[], green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		create?( red?:number, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		/** [Method] Returns a flyweight instance of Ext draw Color  
		* @param red any Red component (0..255) or CSS color string. 
		* @param green any Green component (0..255) 
		* @param blue any Blue component (0..255) 
		* @param alpha any Alpha component (0..1) 
		*/
		fly?( red?:any, green?:any, blue?:any, alpha?:any ): any;
		fly?( red?:number, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		fly?( red?:string, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;
		/** [Method] Create a new color based on the specified HSL values  
		* @param h number Hue component (0..359) 
		* @param s number Saturation component (0..1) 
		* @param l number Lightness component (0..1) 
		*/
		fromHSL?( h?:number, s?:number, l?:number ): Ext.draw.IColor;
		/** [Method] Parse the string and create a new color  
		* @param string string Color in string. 
		*/
		fromString?( string?:string ): Ext.draw.IColor;
	}
}
declare module Ext.draw {
	export interface IComponent extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		autoSize?: bool;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		fitSurface?: bool;
		/** [Config Option] (Function) */
		resizeHandler?: any;
		/** [Config Option] (Boolean) */
		viewBox?: bool;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of autoSize  */
		getAutoSize?(): bool;
		/** [Method] Returns the value of background  */
		getBackground?(): any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of fitSurface  */
		getFitSurface?(): bool;
		/** [Method] Returns the value of resizeHandler  */
		getResizeHandler?(): any;
		/** [Method] Returns the value of sprites  */
		getSprites?(): any;
		/** [Method] Get a surface by the given id or create one if it doesn t exist  
		* @param id string 
		*/
		getSurface?( id?:string ): Ext.draw.ISurface;
		/** [Method] Returns the value of viewBox  */
		getViewBox?(): bool;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Place water mark after resize  */
		onPlaceWatermark?(): void;
		/** [Method] Render all the surfaces in the component  */
		renderFrame?(): void;
		/** [Method] Sets the value of autoSize  
		* @param autoSize bool 
		*/
		setAutoSize?( autoSize?:bool ): void;
		/** [Method] Sets the value of background  
		* @param background any 
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of fitSurface  
		* @param fitSurface bool 
		*/
		setFitSurface?( fitSurface?:bool ): void;
		/** [Method] Sets the value of resizeHandler  
		* @param resizeHandler any 
		*/
		setResizeHandler?( resizeHandler?:any ): void;
		/** [Method] Sets the value of sprites  
		* @param sprites any 
		*/
		setSprites?( sprites?:any ): void;
		/** [Method] Sets the value of viewBox  
		* @param viewBox bool 
		*/
		setViewBox?( viewBox?:bool ): void;
	}
}
declare module Ext.draw {
	export interface IDraw extends Ext.IBase {
	}
	export class Draw {
		/** [Method] Converting radians to degrees  
		* @param radian number 
		*/
		static degrees( radian?:number ): number;
		/** [Method]  
		* @param bbox1 any 
		* @param bbox2 any 
		* @param padding any 
		*/
		static isBBoxIntersect( bbox1?:any, bbox2?:any, padding?:any ): bool;
		/** [Method] Converting degrees to radians  
		* @param degrees number 
		*/
		static rad( degrees?:number ): number;
		/** [Method] Function that returns its first element  
		* @param a any 
		*/
		static reflectFn( a?:any ): any;
		/** [Method] Natural cubic spline interpolation  
		* @param points any[] Array of numbers. 
		*/
		static spline( points?:any[] ): void;
	}
}
declare module Ext.draw.engine {
	export interface ICanvas extends Ext.draw.ISurface {
		/** [Config Option] (Boolean) */
		highPrecision?: bool;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;
		/** [Method] Clears the current transformation state on the surface  */
		clearTransform?(): void;
		/** [Method] Destroys the Canvas element and prepares it for Garbage Collection  */
		destroy?(): void;
		/** [Method] Returns the value of highPrecision  */
		getHighPrecision?(): bool;
		/** [Method] Initialize the canvas element  */
		initElement?(): void;
		/** [Method] Sets the value of highPrecision  
		* @param highPrecision bool 
		*/
		setHighPrecision?( highPrecision?:bool ): void;
	}
}
declare module Ext.draw.engine {
	export interface ISvg extends Ext.draw.ISurface {
		/** [Config Option] (Boolean) */
		highPrecision?: bool;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;
		/** [Method] Clears the current transformation state on the surface  */
		clearTransform?(): void;
		/** [Method] Creates a DOM element under the SVG namespace of the given type  
		* @param type any The type of the SVG DOM element. 
		*/
		createSvgNode?( type?:any ): any;
		/** [Method] Destroys the Canvas element and prepares it for Garbage Collection  
		* @param path any 
		* @param matrix any 
		* @param band any 
		*/
		destroy?( path?:any, matrix?:any, band?:any ): void;
		/** [Method] Returns the value of highPrecision  */
		getHighPrecision?(): bool;
		/** [Method] Remove a given sprite from the surface optionally destroying the sprite in the process  
		* @param sprite any 
		* @param destroySprite any 
		*/
		remove?( sprite?:any, destroySprite?:any ): void;
		/** [Method] Renders a single sprite into the surface  
		* @param sprite Ext.draw.sprite.ISprite The Sprite to be rendered. 
		*/
		renderSprite?( sprite?:Ext.draw.sprite.ISprite ): bool;
		/** [Method] Sets the value of highPrecision  
		* @param highPrecision bool 
		*/
		setHighPrecision?( highPrecision?:bool ): void;
	}
}
declare module Ext.draw.engine.svgcontext {
	export interface IGradient extends Ext.IBase {
		/** [Method] Adds a color stop with the given color to the gradient at the given offset  
		* @param offset any 
		* @param color any 
		*/
		addColorStop?( offset?:any, color?:any ): void;
	}
}
declare module Ext.draw.engine {
	export interface ISvgContext extends Ext.IBase {
		/** [Method] Adds points to the subpath such that the arc described by the circumference of the circle described by the arguments 
		* @param x any 
		* @param y any 
		* @param radius any 
		* @param startAngle any 
		* @param endAngle any 
		* @param anticlockwise any 
		*/
		arc?( x?:any, y?:any, radius?:any, startAngle?:any, endAngle?:any, anticlockwise?:any ): void;
		/** [Method] Arc command using svg parameters  
		* @param r1 any 
		* @param r2 any 
		* @param rotation any 
		* @param large any 
		* @param swipe any 
		* @param x2 any 
		* @param y2 any 
		*/
		arcSvg?( r1?:any, r2?:any, rotation?:any, large?:any, swipe?:any, x2?:any, y2?:any ): void;
		/** [Method] Adds an arc with the given control points and radius to the current subpath connected to the previous point by a str  
		* @param x1 any 
		* @param y1 any 
		* @param x2 any 
		* @param y2 any 
		* @param radiusX any 
		* @param radiusY any 
		* @param rotation any 
		*/
		arcTo?( x1?:any, y1?:any, x2?:any, y2?:any, radiusX?:any, radiusY?:any, rotation?:any ): void;
		/** [Method] Resets the current default path  */
		beginPath?(): void;
		/** [Method] Adds the given point to the current subpath connected to the previous one by a cubic B zier curve with the given con  
		* @param x1 any 
		* @param y1 any 
		* @param x2 any 
		* @param y2 any 
		* @param x3 any 
		* @param y3 any 
		*/
		bezierCurveTo?( x1?:any, y1?:any, x2?:any, y2?:any, x3?:any, y3?:any ): void;
		/** [Method] Clears the context  */
		clear?(): void;
		/** [Method] Marks the current subpath as closed and starts a new subpath with a point the same as the start and end of the newly  */
		closePath?(): void;
		/** [Method] Returns an object that represents a linear gradient that paints along the line given by the coordinates represented b  
		* @param x0 any 
		* @param y0 any 
		* @param x1 any 
		* @param y1 any 
		*/
		createLinearGradient?( x0?:any, y0?:any, x1?:any, y1?:any ): Ext.draw.engine.svgcontext.IGradient;
		/** [Method] Returns a CanvasGradient object that represents a radial gradient that paints along the cone given by the circles rep  
		* @param x0 any 
		* @param y0 any 
		* @param r0 any 
		* @param x1 any 
		* @param y1 any 
		* @param r1 any 
		*/
		createRadialGradient?( x0?:any, y0?:any, r0?:any, x1?:any, y1?:any, r1?:any ): Ext.draw.engine.svgcontext.IGradient;
		/** [Method] Draws the given image onto the canvas  
		* @param image any 
		* @param sx any 
		* @param sy any 
		* @param sw any 
		* @param sh any 
		* @param dx any 
		* @param dy any 
		* @param dw any 
		* @param dh any 
		*/
		drawImage?( image?:any, sx?:any, sy?:any, sw?:any, sh?:any, dx?:any, dy?:any, dw?:any, dh?:any ): void;
		/** [Method] Adds points to the subpath such that the arc described by the circumference of the ellipse described by the arguments  
		* @param x any 
		* @param y any 
		* @param radiusX any 
		* @param radiusY any 
		* @param rotation any 
		* @param startAngle any 
		* @param endAngle any 
		* @param anticlockwise any 
		*/
		ellipse?( x?:any, y?:any, radiusX?:any, radiusY?:any, rotation?:any, startAngle?:any, endAngle?:any, anticlockwise?:any ): void;
		/** [Method] Fills the subpaths of the current default path or the given path with the current fill style  */
		fill?(): void;
		/** [Method] Paints the given rectangle onto the canvas using the current fill style  
		* @param x any 
		* @param y any 
		* @param width any 
		* @param height any 
		*/
		fillRect?( x?:any, y?:any, width?:any, height?:any ): void;
		/** [Method] Note After the method guarantees the transform matrix will be inverted  
		* @param attr any The attribute object 
		* @param transformFillStroke bool Indicate whether to transform fill and stroke. If this is not  given, then uses `attr.transformFillStroke` instead. 
		*/
		fillStroke?( attr?:any, transformFillStroke?:bool ): void;
		/** [Method] Fills the given text at the given position  
		* @param text any 
		* @param x any 
		* @param y any 
		*/
		fillText?( text?:any, x?:any, y?:any ): void;
		/** [Method] Adds the given point to the current subpath connected to the previous one by a straight line  
		* @param x any 
		* @param y any 
		*/
		lineTo?( x?:any, y?:any ): void;
		/** [Method] Creates a new subpath with the given point  
		* @param x any 
		* @param y any 
		*/
		moveTo?( x?:any, y?:any ): void;
		/** [Method] Adds a new closed subpath to the path representing the given rectangle  
		* @param x any 
		* @param y any 
		* @param width any 
		* @param height any 
		*/
		rect?( x?:any, y?:any, width?:any, height?:any ): void;
		/** [Method] Pops the state stack and restores the state  */
		restore?(): void;
		/** [Method] Pushes the context state to the state stack  */
		save?(): void;
		/** [Method] Changes the transformation matrix to the matrix given by the arguments as described below  
		* @param xx any 
		* @param yx any 
		* @param xy any 
		* @param yy any 
		* @param dx any 
		* @param dy any 
		*/
		setTransform?( xx?:any, yx?:any, xy?:any, yy?:any, dx?:any, dy?:any ): void;
		/** [Method] Strokes the subpaths of the current default path or the given path with the current stroke style  */
		stroke?(): void;
		/** [Method] Paints the box that outlines the given rectangle onto the canvas using the current stroke style  
		* @param x any 
		* @param y any 
		* @param width any 
		* @param height any 
		*/
		strokeRect?( x?:any, y?:any, width?:any, height?:any ): void;
		/** [Method] Strokes the given text at the given position  
		* @param text any 
		* @param x any 
		* @param y any 
		*/
		strokeText?( text?:any, x?:any, y?:any ): void;
		/** [Method] Changes the transformation matrix to apply the matrix given by the arguments as described below  
		* @param xx any 
		* @param yx any 
		* @param xy any 
		* @param yy any 
		* @param dx any 
		* @param dy any 
		*/
		transform?( xx?:any, yx?:any, xy?:any, yy?:any, dx?:any, dy?:any ): void;
	}
}
declare module Ext.draw.gradient {
	export interface IGradient extends Ext.IBase,Ext.mixin.IIdentifiable {
		/** [Config Option] (Array/Object) */
		Defines?: any;
		/** [Method] Generates the gradient for the given context  
		* @param ctx any The context. 
		* @param bbox any 
		*/
		generateGradient?( ctx?:any, bbox?:any ): any;
		/** [Method] Retrieves the id of this component  */
		getId?(): string;
	}
}
declare module Ext.draw.gradient {
	export interface ILinear extends Ext.draw.gradient.IGradient {
		/** [Config Option] (Number) */
		The?: number;
		/** [Method] Generates the gradient for the given context  
		* @param ctx any The context. 
		* @param bbox any 
		*/
		generateGradient?( ctx?:any, bbox?:any ): any;
	}
}
declare module Ext.draw.gradient {
	export interface IRadial extends Ext.draw.gradient.IGradient {
		/** [Config Option] (Object) */
		end?: any;
		/** [Config Option] (Object) */
		start?: any;
		/** [Method] Generates the gradient for the given context  
		* @param ctx any The context. 
		* @param bbox any 
		*/
		generateGradient?( ctx?:any, bbox?:any ): any;
		/** [Method] Returns the value of end  */
		getEnd?(): any;
		/** [Method] Returns the value of start  */
		getStart?(): any;
		/** [Method] Sets the value of end  
		* @param end any 
		*/
		setEnd?( end?:any ): void;
		/** [Method] Sets the value of start  
		* @param start any 
		*/
		setStart?( start?:any ): void;
	}
}
declare module Ext.draw {
	export interface IGroup extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Add sprite to group  
		* @param sprite Ext.draw.sprite.ISprite 
		*/
		add?( sprite?:Ext.draw.sprite.ISprite ): void;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Add a list of sprites to group  
		* @param sprites any 
		*/
		addAll?( sprites?:any ): any;
		addAll?( sprites?:any[] ): void;
		addAll?( sprites?:Ext.draw.sprite.ISprite ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Clear the group 
		* @param destroySprite bool 
		*/
		clear?( destroySprite?:bool ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Destroy the group and remove it from surface  */
		destroy?(): void;
		/** [Method] Iterate all sprites with specific function  
		* @param fn any Function to iterate. 
		*/
		each?( fn?:any ): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Get the sprite with id or index  
		* @param id any 
		*/
		get?( id?:any ): any;
		get?( id?:string ): Ext.draw.sprite.ISprite;
		get?( id?:number ): Ext.draw.sprite.ISprite;
		/** [Method] Get the i th sprite of the group  
		* @param index number 
		*/
		getAt?( index?:number ): Ext.draw.sprite.ISprite;
		/** [Method] Return the minimal bounding box that contains all the sprites bounding boxes in this group  
		* @param isWithTransform any 
		*/
		getBBox?( isWithTransform?:any ): void;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of surface  */
		getSurface?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Hide all sprites in the group  
		* @param o bool Whether to re-render the frame. 
		*/
		hide?( o?:bool ): void;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Remote sprite from group  
		* @param sprite Ext.draw.sprite.ISprite 
		* @param destroySprite bool 
		*/
		remove?( sprite?:Ext.draw.sprite.ISprite, destroySprite?:bool ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Set attributes to all sprites in the group  
		* @param o any Sprite attribute options just like in Ext.draw.sprite.Sprite. 
		*/
		setAttributes?( o?:any ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Set dirty flag for all sprites in the group */
		setDirty?(): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of surface  
		* @param surface any 
		*/
		setSurface?( surface?:any ): void;
		/** [Method] Display all sprites in the group  
		* @param o bool Whether to re-render the frame. 
		*/
		show?( o?:bool ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.draw {
	export interface ILimitedCache extends Ext.IBase {
		/** [Config Option] (Function) */
		feeder?: any;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Method] Clear all the objects  */
		clear?(): void;
		/** [Method] Get a cached object  
		* @param id string 
		* @param args any Arguments appended to feeder. 
		*/
		get?( id?:string, args?:any ): any;
		/** [Method] Returns the value of feeder  */
		getFeeder?(): any;
		/** [Method] Returns the value of limit  */
		getLimit?(): number;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Sets the value of feeder  
		* @param feeder any 
		*/
		setFeeder?( feeder?:any ): number;
		/** [Method] Sets the value of limit  
		* @param limit number 
		*/
		setLimit?( limit?:number ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
	}
}
declare module Ext.draw {
	export interface IMatrix extends Ext.IBase {
		/** [Property] (Number) */
		a?: number;
		/** [Method] Postpend a matrix onto the current  
		* @param xx any Coefficient from x to x. 
		* @param xy any Coefficient from x to y. 
		* @param yx any Coefficient from y to x. 
		* @param yy any Coefficient from y to y. 
		* @param dx any Offset of x. 
		* @param dy any Offset of y. 
		*/
		append?( xx?:any, xy?:any, yx?:any, yy?:any, dx?:any, dy?:any ): Ext.draw.IMatrix;
		/** [Method] Postpend a matrix onto the current  
		* @param matrix Ext.draw.IMatrix 
		*/
		appendMatrix?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Clone this matrix  */
		clone?(): Ext.draw.IMatrix;
		/** [Method] Determines if this matrix has the same values as another matrix  
		* @param matrix Ext.draw.IMatrix 
		*/
		equals?( matrix?:Ext.draw.IMatrix ): bool;
		/** [Method] Horizontally flip the matrix */
		flipX?(): Ext.draw.IMatrix;
		/** [Method] Vertically flip the matrix */
		flipY?(): Ext.draw.IMatrix;
		/** [Method] Get offset x component of the matrix  */
		getDX?(): number;
		/** [Method] Get offset y component of the matrix  */
		getDY?(): number;
		/** [Method] Get the x scale of the matrix  */
		getScaleX?(): number;
		/** [Method] Get the y scale of the matrix  */
		getScaleY?(): number;
		/** [Method] Get x to x component of the matrix */
		getXX?(): number;
		/** [Method] Get x to y component of the matrix  */
		getXY?(): number;
		/** [Method] Get y to x component of the matrix  */
		getYX?(): number;
		/** [Method] Get y to y component of the matrix  */
		getYY?(): number;
		/** [Method] Return a new matrix represents the opposite transformation of the current one  
		* @param target Ext.draw.IMatrix A target matrix. If present, it will receive the result of inversion to avoid creating a new object. 
		*/
		inverse?( target?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Determines whether this matrix is an identity matrix no transform */
		isIdentity?(): bool;
		/** [Method] Postpend a matrix onto the current  
		* @param matrix Ext.draw.IMatrix 
		*/
		multiply?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Prepend a matrix onto the current  
		* @param xx any Coefficient from x to x. 
		* @param xy any Coefficient from x to y. 
		* @param yx any Coefficient from y to x. 
		* @param yy any Coefficient from y to y. 
		* @param dx any Offset of x. 
		* @param dy any Offset of y. 
		*/
		prepend?( xx?:any, xy?:any, yx?:any, yy?:any, dx?:any, dy?:any ): Ext.draw.IMatrix;
		/** [Method] Prepend a matrix onto the current  
		* @param matrix Ext.draw.IMatrix 
		*/
		prependMatrix?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;
		/** [Method] Reset the matrix to identical  */
		reset?(): Ext.draw.IMatrix;
		/** [Method] Rotate the matrix  
		* @param angle any Radians to rotate 
		* @param rcx any Center of rotation. 
		* @param rcy any Center of rotation. 
		* @param prepend any If true, this will transformation be prepended to the matrix. 
		*/
		rotate?( angle?:any, rcx?:any, rcy?:any, prepend?:any ): any;
		rotate?( angle?:number, rcx?:number, rcy?:number, prepend?:bool ): Ext.draw.IMatrix;
		rotate?( angle?:number, rcx?:undefined, rcy?:number, prepend?:bool ): Ext.draw.IMatrix;
		rotate?( angle?:number, rcx?:number, rcy?:undefined, prepend?:bool ): Ext.draw.IMatrix;
		rotate?( angle?:number, rcx?:undefined, rcy?:undefined, prepend?:bool ): Ext.draw.IMatrix;
		/** [Method] Rotate the matrix by the angle of a vector  
		* @param x number 
		* @param y number 
		* @param prepend bool If true, this will transformation be prepended to the matrix. 
		*/
		rotateFromVector?( x?:number, y?:number, prepend?:bool ): Ext.draw.IMatrix;
		/** [Method] Scale the matrix  
		* @param sx number 
		* @param sy number 
		* @param scx number 
		* @param scy number 
		* @param prepend bool If true, this will transformation be prepended to the matrix. 
		*/
		scale?( sx?:number, sy?:number, scx?:number, scy?:number, prepend?:bool ): Ext.draw.IMatrix;
		/** [Method] Set the elements of a Matrix 
		* @param xx number 
		* @param xy number 
		* @param yx number 
		* @param yy number 
		* @param dx number 
		* @param dy number 
		*/
		set?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;
		/** [Method] Skew the matrix 
		* @param angle number 
		*/
		skewX?( angle?:number ): Ext.draw.IMatrix;
		/** [Method] Skew the matrix 
		* @param angle number 
		*/
		skewY?( angle?:number ): Ext.draw.IMatrix;
		/** [Method] Split matrix into Translate Scale Shear and Rotate  */
		split?(): any;
		/** [Method] Create an array of elements by horizontal order xx yx dx yx yy dy */
		toArray?(): any[];
		/** [Method] Apply the matrix to a drawing context  
		* @param ctx any 
		*/
		toContext?( ctx?:any ): Ext.draw.IMatrix;
		/** [Method] Get an array of elements  */
		toString?(): any[];
		/** [Method] Return a string that can be used as transform attribute in SVG  */
		toSvg?(): string;
		/** [Method] Create an array of elements by vertical order xx xy yx yy dx dy */
		toVerticalArray?(): any[];
		/** [Method] Create an array of elements by vertical order xx xy yx yy dx dy */
		toVerticalArray?(): string;
		/** [Method]  
		* @param bbox any Given as {x: Number, y: Number, width: Number, height: Number}. 
		* @param radius number 
		* @param target any Optional target object to recieve the result. Recommanded to use it for better gc. 
		*/
		transformBBox?( bbox?:any, radius?:number, target?:any ): any;
		/** [Method] Transform a list for points  
		* @param list any[] 
		*/
		transformList?( list?:any[] ): any[];
		/** [Method] Transform a point to a new array  
		* @param point any[] 
		*/
		transformPoint?( point?:any[] ): any[];
		/** [Method] Translate the matrix  
		* @param x number 
		* @param y number 
		* @param prepend bool If true, this will transformation be prepended to the matrix. 
		*/
		translate?( x?:number, y?:number, prepend?:bool ): Ext.draw.IMatrix;
		/** [Method] Transform point returning the x component of the result  
		* @param x number 
		* @param y number 
		*/
		x?( x?:number, y?:number ): number;
		/** [Method] Transform point returning the y component of the result  
		* @param x number 
		* @param y number 
		*/
		y?( x?:number, y?:number ): number;
		/** [Method] Create a matrix from mat  
		* @param mat any 
		*/
		create?( mat?:any ): Ext.draw.IMatrix;
		/** [Method] Return the affine matrix that transform two points x0 y0 and x1 y1 to x0p y0p and x1p y1p  
		* @param x0 any 
		* @param y0 any 
		* @param x1 any 
		* @param y1 any 
		* @param x0p any 
		* @param y0p any 
		* @param x1p any 
		* @param y1p any 
		*/
		createAffineMatrixFromTwoPair?( x0?:any, y0?:any, x1?:any, y1?:any, x0p?:any, y0p?:any, x1p?:any, y1p?:any ): void;
		/** [Method] Return the affine matrix that transform two points x0 y0 and x1 y1 to x0p y0p and x1p y1p  
		* @param x0 any 
		* @param y0 any 
		* @param x1 any 
		* @param y1 any 
		* @param x0p any 
		* @param y0p any 
		* @param x1p any 
		* @param y1p any 
		*/
		createPanZoomFromTwoPair?( x0?:any, y0?:any, x1?:any, y1?:any, x0p?:any, y0p?:any, x1p?:any, y1p?:any ): void;
		/** [Method] Create a flyweight to wrap the given array  
		* @param elements any[] 
		*/
		fly?( elements?:any[] ): Ext.draw.IMatrix;
	}
}
declare module Ext.draw.modifier {
	export interface IAnimation extends Ext.draw.modifier.IModifier,Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		customDuration?: any;
		/** [Config Option] (Object) */
		customEasings?: any;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Function) */
		easing?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Remove special easings on the given attributes  
		* @param attrs any The source attributes. 
		*/
		clearDurationOn?( attrs?:any ): void;
		/** [Method] Remove special easings on the given attributes  
		* @param attrs any The source attributes. 
		*/
		clearEasingOn?( attrs?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of customDuration  */
		getCustomDuration?(): any;
		/** [Method] Returns the value of customEasings  */
		getCustomEasings?(): any;
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of easing  */
		getEasing?(): any;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes any The source attributes. 
		* @param changes any The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use  
		* @param attr any The attribute to be validated. Note that it may be already initialized, so do not override properties that has already be used. 
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to pushed down to the sprite  
		* @param attr any The source attributes. 
		* @param changes any The changes to make. This object might be changed unexpectedly inside the method. 
		*/
		pushDown?( attr?:any, changes?:any ): any;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of customDuration  
		* @param customDuration any 
		*/
		setCustomDuration?( customDuration?:any ): void;
		/** [Method] Sets the value of customEasings  
		* @param customEasings any 
		*/
		setCustomEasings?( customEasings?:any ): void;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Set special duration on the given attributes  
		* @param attrs any The source attributes. 
		* @param duration any The special duration. 
		*/
		setDurationOn?( attrs?:any, duration?:any ): void;
		/** [Method] Sets the value of easing  
		* @param easing any 
		*/
		setEasing?( easing?:any ): void;
		/** [Method] Set special easings on the given attributes  
		* @param attrs any The source attributes. 
		* @param easing any The special easings. 
		*/
		setEasingOn?( attrs?:any, easing?:any ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Stop all animations effected by this modifier */
		stop?(): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.draw.modifier {
	export interface IHighlight extends Ext.draw.modifier.IModifier {
		/** [Config Option] (Boolean) */
		enabled?: bool;
		/** [Config Option] (Object) */
		highlightStyle?: any;
		/** [Method] Filter modifier changes if overriding source attributes  
		* @param attr any The source attributes. 
		* @param changes any The modifier changes. 
		*/
		filterChanges?( attr?:any, changes?:any ): any;
		/** [Method] Returns the value of enabled  */
		getEnabled?(): bool;
		/** [Method] Returns the value of highlightStyle  */
		getHighlightStyle?(): any;
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes any The source attributes. 
		* @param changes any The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use  
		* @param attr any The attribute to be validated. Note that it may be already initialized, so do not override properties that has already be used. 
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to pushed down to the sprite  
		* @param attr any The source attributes. 
		* @param changes any The changes to make. This object might be changed unexpectedly inside the method. 
		*/
		pushDown?( attr?:any, changes?:any ): any;
		/** [Method] Sets the value of enabled  
		* @param enabled bool 
		*/
		setEnabled?( enabled?:bool ): void;
		/** [Method] Sets the value of highlightStyle  
		* @param highlightStyle any 
		*/
		setHighlightStyle?( highlightStyle?:any ): void;
	}
}
declare module Ext.draw.modifier {
	export interface IModifier extends Ext.IBase {
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		next?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		previous?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.sprite.Sprite) */
		sprite?: Ext.draw.sprite.ISprite;
		/** [Method] Returns the value of next  */
		getNext?(): Ext.draw.modifier.IModifier;
		/** [Method] Returns the value of previous  */
		getPrevious?(): Ext.draw.modifier.IModifier;
		/** [Method] Returns the value of sprite  */
		getSprite?(): Ext.draw.sprite.ISprite;
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes any The source attributes. 
		* @param changes any The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use  
		* @param attr any The attribute to be validated. Note that it may be already initialized, so do not override properties that has already be used. 
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to pushed down to the sprite  
		* @param attr any The source attributes. 
		* @param changes any The changes to make. This object might be changed unexpectedly inside the method. 
		*/
		pushDown?( attr?:any, changes?:any ): any;
		/** [Method] Sets the value of next  
		* @param next Ext.draw.modifier.IModifier 
		*/
		setNext?( next?:Ext.draw.modifier.IModifier ): void;
		/** [Method] Sets the value of previous  
		* @param previous Ext.draw.modifier.IModifier 
		*/
		setPrevious?( previous?:Ext.draw.modifier.IModifier ): void;
		/** [Method] Sets the value of sprite  
		* @param sprite Ext.draw.sprite.ISprite 
		*/
		setSprite?( sprite?:Ext.draw.sprite.ISprite ): void;
	}
}
declare module Ext.draw.modifier {
	export interface ITarget extends Ext.draw.modifier.IModifier {
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes any The source attributes. 
		* @param changes any The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;
		/** [Method] Validate attribute set before use  
		* @param attr any The attribute to be validated. Note that it may be already initialized, so do not override properties that has already be used. 
		*/
		prepareAttributes?( attr?:any ): void;
		/** [Method] Invoked when changes need to pushed down to the sprite  
		* @param attr any The source attributes. 
		* @param changes any The changes to make. This object might be changed unexpectedly inside the method. 
		*/
		pushDown?( attr?:any, changes?:any ): any;
	}
}
declare module Ext.draw {
	export interface IPath extends Ext.IBase {
		/** [Method] Create an circular arc  
		* @param x any 
		* @param y any 
		* @param radius any 
		* @param startAngle any 
		* @param endAngle any 
		* @param anticlockwise any 
		*/
		arc?( x?:any, y?:any, radius?:any, startAngle?:any, endAngle?:any, anticlockwise?:any ): void;
		/** [Method] http  www w3 org TR SVG implnote html ArcImplementationNotes 
		* @param rx any 
		* @param ry any 
		* @param rotation any Differ from svg spec, this is radian. 
		* @param fA any 
		* @param fS any 
		* @param x2 any 
		* @param y2 any 
		*/
		arcSvg?( rx?:any, ry?:any, rotation?:any, fA?:any, fS?:any, x2?:any, y2?:any ): void;
		/** [Method] Create a elliptic arc curve compatible with SVG s arc to instruction  
		* @param x1 number 
		* @param y1 number 
		* @param x2 number 
		* @param y2 number 
		* @param rx number 
		* @param ry number 
		* @param rotation number 
		*/
		arcTo?( x1?:number, y1?:number, x2?:number, y2?:number, rx?:number, ry?:number, rotation?:number ): void;
		/** [Method] A cubic bezier curve to a position  
		* @param cx1 number 
		* @param cy1 number 
		* @param cx2 number 
		* @param cy2 number 
		* @param x number 
		* @param y number 
		*/
		bezierCurveTo?( cx1?:number, cy1?:number, cx2?:number, cy2?:number, x?:number, y?:number ): void;
		/** [Method] Clear the path  */
		clear?(): void;
		/** [Method] Clone this path  */
		clone?(): Ext.draw.IPath;
		/** [Method] Close this path with a straight line  */
		closePath?(): void;
		/** [Method] Create an elliptic arc  
		* @param cx any 
		* @param cy any 
		* @param radiusX any 
		* @param radiusY any 
		* @param rotation any 
		* @param startAngle any 
		* @param endAngle any 
		* @param anticlockwise any 
		*/
		ellipse?( cx?:any, cy?:any, radiusX?:any, radiusY?:any, rotation?:any, startAngle?:any, endAngle?:any, anticlockwise?:any ): void;
		/** [Method] Reconstruct path from cubic bezier curve stripes  
		* @param stripes any[] 
		*/
		fromStripes?( stripes?:any[] ): void;
		/** [Method] Feed the path from svg path string  
		* @param pathString any 
		*/
		fromSvgString?( pathString?:any ): void;
		/** [Method] Get the bounding box of this matrix  
		* @param target any Optional object to receive the result. 
		*/
		getDimension?( target?:any ): any;
		/** [Method] Get the bounding box as if the path is transformed by a matrix  
		* @param matrix Ext.draw.IMatrix 
		* @param target any Optional object to receive the result. 
		*/
		getDimensionWithTransform?( matrix?:Ext.draw.IMatrix, target?:any ): any;
		/** [Method] Test wether the given point is on or inside the path  
		* @param x any 
		* @param y any 
		*/
		isPointInPath?( x?:any, y?:any ): bool;
		/** [Method] A straight line to a position  
		* @param x number 
		* @param y number 
		*/
		lineTo?( x?:number, y?:number ): void;
		/** [Method] Move to a position  
		* @param x number 
		* @param y number 
		*/
		moveTo?( x?:number, y?:number ): void;
		/** [Method] A quadratic bezier curve to a position  
		* @param cx number 
		* @param cy number 
		* @param x number 
		* @param y number 
		*/
		quadraticCurveTo?( cx?:number, cy?:number, x?:number, y?:number ): void;
		/** [Method] Draw a rectangle and close it  
		* @param x any 
		* @param y any 
		* @param width any 
		* @param height any 
		*/
		rect?( x?:any, y?:any, width?:any, height?:any ): void;
		/** [Method] Return an svg path string for this path  */
		toString?(): string;
		/** [Method] Convert path to bezier curve stripes  
		* @param target any[] The optional array to receive the result. 
		*/
		toStripes?( target?:any[] ): any[];
		/** [Method] Transform the current path by a matrix  
		* @param matrix Ext.draw.IMatrix 
		*/
		transform?( matrix?:Ext.draw.IMatrix ): void;
	}
}
declare module Ext.draw {
	export interface ISegmentTree extends Ext.IBase {
		/** [Method] Returns the minimum range of data that fits the given range and step size  
		* @param min number 
		* @param max number 
		* @param estStep number 
		*/
		getAggregation?( min?:number, max?:number, estStep?:number ): any;
		/** [Method] Returns the value of strategy  */
		getStrategy?(): string;
		/** [Method] Sets the data of the segment tree  
		* @param dataX any 
		* @param dataOpen any 
		* @param dataHigh any 
		* @param dataLow any 
		* @param dataClose any 
		*/
		setData?( dataX?:any, dataOpen?:any, dataHigh?:any, dataLow?:any, dataClose?:any ): void;
		/** [Method] Sets the value of strategy  
		* @param strategy string 
		*/
		setStrategy?( strategy?:string ): void;
	}
}
declare module Ext.draw {
	export interface ISolver extends Ext.IBase {
	}
	export class Solver {
		/** [Method] Returns the function f x a  x3  b  x2  c  x  d and solver for f x y 
		* @param a any 
		* @param b any 
		* @param c any 
		* @param d any 
		*/
		static cubicFunction( a?:any, b?:any, c?:any, d?:any ): void;
		/** [Method] Cubic root of number 
		* @param number any {Number} 
		*/
		static cubicRoot( number?:any ): void;
		/** [Method] Returns the function f x a  x  b and solver for f x y 
		* @param a any 
		* @param b any 
		*/
		static linearFunction( a?:any, b?:any ): void;
		/** [Method] Returns the function f x a  x  2  b  x  c and solver for f x y 
		* @param a any 
		* @param b any 
		* @param c any 
		*/
		static quadraticFunction( a?:any, b?:any, c?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IAnimationParser extends Ext.IBase {
	}
	export class AnimationParser {
	}
}
declare module Ext.draw.sprite {
	export interface IArc extends Ext.draw.sprite.ICircle {
		/** [Config Option] (Boolean) */
		anticlockwise?: bool;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IAttributeDefinition extends Ext.IBase {
		/** [Config Option] (Object) */
		aliases?: any;
		/** [Config Option] (Object) */
		animationProcessors?: any;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Object) */
		dirty?: any;
		/** [Config Option] (Object) */
		processors?: any;
		/** [Config Option] (Object) */
		updaters?: any;
		/** [Method] Returns the value of aliases  */
		getAliases?(): any;
		/** [Method] Returns the value of animationProcessors  */
		getAnimationProcessors?(): any;
		/** [Method] Returns the value of defaults  */
		getDefaults?(): any;
		/** [Method] Returns the value of processors  */
		getProcessors?(): any;
		/** [Method] Returns the value of updaters  */
		getUpdaters?(): any;
		/** [Method] Normalizes the changes given via their processors before they are applied as attributes  
		* @param changes any The changes given. 
		*/
		normalize?( changes?:any ): any;
		/** [Method] Sets the value of aliases  
		* @param aliases any 
		*/
		setAliases?( aliases?:any ): void;
		/** [Method] Sets the value of animationProcessors  
		* @param animationProcessors any 
		*/
		setAnimationProcessors?( animationProcessors?:any ): void;
		/** [Method] Sets the value of defaults  
		* @param defaults any 
		*/
		setDefaults?( defaults?:any ): void;
		/** [Method] Sets the value of processors  
		* @param processors any 
		*/
		setProcessors?( processors?:any ): void;
		/** [Method] Sets the value of updaters  
		* @param updaters any 
		*/
		setUpdaters?( updaters?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IAttributeParser extends Ext.IBase {
	}
	export class AttributeParser {
	}
}
declare module Ext.draw.sprite {
	export interface ICircle extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		r?: number;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform any 
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IComposite extends Ext.draw.sprite.ISprite {
		/** [Method] Adds a sprite to the composite  
		* @param sprite any 
		*/
		add?( sprite?:any ): void;
		/** [Method] Renders all sprites contained in the composite to the surface  
		* @param surface any 
		* @param ctx any 
		* @param region any 
		*/
		render?( surface?:any, ctx?:any, region?:any ): void;
		/** [Method] Updates the bounding box of the composite which contains the bounding box of all sprites in the composite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IEllipse extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		axisRotation?: number;
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		rx?: number;
		/** [Config Option] (Number) */
		ry?: number;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform any 
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IEllipticalArc extends Ext.draw.sprite.IEllipse {
		/** [Config Option] (Boolean) */
		anticlockwise?: bool;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IImage extends Ext.draw.sprite.IRect {
		/** [Config Option] (String) */
		src?: string;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		*/
		render?( surface?:any, ctx?:any ): any;
	}
}
declare module Ext.draw.sprite {
	export interface IInstancing extends Ext.draw.sprite.ISprite {
		/** [Config Option] (Object) */
		template?: any;
		/** [Method] Creates a new sprite instance  
		* @param config any The configuration of the instance. 
		* @param data any 
		* @param bypassNormalization bool 'true' to bypass attribute normalization. 
		* @param avoidCopy bool 'true' to avoid copying. 
		*/
		createInstance?( config?:any, data?:any, bypassNormalization?:bool, avoidCopy?:bool ): any;
		/** [Method] Removes the sprite and clears all listeners  */
		destroy?(): void;
		/** [Method] Not supported  */
		getBBox?(): void;
		/** [Method] Returns the bounding box for the instance at the given index  
		* @param index number The index of the instance. 
		* @param isWithoutTransform bool 'true' to not apply sprite transforms to the bounding box. 
		*/
		getBBoxFor?( index?:number, isWithoutTransform?:bool ): any;
		/** [Method] Returns the value of template  */
		getTemplate?(): any;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		* @param clipRegion any 
		* @param region any 
		*/
		render?( surface?:any, ctx?:any, clipRegion?:any, region?:any ): any;
		/** [Method] Sets the attributes for the instance at the given index  
		* @param index number the index of the instance 
		* @param changes any the attributes to change 
		* @param bypassNormalization bool 'true' to avoid attribute normalization 
		*/
		setAttributesFor?( index?:number, changes?:any, bypassNormalization?:bool ): void;
		/** [Method] Sets the value of template  
		* @param template any 
		*/
		setTemplate?( template?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IPath extends Ext.draw.sprite.ISprite {
		/** [Config Option] (String) */
		path?: string;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		*/
		render?( surface?:any, ctx?:any ): any;
		/** [Method] Update the path  
		* @param path Ext.draw.IPath An empty path to draw on using path API. 
		* @param attr any The attribute object. Note: DO NOT use the sprite.attr instead of this if you want to work with instancing. 
		*/
		updatePath?( path?:Ext.draw.IPath, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform any 
		*/
		updateTransformedBBox?( transform?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IRect extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform any 
		* @param plain any 
		*/
		updateTransformedBBox?( transform?:any, plain?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface ISector extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Method] Update the path  
		* @param path any 
		* @param attr any 
		*/
		updatePath?( path?:any, attr?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface ISprite extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Number) */
		fillOpacity?: number;
		/** [Config Option] (String) */
		fillStyle?: string;
		/** [Config Option] (Number) */
		globalAlpha?: number;
		/** [Config Option] (Boolean) */
		hidden?: bool;
		/** [Config Option] (String) */
		lineCap?: string;
		/** [Config Option] (String) */
		lineJoin?: string;
		/** [Config Option] (Number) */
		lineWidth?: number;
		/** [Config Option] (Number) */
		miterLimit?: number;
		/** [Config Option] (Number) */
		rotationCenterX?: number;
		/** [Config Option] (Number) */
		rotationCenterY?: number;
		/** [Config Option] (Number) */
		rotationRads?: number;
		/** [Config Option] (Number) */
		scalingCenterX?: number;
		/** [Config Option] (Number) */
		scalingCenterY?: number;
		/** [Config Option] (Number) */
		scalingX?: number;
		/** [Config Option] (Number) */
		scalingY?: number;
		/** [Config Option] (Number) */
		shadowBlur?: number;
		/** [Config Option] (String) */
		shadowColor?: string;
		/** [Config Option] (Number) */
		shadowOffsetX?: number;
		/** [Config Option] (Number) */
		shadowOffsetY?: number;
		/** [Config Option] (Number) */
		strokeOpacity?: number;
		/** [Config Option] (String) */
		strokeStyle?: string;
		/** [Config Option] (Boolean) */
		transformFillStroke?: bool;
		/** [Config Option] (Number) */
		translationX?: number;
		/** [Config Option] (Number) */
		translationY?: number;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Property] (Object) */
		attr?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Removes the sprite and clears all listeners  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the bounding box for the given Sprite as calculated with the Canvas engine  
		* @param isWithoutTransform bool Whether to calculate the bounding box with the current transforms or not. 
		*/
		getBBox?( isWithoutTransform?:bool ): void;
		/** [Method] Subclass can rewrite this function to gain better performance  
		* @param isWithoutTransform bool 
		*/
		getBBoxCenter?( isWithoutTransform?:bool ): any[];
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of parent  */
		getParent?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Hide the sprite  */
		hide?(): Ext.draw.sprite.ISprite;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Called before rendering  */
		preRender?(): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Render method  
		* @param surface Ext.draw.ISurface The surface. 
		* @param ctx any A context object compatible with CanvasRenderingContext2D. 
		* @param region any[] The clip region (or called dirty rect) of the current rendering. Not be confused with surface.getRegion(). 
		*/
		render?( surface?:Ext.draw.ISurface, ctx?:any, region?:any[] ): any;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Set attributes of the sprite  
		* @param changes any The content of the change. 
		* @param bypassNormalization bool true to avoid normalization of the given changes. 
		* @param avoidCopy bool true to avoid copying the changes object. The content of object may be destroyed. 
		*/
		setAttributes?( changes?:any, bypassNormalization?:bool, avoidCopy?:bool ): void;
		/** [Method] Set attributes of the sprite assuming the names and values have already been normalized  
		* @param changes any The content of the change. 
		* @param avoidCopy bool true to avoid copying the changes object. The content of object may be destroyed. 
		*/
		setAttributesBypassingNormalization?( changes?:any, avoidCopy?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of parent  
		* @param parent any 
		*/
		setParent?( parent?:any ): void;
		/** [Method] Show the sprite  */
		show?(): Ext.draw.sprite.ISprite;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any Target object. 
		*/
		updatePlainBBox?( plain?:any ): void;
		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform any Target object. 
		* @param plain any Auxiliary object providing information of plain object. 
		*/
		updateTransformedBBox?( transform?:any, plain?:any ): void;
	}
}
declare module Ext.draw.sprite {
	export interface IText extends Ext.draw.sprite.ISprite {
		/** [Config Option] (String) */
		font?: string;
		/** [Config Option] (String) */
		fontFamily?: string;
		/** [Config Option] (String/Number) */
		fontSize?: any;
		/** [Config Option] (String) */
		fontStyle?: string;
		/** [Config Option] (String) */
		fontVariant?: string;
		/** [Config Option] (String) */
		fontWeight?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		textBaseline?: string;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Method] Render method  
		* @param surface any 
		* @param ctx any 
		*/
		render?( surface?:any, ctx?:any ): any;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain any 
		*/
		updatePlainBBox?( plain?:any ): void;
	}
}
declare module Ext.draw {
	export interface ISurface extends Ext.IComponent {
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Boolean) */
		dirty?: bool;
		/** [Config Option] (Array) */
		groups?: any[];
		/** [Config Option] (Ext.draw.Group) */
		items?: Ext.draw.IGroup;
		/** [Config Option] (Array) */
		region?: any[];
		/** [Property] (Object) */
		devicePixelRatio?: any;
		/** [Method] Add a Sprite to the surface  */
		add?(): void;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;
		/** [Method] Destroys the surface  */
		destroy?(): void;
		/** [Method]  
		* @param sprite any 
		* @param isWithoutTransform any 
		*/
		getBBox?( sprite?:any, isWithoutTransform?:any ): any;
		/** [Method] Returns the value of background  */
		getBackground?(): any;
		/** [Method] Returns true if the surface is dirty  */
		getDirty?(): bool;
		/** [Method]  
		* @param id string The unique identifier of the group. 
		*/
		getGroup?( id?:string ): Ext.draw.IGroup;
		/** [Method] Returns the value of groups  */
		getGroups?(): any[];
		/** [Method] Returns the value of items  */
		getItems?(): Ext.draw.IGroup;
		/** [Method] Returns the value of region  */
		getRegion?(): any[];
		/** [Method] Invoked when a sprite is adding to the surface  
		* @param sprite Ext.draw.sprite.ISprite The sprite to be added. 
		*/
		onAdd?( sprite?:Ext.draw.sprite.ISprite ): void;
		/** [Method] Remove a given sprite from the surface optionally destroying the sprite in the process  
		* @param sprite Ext.draw.sprite.ISprite 
		* @param destroySprite bool 
		*/
		remove?( sprite?:Ext.draw.sprite.ISprite, destroySprite?:bool ): void;
		/** [Method] Remove all sprites from the surface optionally destroying the sprites in the process  */
		removeAll?(): void;
		/** [Method] Triggers the re rendering of the canvas  */
		renderFrame?(): void;
		/** [Method] Force the element to redraw  */
		repaint?(): void;
		/** [Method] Reset the matrix of the surface  */
		resetTransform?(): void;
		/** [Method] Round the number to align to the pixels on device  
		* @param num any The number to align. 
		*/
		roundPixel?( num?:any ): number;
		/** [Method] Sets the value of background  
		* @param background any 
		*/
		setBackground?( background?:any ): void;
		/** [Method] Sets the value of groups  
		* @param groups any[] 
		*/
		setGroups?( groups?:any[] ): void;
		/** [Method] Sets the value of items  
		* @param items Ext.draw.IGroup 
		*/
		setItems?( items?:Ext.draw.IGroup ): void;
		/** [Method] Sets the value of region  
		* @param region any[] 
		*/
		setRegion?( region?:any[] ): void;
		/** [Method] Mark the surface to render after another surface is updated  
		* @param surface any The surface to wait for. 
		*/
		waitFor?( surface?:any ): void;
		/** [Method] Stably sort the list of sprites by their zIndex  
		* @param list any 
		*/
		stableSort?( list?:any ): void;
	}
}
declare module Ext.draw {
	export interface ITextMeasurer extends Ext.IBase {
	}
	export class TextMeasurer {
		/** [Method] Measure a text with specific font  
		* @param text string 
		* @param font string 
		*/
		static measureText( text?:string, font?:string ): any;
		/** [Method] Measure a single line text with specific font  
		* @param text string 
		* @param font string 
		*/
		static measureTextSingleLine( text?:string, font?:string ): any;
	}
}
declare module Ext.draw {
	export interface ITimingFunctions extends Ext.IBase {
	}
	export class TimingFunctions {
	}
}
declare module Ext.env {
	export interface IBrowser extends Ext.IBase {
		/** [Property] (String) */
		engineName?: string;
		/** [Property] (Ext.Version) */
		engineVersion?: Ext.IVersion;
		/** [Property] (Boolean) */
		isSecure?: bool;
		/** [Property] (Boolean) */
		isStrict?: bool;
		/** [Property] (String) */
		name?: string;
		/** [Property] (String) */
		userAgent?: string;
		/** [Property] (Ext.Version) */
		version?: Ext.IVersion;
		/** [Method] A hybrid property can be either accessed as a method call for example  if Ext browser is IE 
		* @param value string The OS name to check. 
		*/
		is?( value?:string ): bool;
	}
}
declare module Ext.env {
	export interface IFeature extends Ext.IBase {
	}
}
declare module Ext.env {
	export interface IOS extends Ext.IBase {
		/** [Property] (String) */
		name?: string;
		/** [Property] (Ext.Version) */
		version?: Ext.IVersion;
		/** [Method] A hybrid property can be either accessed as a method call i e  if Ext os is Android 
		* @param value string The OS name to check. 
		*/
		is?( value?:string ): bool;
	}
}
declare module Ext.event {
	export interface IController extends Ext.IBase {
	}
}
declare module Ext.event {
	export interface IDispatcher extends Ext.IBase {
		/** [Method] Returns the value of publishers  */
		getPublishers?(): any;
		/** [Method] Sets the value of publishers  
		* @param publishers any 
		*/
		setPublishers?( publishers?:any ): void;
	}
}
declare module Ext.event {
	export interface IDom {
		/** [Property] (Number) */
		distance?: number;
		/** [Property] (Number) */
		pageX?: number;
		/** [Property] (Number) */
		pageY?: number;
		/** [Property] (HTMLElement) */
		target?: HTMLElement;
		/** [Method] Gets the x coordinate of the event  */
		getPageX?(): number;
		/** [Method] Gets the y coordinate of the event  */
		getPageY?(): number;
		/** [Method] Gets the target for the event  
		* @param selector any A simple selector to filter the target or look for an ancestor of the target 
		* @param maxDepth any The max depth to search as a number or element (defaults to 10 || document.body) 
		* @param returnEl any true to return a Ext.Element object instead of DOM node. 
		*/
		getTarget?( selector?:any, maxDepth?:any, returnEl?:any ): any;
		getTarget?( selector?:string, maxDepth?:number, returnEl?:bool ): HTMLElement;
		getTarget?( selector?:string, maxDepth?:any, returnEl?:bool ): HTMLElement;
		/** [Method] Returns the time of the event  */
		getTime?(): any;
		/** [Method] Gets the X and Y coordinates of the event  */
		getXY?(): any[];
		/** [Method] Prevents the browsers default handling of the event  */
		preventDefault?(): void;
	}
}
declare module Ext.event {
	export interface IEvent extends Ext.IBase,Ext.event.ITouch {
		/** [Property] (Number) */
		angle?: number;
		/** [Property] (Number) */
		direction?: number;
		/** [Property] (Number) */
		duration?: number;
		/** [Property] (Number) */
		rotation?: number;
		/** [Property] (Number) */
		scale?: number;
		/** [Method] Stop the event preventDefault and stopPropagation */
		stopEvent?(): Ext.event.IEvent;
		/** [Method] Cancels bubbling of the event  */
		stopPropagation?(): Ext.event.IEvent;
	}
}
declare module Ext {
	export interface IEventObject extends Ext.IBase,Ext.event.ITouch {
		/** [Property] (Number) */
		angle?: number;
		/** [Property] (Number) */
		direction?: number;
		/** [Property] (Number) */
		duration?: number;
		/** [Property] (Number) */
		rotation?: number;
		/** [Property] (Number) */
		scale?: number;
		/** [Method] Stop the event preventDefault and stopPropagation */
		stopEvent?(): Ext.event.IEvent;
		/** [Method] Cancels bubbling of the event  */
		stopPropagation?(): Ext.event.IEvent;
	}
}
declare module Ext.event {
	export interface IListenerStack extends Ext.IBase {
	}
}
declare module Ext.event.publisher {
	export interface IComponentDelegation extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.event.publisher {
	export interface IComponentPaint extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.event.publisher {
	export interface IComponentSize extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.event.publisher {
	export interface IDom extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.event.publisher {
	export interface IElementPaint extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.event.publisher {
	export interface IElementSize extends Ext.event.publisher.IPublisher {
	}
}
declare module Ext.event.publisher {
	export interface IPublisher extends Ext.IBase {
	}
}
declare module Ext.event.publisher {
	export interface ITouchGesture extends Ext.event.publisher.IDom {
		/** [Method] Returns the value of moveThrottle  */
		getMoveThrottle?(): number;
		/** [Method] Returns the value of recognizers  */
		getRecognizers?(): any;
		/** [Method] Sets the value of moveThrottle  
		* @param moveThrottle number 
		*/
		setMoveThrottle?( moveThrottle?:number ): void;
		/** [Method] Sets the value of recognizers  
		* @param recognizers any 
		*/
		setRecognizers?( recognizers?:any ): void;
	}
}
declare module Ext.event.recognizer {
	export interface IDoubleTap extends Ext.event.recognizer.ISingleTouch {
		/** [Method] Returns the value of maxDuration  */
		getMaxDuration?(): number;
		/** [Method] Sets the value of maxDuration  
		* @param maxDuration number 
		*/
		setMaxDuration?( maxDuration?:number ): void;
	}
}
declare module Ext.event.recognizer {
	export interface IDrag extends Ext.event.recognizer.ISingleTouch {
		/** [Config Option] (Number) */
		minDistance?: number;
		/** [Method] Returns the value of minDistance  */
		getMinDistance?(): number;
		/** [Method] Sets the value of minDistance  
		* @param minDistance number 
		*/
		setMinDistance?( minDistance?:number ): void;
	}
}
declare module Ext.event.recognizer {
	export interface IHorizontalSwipe extends Ext.event.recognizer.ISwipe {
	}
}
declare module Ext.event.recognizer {
	export interface ILongPress extends Ext.event.recognizer.ISingleTouch {
		/** [Method] Returns the value of minDuration  */
		getMinDuration?(): number;
		/** [Method] Sets the value of minDuration  
		* @param minDuration number 
		*/
		setMinDuration?( minDuration?:number ): void;
	}
}
declare module Ext.event.recognizer {
	export interface IMultiTouch extends Ext.event.recognizer.ITouch {
	}
}
declare module Ext.event.recognizer {
	export interface IPinch extends Ext.event.recognizer.IMultiTouch {
	}
}
declare module Ext.event.recognizer {
	export interface IRecognizer extends Ext.IBase,Ext.mixin.IIdentifiable {
		/** [Method] Returns the value of callbackScope  */
		getCallbackScope?(): any;
		/** [Method] Retrieves the id of this component  */
		getId?(): string;
		/** [Method] Returns the value of onFailed  */
		getOnFailed?(): any;
		/** [Method] Returns the value of onRecognized  */
		getOnRecognized?(): any;
		/** [Method] Sets the value of callbackScope  
		* @param callbackScope any 
		*/
		setCallbackScope?( callbackScope?:any ): void;
		/** [Method] Sets the value of onFailed  
		* @param onFailed any 
		*/
		setOnFailed?( onFailed?:any ): void;
		/** [Method] Sets the value of onRecognized  
		* @param onRecognized any 
		*/
		setOnRecognized?( onRecognized?:any ): void;
	}
}
declare module Ext.event.recognizer {
	export interface IRotate extends Ext.event.recognizer.IMultiTouch {
	}
}
declare module Ext.event.recognizer {
	export interface ISingleTouch extends Ext.event.recognizer.ITouch {
	}
}
declare module Ext.event.recognizer {
	export interface ISwipe extends Ext.event.recognizer.ISingleTouch {
		/** [Method] Returns the value of maxDuration  */
		getMaxDuration?(): number;
		/** [Method] Returns the value of maxOffset  */
		getMaxOffset?(): number;
		/** [Method] Returns the value of minDistance  */
		getMinDistance?(): number;
		/** [Method] Sets the value of maxDuration  
		* @param maxDuration number 
		*/
		setMaxDuration?( maxDuration?:number ): void;
		/** [Method] Sets the value of maxOffset  
		* @param maxOffset number 
		*/
		setMaxOffset?( maxOffset?:number ): void;
		/** [Method] Sets the value of minDistance  
		* @param minDistance number 
		*/
		setMinDistance?( minDistance?:number ): void;
	}
}
declare module Ext.event.recognizer {
	export interface ITap extends Ext.event.recognizer.ISingleTouch {
		/** [Config Option] (Number) */
		moveDistance?: number;
		/** [Method] Returns the value of moveDistance  */
		getMoveDistance?(): number;
		/** [Method] Sets the value of moveDistance  
		* @param moveDistance number 
		*/
		setMoveDistance?( moveDistance?:number ): void;
	}
}
declare module Ext.event.recognizer {
	export interface ITouch extends Ext.event.recognizer.IRecognizer {
	}
}
declare module Ext.event.recognizer {
	export interface IVerticalSwipe extends Ext.event.recognizer.ISwipe {
	}
}
declare module Ext.event {
	export interface ITouch extends Ext.event.IDom {
	}
}
declare module Ext {
	export interface IEvented extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext {
	export interface IEventedBase extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext {
	export interface IEventManager {
	}
	export class EventManager {
		/** [Method] Appends an event handler to an element  
		* @param el any The HTML element or id to assign the event handler to. 
		* @param eventName any The name of the event to listen for. 
		* @param handler any The handler function the event invokes. This function is passed the following parameters: 
		* @param scope any The scope (this reference) in which the handler function is executed. Defaults to the Element. 
		* @param options any An object containing handler configuration properties. This may contain any of the following properties: 
		*/
		static addListener( el?:any, eventName?:any, handler?:any, scope?:any, options?:any ): any;
		static addListener( el?:string, eventName?:string, handler?:any, scope?:any, options?:any ): void;
		static addListener( el?:HTMLElement, eventName?:string, handler?:any, scope?:any, options?:any ): void;
		/** [Method] Appends an event handler to an element  
		* @param el any The html element or id to assign the event handler to. 
		* @param eventName any The name of the event to listen for. 
		* @param handler any The handler function the event invokes. 
		* @param scope any (this reference) in which the handler function executes. Defaults to the Element. 
		* @param options any An object containing standard addListener options 
		*/
		static on( el?:any, eventName?:any, handler?:any, scope?:any, options?:any ): any;
		static on( el?:string, eventName?:string, handler?:any, scope?:any, options?:any ): void;
		static on( el?:HTMLElement, eventName?:string, handler?:any, scope?:any, options?:any ): void;
		/** [Method] Adds a listener to be notified when the document is ready before onload and before images are loaded */
		static onDocumentReady(): void;
		/** [Method] Adds a listener to be notified when the browser window is resized and provides resize event buffering 50 millisecond  
		* @param fn any The handler function the window resize event invokes. 
		* @param scope any The scope (this reference) in which the handler function executes. Defaults to the browser window. 
		* @param options bool Options object as passed to Ext.Element.addListener 
		*/
		static onWindowResize( fn?:any, scope?:any, options?:bool ): void;
		/** [Method] Removes all event handers from an element  
		* @param el any The id or html element from which to remove all event handlers. 
		*/
		static removeAll( el?:any ): any;
		static removeAll( el?:string ): void;
		static removeAll( el?:HTMLElement ): void;
		/** [Method] Removes an event handler from an element  
		* @param el any The id or html element from which to remove the listener. 
		* @param eventName any The name of the event. 
		* @param fn any The handler function to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any If a scope (this reference) was specified when the listener was added, then this must refer to the same object. 
		*/
		static removeListener( el?:any, eventName?:any, fn?:any, scope?:any ): any;
		static removeListener( el?:string, eventName?:string, fn?:any, scope?:any ): void;
		static removeListener( el?:HTMLElement, eventName?:string, fn?:any, scope?:any ): void;
		/** [Method] Removes an event handler from an element  
		* @param el any The id or html element from which to remove the listener. 
		* @param eventName any The name of the event. 
		* @param fn any The handler function to remove. This must be a reference to the function passed into the on call. 
		* @param scope any If a scope (this reference) was specified when the listener was added, then this must refer to the same object. 
		*/
		static un( el?:any, eventName?:any, fn?:any, scope?:any ): any;
		static un( el?:string, eventName?:string, fn?:any, scope?:any ): void;
		static un( el?:HTMLElement, eventName?:string, fn?:any, scope?:any ): void;
	}
}
declare module Ext {
	export interface IFeature extends Ext.env.IFeature {
	}
	export class Feature {
		/** [Method] Verifies if a browser feature exists or not on the current device  
		* @param value string The feature name to check. 
		*/
		static has( value?:string ): bool;
	}
}
declare module Ext.field {
	export interface ICheckbox extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		checked?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String) */
		value?: string;
		/** [Method] Set the checked state of the checkbox to true  */
		check?(): Ext.field.ICheckbox;
		/** [Method] Method called when this Ext field Checkbox has been checked  */
		doChecked?(): void;
		/** [Method] Method called when this Ext field Checkbox has been unchecked  */
		doUnChecked?(): void;
		/** [Method] Returns the field checked value  */
		getChecked?(): any;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns an array of values from the checkboxes in the group that are checked  */
		getGroupValues?(): any[];
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): bool;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): string;
		/** [Method] Returns the checked state of the checkbox  */
		isChecked?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Resets the status of all matched checkboxes in the same group to checked  */
		resetGroupValues?(): Ext.field.ICheckbox;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the status of all matched checkboxes in the same group to checked  
		* @param values any[] An array of values. 
		*/
		setGroupValues?( values?:any[] ): Ext.field.ICheckbox;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value string 
		*/
		setValue?( value?:string ): void;
		/** [Method] Set the checked state of the checkbox to false  */
		uncheck?(): Ext.field.ICheckbox;
	}
}
declare module Ext.form {
	export interface ICheckbox extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		checked?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String) */
		value?: string;
		/** [Method] Set the checked state of the checkbox to true  */
		check?(): Ext.field.ICheckbox;
		/** [Method] Method called when this Ext field Checkbox has been checked  */
		doChecked?(): void;
		/** [Method] Method called when this Ext field Checkbox has been unchecked  */
		doUnChecked?(): void;
		/** [Method] Returns the field checked value  */
		getChecked?(): any;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns an array of values from the checkboxes in the group that are checked  */
		getGroupValues?(): any[];
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): bool;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): string;
		/** [Method] Returns the checked state of the checkbox  */
		isChecked?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Resets the status of all matched checkboxes in the same group to checked  */
		resetGroupValues?(): Ext.field.ICheckbox;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the status of all matched checkboxes in the same group to checked  
		* @param values any[] An array of values. 
		*/
		setGroupValues?( values?:any[] ): Ext.field.ICheckbox;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value string 
		*/
		setValue?( value?:string ): void;
		/** [Method] Set the checked state of the checkbox to false  */
		uncheck?(): Ext.field.ICheckbox;
	}
}
declare module Ext.field {
	export interface IDatePicker extends Ext.field.IText {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Boolean) */
		destroyPickerOnHide?: bool;
		/** [Config Option] (Object/Ext.picker.Date) */
		picker?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Method] Returns the value of dateFormat  */
		getDateFormat?(): string;
		/** [Method]  */
		getDatePicker?(): void;
		/** [Method] Returns the value of destroyPickerOnHide  */
		getDestroyPickerOnHide?(): bool;
		/** [Method] Returns the value of the field formatted using the specified format  
		* @param format string The format to be returned. 
		*/
		getFormattedValue?( format?:string ): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the Date value of this field  */
		getValue?(): any;
		/** [Method] Override this or change event will be fired twice  */
		onChange?(): void;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of dateFormat  
		* @param dateFormat string 
		*/
		setDateFormat?( dateFormat?:string ): void;
		/** [Method] Sets the value of destroyPickerOnHide  
		* @param destroyPickerOnHide bool 
		*/
		setDestroyPickerOnHide?( destroyPickerOnHide?:bool ): void;
		/** [Method] Sets the value of picker  
		* @param picker any 
		*/
		setPicker?( picker?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): void;
	}
}
declare module Ext.form {
	export interface IDatePicker extends Ext.field.IText {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Boolean) */
		destroyPickerOnHide?: bool;
		/** [Config Option] (Object/Ext.picker.Date) */
		picker?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Method] Returns the value of dateFormat  */
		getDateFormat?(): string;
		/** [Method]  */
		getDatePicker?(): void;
		/** [Method] Returns the value of destroyPickerOnHide  */
		getDestroyPickerOnHide?(): bool;
		/** [Method] Returns the value of the field formatted using the specified format  
		* @param format string The format to be returned. 
		*/
		getFormattedValue?( format?:string ): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the Date value of this field  */
		getValue?(): any;
		/** [Method] Override this or change event will be fired twice  */
		onChange?(): void;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of dateFormat  
		* @param dateFormat string 
		*/
		setDateFormat?( dateFormat?:string ): void;
		/** [Method] Sets the value of destroyPickerOnHide  
		* @param destroyPickerOnHide bool 
		*/
		setDestroyPickerOnHide?( destroyPickerOnHide?:bool ): void;
		/** [Method] Sets the value of picker  
		* @param picker any 
		*/
		setPicker?( picker?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): void;
	}
}
declare module Ext.field {
	export interface IEmail extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.form {
	export interface IEmail extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.field {
	export interface IField extends Ext.IDecorator {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		clearIcon?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldLabel?: string;
		/** [Config Option] (String) */
		inputCls?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
		/** [Config Option] (Boolean) */
		labelWrap?: bool;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		required?: bool;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		useClearIcon?: string;
		/** [Config Option] (Mixed) */
		value?: any;
		/** [Property] (Boolean) */
		isField?: bool;
		/** [Property] (Ext.Element) */
		labelEl?: Ext.IElement;
		/** [Property] (Mixed) */
		originalValue?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of clearIcon  */
		getClearIcon?(): bool;
		/** [Method] Returns the value of inputCls  */
		getInputCls?(): string;
		/** [Method] Returns the value of inputType  */
		getInputType?(): string;
		/** [Method] Returns the value of label  */
		getLabel?(): string;
		/** [Method] Returns the value of labelAlign  */
		getLabelAlign?(): string;
		/** [Method] Returns the value of labelCls  */
		getLabelCls?(): string;
		/** [Method] Returns the value of labelWidth  */
		getLabelWidth?(): number;
		/** [Method] Returns the value of labelWidth  */
		getLabelWidth?(): string;
		/** [Method] Returns the value of labelWrap  */
		getLabelWrap?(): bool;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of required  */
		getRequired?(): bool;
		/** [Method] Returns the value of requiredCls  */
		getRequiredCls?(): string;
		/** [Method] Returns the value of tabIndex  */
		getTabIndex?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue  */
		isDirty?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of clearIcon  
		* @param clearIcon bool 
		*/
		setClearIcon?( clearIcon?:bool ): void;
		/** [Method] Sets the value of inputCls  
		* @param inputCls string 
		*/
		setInputCls?( inputCls?:string ): void;
		/** [Method] Sets the value of inputType  
		* @param inputType string 
		*/
		setInputType?( inputType?:string ): void;
		/** [Method] Sets the value of label  
		* @param label string 
		*/
		setLabel?( label?:string ): void;
		/** [Method] Sets the value of labelAlign  
		* @param labelAlign string 
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of labelCls  
		* @param labelCls string 
		*/
		setLabelCls?( labelCls?:string ): void;
		/** [Method] Sets the value of labelWidth  
		* @param labelWidth any 
		*/
		setLabelWidth?( labelWidth?:any ): any;
		setLabelWidth?( labelWidth?:number ): void;
		setLabelWidth?( labelWidth?:string ): void;
		/** [Method] Sets the value of labelWrap  
		* @param labelWrap bool 
		*/
		setLabelWrap?( labelWrap?:bool ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of required  
		* @param required bool 
		*/
		setRequired?( required?:bool ): void;
		/** [Method] Sets the value of requiredCls  
		* @param requiredCls string 
		*/
		setRequiredCls?( requiredCls?:string ): void;
		/** [Method] Sets the value of tabIndex  
		* @param tabIndex number 
		*/
		setTabIndex?( tabIndex?:number ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): void;
	}
}
declare module Ext.form {
	export interface IField extends Ext.IDecorator {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		clearIcon?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldLabel?: string;
		/** [Config Option] (String) */
		inputCls?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
		/** [Config Option] (Boolean) */
		labelWrap?: bool;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		required?: bool;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		useClearIcon?: string;
		/** [Config Option] (Mixed) */
		value?: any;
		/** [Property] (Boolean) */
		isField?: bool;
		/** [Property] (Ext.Element) */
		labelEl?: Ext.IElement;
		/** [Property] (Mixed) */
		originalValue?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of clearIcon  */
		getClearIcon?(): bool;
		/** [Method] Returns the value of inputCls  */
		getInputCls?(): string;
		/** [Method] Returns the value of inputType  */
		getInputType?(): string;
		/** [Method] Returns the value of label  */
		getLabel?(): string;
		/** [Method] Returns the value of labelAlign  */
		getLabelAlign?(): string;
		/** [Method] Returns the value of labelCls  */
		getLabelCls?(): string;
		/** [Method] Returns the value of labelWidth  */
		getLabelWidth?(): number;
		/** [Method] Returns the value of labelWidth  */
		getLabelWidth?(): string;
		/** [Method] Returns the value of labelWrap  */
		getLabelWrap?(): bool;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of required  */
		getRequired?(): bool;
		/** [Method] Returns the value of requiredCls  */
		getRequiredCls?(): string;
		/** [Method] Returns the value of tabIndex  */
		getTabIndex?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue  */
		isDirty?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of clearIcon  
		* @param clearIcon bool 
		*/
		setClearIcon?( clearIcon?:bool ): void;
		/** [Method] Sets the value of inputCls  
		* @param inputCls string 
		*/
		setInputCls?( inputCls?:string ): void;
		/** [Method] Sets the value of inputType  
		* @param inputType string 
		*/
		setInputType?( inputType?:string ): void;
		/** [Method] Sets the value of label  
		* @param label string 
		*/
		setLabel?( label?:string ): void;
		/** [Method] Sets the value of labelAlign  
		* @param labelAlign string 
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of labelCls  
		* @param labelCls string 
		*/
		setLabelCls?( labelCls?:string ): void;
		/** [Method] Sets the value of labelWidth  
		* @param labelWidth any 
		*/
		setLabelWidth?( labelWidth?:any ): any;
		setLabelWidth?( labelWidth?:number ): void;
		setLabelWidth?( labelWidth?:string ): void;
		/** [Method] Sets the value of labelWrap  
		* @param labelWrap bool 
		*/
		setLabelWrap?( labelWrap?:bool ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of required  
		* @param required bool 
		*/
		setRequired?( required?:bool ): void;
		/** [Method] Sets the value of requiredCls  
		* @param requiredCls string 
		*/
		setRequiredCls?( requiredCls?:string ): void;
		/** [Method] Sets the value of tabIndex  
		* @param tabIndex number 
		*/
		setTabIndex?( tabIndex?:number ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): void;
	}
}
declare module Ext.field {
	export interface IFile extends Ext.field.IInput {
		/** [Config Option] (String) */
		type?: string;
		/** [Method] Returns the value of type  */
		getType?(): string;
		/** [Method] Sets the value of type  
		* @param type string 
		*/
		setType?( type?:string ): void;
	}
}
declare module Ext.field {
	export interface IHidden extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.form {
	export interface IHidden extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.field {
	export interface IInput extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Boolean) */
		autoComplete?: bool;
		/** [Config Option] (Boolean) */
		autoCorrect?: bool;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		checked?: bool;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		disabled?: bool;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (Number) */
		maxRows?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		pattern?: string;
		/** [Config Option] (String) */
		placeHolder?: string;
		/** [Config Option] (Boolean) */
		readOnly?: bool;
		/** [Config Option] (Mixed) */
		startValue?: any;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		type?: string;
		/** [Config Option] (Mixed) */
		value?: any;
		/** [Property] (Boolean) */
		isFocused?: bool;
		/** [Method] Attempts to forcefully blur input focus for the field  */
		blur?(): Ext.field.IInput;
		/** [Method] Attempts to set the field as the active input focus  */
		focus?(): Ext.field.IInput;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of autoComplete  */
		getAutoComplete?(): bool;
		/** [Method] Returns the value of autoCorrect  */
		getAutoCorrect?(): bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the checked value of this field */
		getChecked?(): any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of disabled  */
		getDisabled?(): bool;
		/** [Method] Returns the value of focusCls  */
		getFocusCls?(): string;
		/** [Method] Returns the value of maxLength  */
		getMaxLength?(): number;
		/** [Method] Returns the value of maxRows  */
		getMaxRows?(): number;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of pattern  */
		getPattern?(): string;
		/** [Method] Returns the value of placeHolder  */
		getPlaceHolder?(): string;
		/** [Method] Returns the value of readOnly  */
		getReadOnly?(): bool;
		/** [Method] Returns the value of startValue  */
		getStartValue?(): any;
		/** [Method] Returns the value of stepValue  */
		getStepValue?(): number;
		/** [Method] Returns the value of tabIndex  */
		getTabIndex?(): number;
		/** [Method] Returns the value of type  */
		getType?(): string;
		/** [Method] Returns the field data value  */
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its original value  */
		isDirty?(): bool;
		/** [Method] Resets the current field value to the original value  */
		reset?(): void;
		/** [Method] Attempts to forcefully select all the contents of the input field  */
		select?(): Ext.field.IInput;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of autoComplete  
		* @param autoComplete bool 
		*/
		setAutoComplete?( autoComplete?:bool ): void;
		/** [Method] Sets the value of autoCorrect  
		* @param autoCorrect bool 
		*/
		setAutoCorrect?( autoCorrect?:bool ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of disabled  
		* @param disabled bool 
		*/
		setDisabled?( disabled?:bool ): void;
		/** [Method] Sets the value of focusCls  
		* @param focusCls string 
		*/
		setFocusCls?( focusCls?:string ): void;
		/** [Method] Sets the value of maxLength  
		* @param maxLength number 
		*/
		setMaxLength?( maxLength?:number ): void;
		/** [Method] Sets the value of maxRows  
		* @param maxRows number 
		*/
		setMaxRows?( maxRows?:number ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of pattern  
		* @param pattern string 
		*/
		setPattern?( pattern?:string ): void;
		/** [Method] Sets the value of placeHolder  
		* @param placeHolder string 
		*/
		setPlaceHolder?( placeHolder?:string ): void;
		/** [Method] Sets the value of readOnly  
		* @param readOnly bool 
		*/
		setReadOnly?( readOnly?:bool ): void;
		/** [Method] Sets the value of startValue  
		* @param startValue any 
		*/
		setStartValue?( startValue?:any ): void;
		/** [Method] Sets the value of stepValue  
		* @param stepValue number 
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Sets the value of tabIndex  
		* @param tabIndex number 
		*/
		setTabIndex?( tabIndex?:number ): void;
		/** [Method] Sets the value of type  
		* @param type string 
		*/
		setType?( type?:string ): void;
		/** [Method] Updates the cls configuration  
		* @param newCls any 
		* @param oldCls any 
		*/
		updateCls?( newCls?:any, oldCls?:any ): void;
		/** [Method] Updates the useMask configuration 
		* @param newUseMask any 
		*/
		updateUseMask?( newUseMask?:any ): void;
	}
}
declare module Ext.field {
	export interface INumber extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue  */
		getStepValue?(): number;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue  
		* @param stepValue number 
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.form {
	export interface INumber extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue  */
		getStepValue?(): number;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue  
		* @param stepValue number 
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.field {
	export interface IPassword extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.form {
	export interface IPassword extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.field {
	export interface IRadio extends Ext.field.ICheckbox {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the selected value if this radio is part of a group other radio fields with the same name in the same FormP  */
		getGroupValue?(): string;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): bool;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): string;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the matched radio field s status that has the same value as the given string to checked  
		* @param value string The value of the radio field to check. 
		*/
		setGroupValue?( value?:string ): Ext.field.IRadio;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): Ext.field.IRadio;
	}
}
declare module Ext.form {
	export interface IRadio extends Ext.field.ICheckbox {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the selected value if this radio is part of a group other radio fields with the same name in the same FormP  */
		getGroupValue?(): string;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): bool;
		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  */
		getSubmitValue?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): string;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Set the matched radio field s status that has the same value as the given string to checked  
		* @param value string The value of the radio field to check. 
		*/
		setGroupValue?( value?:string ): Ext.field.IRadio;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): Ext.field.IRadio;
	}
}
declare module Ext.field {
	export interface ISearch extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.form {
	export interface ISearch extends Ext.field.IText {
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.field {
	export interface ISelect extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoSelect?: bool;
		/** [Config Option] (Object) */
		defaultPhonePickerConfig?: any;
		/** [Config Option] (Object) */
		defaultTabletPickerConfig?: any;
		/** [Config Option] (String/Number) */
		displayField?: any;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Array) */
		options?: any[];
		/** [Config Option] (Ext.data.Store/Object/String) */
		store?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String/Boolean) */
		usePicker?: any;
		/** [Config Option] (String/Number) */
		valueField?: any;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of autoSelect  */
		getAutoSelect?(): bool;
		/** [Method] Returns the value of defaultPhonePickerConfig  */
		getDefaultPhonePickerConfig?(): any;
		/** [Method] Returns the value of defaultTabletPickerConfig  */
		getDefaultTabletPickerConfig?(): any;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): string;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): number;
		/** [Method] Returns the value of hiddenName  */
		getHiddenName?(): string;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of options  */
		getOptions?(): any[];
		/** [Method] Returns the current selected record instance selected in this field  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of store  */
		getStore?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of usePicker  */
		getUsePicker?(): string;
		/** [Method] Returns the value of usePicker  */
		getUsePicker?(): bool;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Returns the value of valueField  */
		getValueField?(): string;
		/** [Method] Returns the value of valueField  */
		getValueField?(): number;
		/** [Method] Called when the internal store s data has changed  
		* @param store any 
		*/
		onStoreDataChanged?( store?:any ): void;
		/** [Method] Resets the Select field to the value of the first record in the store  */
		reset?(): Ext.field.ISelect;
		/** [Method] Sets the value of autoSelect  
		* @param autoSelect bool 
		*/
		setAutoSelect?( autoSelect?:bool ): void;
		/** [Method] Sets the value of defaultPhonePickerConfig  
		* @param defaultPhonePickerConfig any 
		*/
		setDefaultPhonePickerConfig?( defaultPhonePickerConfig?:any ): void;
		/** [Method] Sets the value of defaultTabletPickerConfig  
		* @param defaultTabletPickerConfig any 
		*/
		setDefaultTabletPickerConfig?( defaultTabletPickerConfig?:any ): void;
		/** [Method] Sets the value of displayField  
		* @param displayField any 
		*/
		setDisplayField?( displayField?:any ): any;
		setDisplayField?( displayField?:string ): void;
		setDisplayField?( displayField?:number ): void;
		/** [Method] Sets the value of hiddenName  
		* @param hiddenName string 
		*/
		setHiddenName?( hiddenName?:string ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of options  
		* @param options any[] 
		*/
		setOptions?( options?:any[] ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of usePicker  
		* @param usePicker any 
		*/
		setUsePicker?( usePicker?:any ): any;
		setUsePicker?( usePicker?:string ): void;
		setUsePicker?( usePicker?:bool ): void;
		/** [Method] Sets the value of valueField  
		* @param valueField any 
		*/
		setValueField?( valueField?:any ): any;
		setValueField?( valueField?:string ): void;
		setValueField?( valueField?:number ): void;
		/** [Method] Shows the picker for the select field whether that is a Ext picker Picker or a simple list  */
		showPicker?(): void;
		/** [Method] Updates the underlying lt options gt list with new values  
		* @param newOptions any[] An array of options configurations to insert or append. selectBox.setOptions([  {text: 'First Option', value: 'first'},  {text: 'Second Option', value: 'second'},  {text: 'Third Option', value: 'third'} ]).setValue('third');  Note: option object member names should correspond with defined valueField and displayField values. 
		*/
		updateOptions?( newOptions?:any[] ): Ext.field.ISelect;
	}
}
declare module Ext.form {
	export interface ISelect extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoSelect?: bool;
		/** [Config Option] (Object) */
		defaultPhonePickerConfig?: any;
		/** [Config Option] (Object) */
		defaultTabletPickerConfig?: any;
		/** [Config Option] (String/Number) */
		displayField?: any;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Array) */
		options?: any[];
		/** [Config Option] (Ext.data.Store/Object/String) */
		store?: any;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (String/Boolean) */
		usePicker?: any;
		/** [Config Option] (String/Number) */
		valueField?: any;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of autoSelect  */
		getAutoSelect?(): bool;
		/** [Method] Returns the value of defaultPhonePickerConfig  */
		getDefaultPhonePickerConfig?(): any;
		/** [Method] Returns the value of defaultTabletPickerConfig  */
		getDefaultTabletPickerConfig?(): any;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): string;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): number;
		/** [Method] Returns the value of hiddenName  */
		getHiddenName?(): string;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of options  */
		getOptions?(): any[];
		/** [Method] Returns the current selected record instance selected in this field  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of store  */
		getStore?(): any;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of usePicker  */
		getUsePicker?(): string;
		/** [Method] Returns the value of usePicker  */
		getUsePicker?(): bool;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Returns the value of valueField  */
		getValueField?(): string;
		/** [Method] Returns the value of valueField  */
		getValueField?(): number;
		/** [Method] Called when the internal store s data has changed  
		* @param store any 
		*/
		onStoreDataChanged?( store?:any ): void;
		/** [Method] Resets the Select field to the value of the first record in the store  */
		reset?(): Ext.field.ISelect;
		/** [Method] Sets the value of autoSelect  
		* @param autoSelect bool 
		*/
		setAutoSelect?( autoSelect?:bool ): void;
		/** [Method] Sets the value of defaultPhonePickerConfig  
		* @param defaultPhonePickerConfig any 
		*/
		setDefaultPhonePickerConfig?( defaultPhonePickerConfig?:any ): void;
		/** [Method] Sets the value of defaultTabletPickerConfig  
		* @param defaultTabletPickerConfig any 
		*/
		setDefaultTabletPickerConfig?( defaultTabletPickerConfig?:any ): void;
		/** [Method] Sets the value of displayField  
		* @param displayField any 
		*/
		setDisplayField?( displayField?:any ): any;
		setDisplayField?( displayField?:string ): void;
		setDisplayField?( displayField?:number ): void;
		/** [Method] Sets the value of hiddenName  
		* @param hiddenName string 
		*/
		setHiddenName?( hiddenName?:string ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of options  
		* @param options any[] 
		*/
		setOptions?( options?:any[] ): void;
		/** [Method] Sets the value of store  
		* @param store any 
		*/
		setStore?( store?:any ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of usePicker  
		* @param usePicker any 
		*/
		setUsePicker?( usePicker?:any ): any;
		setUsePicker?( usePicker?:string ): void;
		setUsePicker?( usePicker?:bool ): void;
		/** [Method] Sets the value of valueField  
		* @param valueField any 
		*/
		setValueField?( valueField?:any ): any;
		setValueField?( valueField?:string ): void;
		setValueField?( valueField?:number ): void;
		/** [Method] Shows the picker for the select field whether that is a Ext picker Picker or a simple list  */
		showPicker?(): void;
		/** [Method] Updates the underlying lt options gt list with new values  
		* @param newOptions any[] An array of options configurations to insert or append. selectBox.setOptions([  {text: 'First Option', value: 'first'},  {text: 'Second Option', value: 'second'},  {text: 'Third Option', value: 'third'} ]).setValue('third');  Note: option object member names should correspond with defined valueField and displayField values. 
		*/
		updateOptions?( newOptions?:any[] ): Ext.field.ISelect;
	}
}
declare module Ext.field {
	export interface ISlider extends Ext.field.IField {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		readOnly?: bool;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Number/Number[]) */
		values?: any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of increment  */
		getIncrement?(): number;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of readOnly  */
		getReadOnly?(): bool;
		/** [Method] Returns the value of tabIndex  */
		getTabIndex?(): any;
		/** [Method] Returns the value of value  */
		getValue?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): number[];
		/** [Method] Convenience method  */
		getValues?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue  */
		isDirty?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of increment  
		* @param increment number 
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of readOnly  
		* @param readOnly bool 
		*/
		setReadOnly?( readOnly?:bool ): void;
		/** [Method] Sets the value of tabIndex  
		* @param tabIndex any 
		*/
		setTabIndex?( tabIndex?:any ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): any;
		setValue?( value?:number ): void;
		setValue?( value?:number[] ): void;
		/** [Method] Convenience method  
		* @param value any 
		*/
		setValues?( value?:any ): void;
	}
}
declare module Ext.form {
	export interface ISlider extends Ext.field.IField {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		readOnly?: bool;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Number/Number[]) */
		values?: any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of increment  */
		getIncrement?(): number;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of readOnly  */
		getReadOnly?(): bool;
		/** [Method] Returns the value of tabIndex  */
		getTabIndex?(): any;
		/** [Method] Returns the value of value  */
		getValue?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): number[];
		/** [Method] Convenience method  */
		getValues?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue  */
		isDirty?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of increment  
		* @param increment number 
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of readOnly  
		* @param readOnly bool 
		*/
		setReadOnly?( readOnly?:bool ): void;
		/** [Method] Sets the value of tabIndex  
		* @param tabIndex any 
		*/
		setTabIndex?( tabIndex?:any ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): any;
		setValue?( value?:number ): void;
		setValue?( value?:number[] ): void;
		/** [Method] Convenience method  
		* @param value any 
		*/
		setValues?( value?:any ): void;
	}
}
declare module Ext.field {
	export interface ISpinner extends Ext.field.INumber {
		/** [Config Option] (Boolean) */
		accelerateOnTapHold?: bool;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Boolean) */
		cycle?: bool;
		/** [Config Option] (Number) */
		defaultValue?: number;
		/** [Config Option] (Boolean) */
		groupButtons?: bool;
		/** [Config Option] (String) */
		increment?: string;
		/** [Config Option] (String) */
		incrementValue?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Method] Returns the value of accelerateOnTapHold  */
		getAccelerateOnTapHold?(): bool;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of cycle  */
		getCycle?(): bool;
		/** [Method] Returns the value of defaultValue  */
		getDefaultValue?(): number;
		/** [Method] Returns the value of groupButtons  */
		getGroupButtons?(): bool;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue  */
		getStepValue?(): number;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of accelerateOnTapHold  
		* @param accelerateOnTapHold bool 
		*/
		setAccelerateOnTapHold?( accelerateOnTapHold?:bool ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of cycle  
		* @param cycle bool 
		*/
		setCycle?( cycle?:bool ): void;
		/** [Method] Sets the value of defaultValue  
		* @param defaultValue number 
		*/
		setDefaultValue?( defaultValue?:number ): void;
		/** [Method] Sets the value of groupButtons  
		* @param groupButtons bool 
		*/
		setGroupButtons?( groupButtons?:bool ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue  
		* @param stepValue number 
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Updates the component configuration 
		* @param newComponent any 
		*/
		updateComponent?( newComponent?:any ): void;
	}
}
declare module Ext.form {
	export interface ISpinner extends Ext.field.INumber {
		/** [Config Option] (Boolean) */
		accelerateOnTapHold?: bool;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Boolean) */
		cycle?: bool;
		/** [Config Option] (Number) */
		defaultValue?: number;
		/** [Config Option] (Boolean) */
		groupButtons?: bool;
		/** [Config Option] (String) */
		increment?: string;
		/** [Config Option] (String) */
		incrementValue?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		stepValue?: number;
		/** [Method] Returns the value of accelerateOnTapHold  */
		getAccelerateOnTapHold?(): bool;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of cycle  */
		getCycle?(): bool;
		/** [Method] Returns the value of defaultValue  */
		getDefaultValue?(): number;
		/** [Method] Returns the value of groupButtons  */
		getGroupButtons?(): bool;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of stepValue  */
		getStepValue?(): number;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Sets the value of accelerateOnTapHold  
		* @param accelerateOnTapHold bool 
		*/
		setAccelerateOnTapHold?( accelerateOnTapHold?:bool ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of cycle  
		* @param cycle bool 
		*/
		setCycle?( cycle?:bool ): void;
		/** [Method] Sets the value of defaultValue  
		* @param defaultValue number 
		*/
		setDefaultValue?( defaultValue?:number ): void;
		/** [Method] Sets the value of groupButtons  
		* @param groupButtons bool 
		*/
		setGroupButtons?( groupButtons?:bool ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of stepValue  
		* @param stepValue number 
		*/
		setStepValue?( stepValue?:number ): void;
		/** [Method] Updates the component configuration 
		* @param newComponent any 
		*/
		updateComponent?( newComponent?:any ): void;
	}
}
declare module Ext.field {
	export interface IText extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Boolean) */
		autoComplete?: bool;
		/** [Config Option] (Boolean) */
		autoCorrect?: bool;
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Boolean) */
		clearIcon?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		placeHolder?: string;
		/** [Config Option] (Boolean) */
		readOnly?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Property] (String/Number) */
		startValue?: any;
		/** [Method] Attempts to forcefully blur input focus for the field  */
		blur?(): Ext.field.IText;
		/** [Method] Attempts to set the field as the active input focus  */
		focus?(): Ext.field.IText;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of autoComplete  */
		getAutoComplete?(): bool;
		/** [Method] Returns the value of autoCorrect  */
		getAutoCorrect?(): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): any[];
		/** [Method] Returns the value of clearIcon  */
		getClearIcon?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of maxLength  */
		getMaxLength?(): number;
		/** [Method] Returns the value of placeHolder  */
		getPlaceHolder?(): string;
		/** [Method] Returns the value of readOnly  */
		getReadOnly?(): bool;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue  */
		isDirty?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Attempts to forcefully select all the contents of the input field  */
		select?(): Ext.field.IText;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of autoComplete  
		* @param autoComplete bool 
		*/
		setAutoComplete?( autoComplete?:bool ): void;
		/** [Method] Sets the value of autoCorrect  
		* @param autoCorrect bool 
		*/
		setAutoCorrect?( autoCorrect?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any[] 
		*/
		setBubbleEvents?( bubbleEvents?:any[] ): void;
		/** [Method] Sets the value of clearIcon  
		* @param clearIcon bool 
		*/
		setClearIcon?( clearIcon?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxLength  
		* @param maxLength number 
		*/
		setMaxLength?( maxLength?:number ): void;
		/** [Method] Sets the value of placeHolder  
		* @param placeHolder string 
		*/
		setPlaceHolder?( placeHolder?:string ): void;
		/** [Method] Sets the value of readOnly  
		* @param readOnly bool 
		*/
		setReadOnly?( readOnly?:bool ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.form {
	export interface IText extends Ext.field.IField {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Boolean) */
		autoComplete?: bool;
		/** [Config Option] (Boolean) */
		autoCorrect?: bool;
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Boolean) */
		clearIcon?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		placeHolder?: string;
		/** [Config Option] (Boolean) */
		readOnly?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Property] (String/Number) */
		startValue?: any;
		/** [Method] Attempts to forcefully blur input focus for the field  */
		blur?(): Ext.field.IText;
		/** [Method] Attempts to set the field as the active input focus  */
		focus?(): Ext.field.IText;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of autoComplete  */
		getAutoComplete?(): bool;
		/** [Method] Returns the value of autoCorrect  */
		getAutoCorrect?(): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): any[];
		/** [Method] Returns the value of clearIcon  */
		getClearIcon?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of maxLength  */
		getMaxLength?(): number;
		/** [Method] Returns the value of placeHolder  */
		getPlaceHolder?(): string;
		/** [Method] Returns the value of readOnly  */
		getReadOnly?(): bool;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Returns true if the value of this Field has been changed from its originalValue  */
		isDirty?(): bool;
		/** [Method] Resets the current field value back to the original value on this field when it was created  */
		reset?(): Ext.field.IField;
		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;
		/** [Method] Attempts to forcefully select all the contents of the input field  */
		select?(): Ext.field.IText;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of autoComplete  
		* @param autoComplete bool 
		*/
		setAutoComplete?( autoComplete?:bool ): void;
		/** [Method] Sets the value of autoCorrect  
		* @param autoCorrect bool 
		*/
		setAutoCorrect?( autoCorrect?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any[] 
		*/
		setBubbleEvents?( bubbleEvents?:any[] ): void;
		/** [Method] Sets the value of clearIcon  
		* @param clearIcon bool 
		*/
		setClearIcon?( clearIcon?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxLength  
		* @param maxLength number 
		*/
		setMaxLength?( maxLength?:number ): void;
		/** [Method] Sets the value of placeHolder  
		* @param placeHolder string 
		*/
		setPlaceHolder?( placeHolder?:string ): void;
		/** [Method] Sets the value of readOnly  
		* @param readOnly bool 
		*/
		setReadOnly?( readOnly?:bool ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.field {
	export interface ITextArea extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxRows?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of maxRows  */
		getMaxRows?(): number;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxRows  
		* @param maxRows number 
		*/
		setMaxRows?( maxRows?:number ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.form {
	export interface ITextArea extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Config Option] (Number) */
		maxRows?: number;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Returns the value of maxRows  */
		getMaxRows?(): number;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
		/** [Method] Sets the value of maxRows  
		* @param maxRows number 
		*/
		setMaxRows?( maxRows?:number ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.field {
	export interface ITextAreaInput extends Ext.field.IInput {
	}
}
declare module Ext.field {
	export interface IToggle extends Ext.field.ISlider {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		maxValueCls?: string;
		/** [Config Option] (String) */
		minValueCls?: string;
		/** [Property] (String) */
		toggleOffLabel?: string;
		/** [Property] (String) */
		toggleOnLabel?: string;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of labelAlign  */
		getLabelAlign?(): string;
		/** [Method] Returns the value of maxValueCls  */
		getMaxValueCls?(): string;
		/** [Method] Returns the value of minValueCls  */
		getMinValueCls?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): number[];
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of labelAlign  
		* @param labelAlign string 
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of maxValueCls  
		* @param maxValueCls string 
		*/
		setMaxValueCls?( maxValueCls?:string ): void;
		/** [Method] Sets the value of minValueCls  
		* @param minValueCls string 
		*/
		setMinValueCls?( minValueCls?:string ): void;
		/** [Method] Sets the value of the toggle  
		* @param newValue number 1 for toggled, 0 for untoggled. 
		*/
		setValue?( newValue?:number ): any;
		/** [Method] Toggles the value of this toggle field  */
		toggle?(): any;
	}
}
declare module Ext.form {
	export interface IToggle extends Ext.field.ISlider {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String) */
		maxValueCls?: string;
		/** [Config Option] (String) */
		minValueCls?: string;
		/** [Property] (String) */
		toggleOffLabel?: string;
		/** [Property] (String) */
		toggleOnLabel?: string;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of labelAlign  */
		getLabelAlign?(): string;
		/** [Method] Returns the value of maxValueCls  */
		getMaxValueCls?(): string;
		/** [Method] Returns the value of minValueCls  */
		getMinValueCls?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): number[];
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of labelAlign  
		* @param labelAlign string 
		*/
		setLabelAlign?( labelAlign?:string ): void;
		/** [Method] Sets the value of maxValueCls  
		* @param maxValueCls string 
		*/
		setMaxValueCls?( maxValueCls?:string ): void;
		/** [Method] Sets the value of minValueCls  
		* @param minValueCls string 
		*/
		setMinValueCls?( minValueCls?:string ): void;
		/** [Method] Sets the value of the toggle  
		* @param newValue number 1 for toggled, 0 for untoggled. 
		*/
		setValue?( newValue?:number ): any;
		/** [Method] Toggles the value of this toggle field  */
		toggle?(): any;
	}
}
declare module Ext.field {
	export interface IUrl extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.form {
	export interface IUrl extends Ext.field.IText {
		/** [Config Option] (Boolean) */
		autoCapitalize?: bool;
		/** [Config Option] (Object) */
		component?: any;
		/** [Method] Returns the value of autoCapitalize  */
		getAutoCapitalize?(): bool;
		/** [Method] Returns the value of component  */
		getComponent?(): any;
		/** [Method] Sets the value of autoCapitalize  
		* @param autoCapitalize bool 
		*/
		setAutoCapitalize?( autoCapitalize?:bool ): void;
		/** [Method] Sets the value of component  
		* @param component any 
		*/
		setComponent?( component?:any ): void;
	}
}
declare module Ext.form {
	export interface IFieldSet extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		instructions?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] A convenient method to disable all fields in this FieldSet 
		* @param newDisabled any 
		*/
		doSetDisabled?( newDisabled?:any ): Ext.form.IFieldSet;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of instructions  
		* @param instructions string 
		*/
		setInstructions?( instructions?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
	}
}
declare module Ext.form {
	export interface IPanel extends Ext.IPanel {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: bool;
		/** [Config Option] (Object) */
		submitOnAction?: any;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: bool;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Ext.dom.Element) */
		waitMsgTarget?: Ext.dom.IElement;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		waitTpl?: any;
		/** [Method] A convenient method to disable all fields in this form  
		* @param newDisabled any 
		*/
		doSetDisabled?( newDisabled?:any ): Ext.form.IPanel;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of baseParams  */
		getBaseParams?(): any;
		/** [Method] Returns the value of method  */
		getMethod?(): string;
		/** [Method] Returns the value of record  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of scrollable  */
		getScrollable?(): any;
		/** [Method] Returns the value of standardSubmit  */
		getStandardSubmit?(): bool;
		/** [Method] Returns the value of submitOnAction  */
		getSubmitOnAction?(): any;
		/** [Method] Returns the value of trackResetOnLoad  */
		getTrackResetOnLoad?(): bool;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns an object containing the value of each field in the form keyed to the field s name  
		* @param enabled bool true to return only enabled fields. 
		* @param all bool true to return all fields even if they don't have a name configured. 
		*/
		getValues?( enabled?:bool, all?:bool ): any;
		/** [Method] Hides a previously shown wait mask See showMask */
		hideMask?(): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		load?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		loadModel?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Resets all fields in the form back to their original values  */
		reset?(): Ext.form.IPanel;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of baseParams  
		* @param baseParams any 
		*/
		setBaseParams?( baseParams?:any ): void;
		/** [Method] Sets the value of method  
		* @param method string 
		*/
		setMethod?( method?:string ): void;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		setRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Sets the value of standardSubmit  
		* @param standardSubmit bool 
		*/
		setStandardSubmit?( standardSubmit?:bool ): void;
		/** [Method] Sets the value of submitOnAction  
		* @param submitOnAction any 
		*/
		setSubmitOnAction?( submitOnAction?:any ): void;
		/** [Method] Sets the value of trackResetOnLoad  
		* @param trackResetOnLoad bool 
		*/
		setTrackResetOnLoad?( trackResetOnLoad?:bool ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the values of form fields in bulk  
		* @param values any field name => value mapping object. 
		*/
		setValues?( values?:any ): Ext.form.IPanel;
		/** [Method] Shows a generic custom mask over a designated Element  
		* @param cfg any Either a string message or a configuration object supporting the following options: {  message : 'Please Wait',  cls : 'form-mask' } 
		* @param target any 
		*/
		showMask?( cfg?:any, target?:any ): Ext.form.IPanel;
		/** [Method] Performs a Ajax based submission of form values if standardSubmit is false or otherwise executes a standard HTML Fo  
		* @param options any The configuration when submitting this form. 
		*/
		submit?( options?:any ): Ext.data.IConnection;
	}
}
declare module Ext.form {
	export interface IFormPanel extends Ext.IPanel {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Ext.data.Model) */
		record?: Ext.data.IModel;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: bool;
		/** [Config Option] (Object) */
		submitOnAction?: any;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: bool;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Ext.dom.Element) */
		waitMsgTarget?: Ext.dom.IElement;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		waitTpl?: any;
		/** [Method] A convenient method to disable all fields in this form  
		* @param newDisabled any 
		*/
		doSetDisabled?( newDisabled?:any ): Ext.form.IPanel;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of baseParams  */
		getBaseParams?(): any;
		/** [Method] Returns the value of method  */
		getMethod?(): string;
		/** [Method] Returns the value of record  */
		getRecord?(): Ext.data.IModel;
		/** [Method] Returns the value of scrollable  */
		getScrollable?(): any;
		/** [Method] Returns the value of standardSubmit  */
		getStandardSubmit?(): bool;
		/** [Method] Returns the value of submitOnAction  */
		getSubmitOnAction?(): any;
		/** [Method] Returns the value of trackResetOnLoad  */
		getTrackResetOnLoad?(): bool;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns an object containing the value of each field in the form keyed to the field s name  
		* @param enabled bool true to return only enabled fields. 
		* @param all bool true to return all fields even if they don't have a name configured. 
		*/
		getValues?( enabled?:bool, all?:bool ): any;
		/** [Method] Hides a previously shown wait mask See showMask */
		hideMask?(): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		load?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		loadModel?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Resets all fields in the form back to their original values  */
		reset?(): Ext.form.IPanel;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of baseParams  
		* @param baseParams any 
		*/
		setBaseParams?( baseParams?:any ): void;
		/** [Method] Sets the value of method  
		* @param method string 
		*/
		setMethod?( method?:string ): void;
		/** [Method] Loads matching fields from a model instance into this form  
		* @param record Ext.data.IModel The model instance. 
		*/
		setRecord?( record?:Ext.data.IModel ): Ext.form.IPanel;
		/** [Method] Sets the value of scrollable  
		* @param scrollable any 
		*/
		setScrollable?( scrollable?:any ): void;
		/** [Method] Sets the value of standardSubmit  
		* @param standardSubmit bool 
		*/
		setStandardSubmit?( standardSubmit?:bool ): void;
		/** [Method] Sets the value of submitOnAction  
		* @param submitOnAction any 
		*/
		setSubmitOnAction?( submitOnAction?:any ): void;
		/** [Method] Sets the value of trackResetOnLoad  
		* @param trackResetOnLoad bool 
		*/
		setTrackResetOnLoad?( trackResetOnLoad?:bool ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the values of form fields in bulk  
		* @param values any field name => value mapping object. 
		*/
		setValues?( values?:any ): Ext.form.IPanel;
		/** [Method] Shows a generic custom mask over a designated Element  
		* @param cfg any Either a string message or a configuration object supporting the following options: {  message : 'Please Wait',  cls : 'form-mask' } 
		* @param target any 
		*/
		showMask?( cfg?:any, target?:any ): Ext.form.IPanel;
		/** [Method] Performs a Ajax based submission of form values if standardSubmit is false or otherwise executes a standard HTML Fo  
		* @param options any The configuration when submitting this form. 
		*/
		submit?( options?:any ): Ext.data.IConnection;
	}
}
declare module Ext {
	export interface IFunction {
	}
	export class Function {
		/** [Method] Create an alias to the provided method property with name methodName of object  
		* @param object any 
		* @param methodName string 
		*/
		static alias( object?:any, methodName?:string ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn any The function to delegate. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static bind( fn?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:bool ): any;
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Create a clone of the provided method  
		* @param method any 
		*/
		static clone( method?:any ): any;
		/** [Method] Creates a delegate function optionally with a bound scope which when called buffers the execution of the passed fu  
		* @param fn any The function to invoke on a buffered timer. 
		* @param buffer number The number of milliseconds by which to buffer the invocation of the function. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller. 
		* @param args any[] Override arguments for the call. Defaults to the arguments passed by the caller. 
		*/
		static createBuffered( fn?:any, buffer?:number, scope?:any, args?:any[] ): any;
		/** [Method] Creates a delegate callback which when called executes after a specific delay  
		* @param fn any The function which will be called on a delay when the returned function is called. Optionally, a replacement (or additional) argument list may be specified. 
		* @param delay any The number of milliseconds to defer execution by whenever called. 
		* @param scope any The scope (this reference) used by the function at execution time. 
		* @param args any Override arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static createDelayed( fn?:any, delay?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:bool ): any;
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn any The function to delegate. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static createDelegate( fn?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static createDelegate( fn?:any, scope?:any, args?:any[], appendArgs?:bool ): any;
		static createDelegate( fn?:any, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Creates an interceptor function  
		* @param origFn any The original function. 
		* @param newFn any The function to call before the original. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window. 
		* @param returnValue any The value to return if the passed function return false. 
		*/
		static createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;
		/** [Method] Create a combined function call sequence of the original function  the passed function  
		* @param originalFn any The original function. 
		* @param newFn any The function to sequence. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window. 
		*/
		static createSequence( originalFn?:any, newFn?:any, scope?:any ): any;
		/** [Method] Creates a throttled version of the passed function which when called repeatedly and rapidly invokes the passed func  
		* @param fn any The function to execute at a regular time interval. 
		* @param interval number The interval, in milliseconds, on which the passed function is executed. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller. 
		*/
		static createThrottled( fn?:any, interval?:number, scope?:any ): any;
		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope  
		* @param fn any The function to defer. 
		* @param millis any The number of milliseconds for the setTimeout() call. If less than or equal to 0 the function is executed immediately. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs any if true, args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static defer( fn?:any, millis?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:bool ): number;
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:number ): number;
		/** [Method] A very commonly used method throughout the framework  
		* @param fn any 
		*/
		static flexSetter( fn?:any ): any;
		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args  
		* @param fn any The original function. 
		* @param args any[] The arguments to pass to new callback. 
		* @param scope any The scope (this reference) in which the function is executed. 
		*/
		static pass( fn?:any, args?:any[], scope?:any ): any;
	}
}
declare module Ext.util {
	export interface IFunctions {
	}
	export class Functions {
		/** [Method] Create an alias to the provided method property with name methodName of object  
		* @param object any 
		* @param methodName string 
		*/
		static alias( object?:any, methodName?:string ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn any The function to delegate. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static bind( fn?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:bool ): any;
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Create a clone of the provided method  
		* @param method any 
		*/
		static clone( method?:any ): any;
		/** [Method] Creates a delegate function optionally with a bound scope which when called buffers the execution of the passed fu  
		* @param fn any The function to invoke on a buffered timer. 
		* @param buffer number The number of milliseconds by which to buffer the invocation of the function. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller. 
		* @param args any[] Override arguments for the call. Defaults to the arguments passed by the caller. 
		*/
		static createBuffered( fn?:any, buffer?:number, scope?:any, args?:any[] ): any;
		/** [Method] Creates a delegate callback which when called executes after a specific delay  
		* @param fn any The function which will be called on a delay when the returned function is called. Optionally, a replacement (or additional) argument list may be specified. 
		* @param delay any The number of milliseconds to defer execution by whenever called. 
		* @param scope any The scope (this reference) used by the function at execution time. 
		* @param args any Override arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static createDelayed( fn?:any, delay?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:bool ): any;
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn any The function to delegate. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static createDelegate( fn?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static createDelegate( fn?:any, scope?:any, args?:any[], appendArgs?:bool ): any;
		static createDelegate( fn?:any, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Creates an interceptor function  
		* @param origFn any The original function. 
		* @param newFn any The function to call before the original. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window. 
		* @param returnValue any The value to return if the passed function return false. 
		*/
		static createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;
		/** [Method] Create a combined function call sequence of the original function  the passed function  
		* @param originalFn any The original function. 
		* @param newFn any The function to sequence. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window. 
		*/
		static createSequence( originalFn?:any, newFn?:any, scope?:any ): any;
		/** [Method] Creates a throttled version of the passed function which when called repeatedly and rapidly invokes the passed func  
		* @param fn any The function to execute at a regular time interval. 
		* @param interval number The interval, in milliseconds, on which the passed function is executed. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller. 
		*/
		static createThrottled( fn?:any, interval?:number, scope?:any ): any;
		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope  
		* @param fn any The function to defer. 
		* @param millis any The number of milliseconds for the setTimeout() call. If less than or equal to 0 the function is executed immediately. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs any if true, args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		static defer( fn?:any, millis?:any, scope?:any, args?:any, appendArgs?:any ): any;
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:bool ): number;
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:number ): number;
		/** [Method] A very commonly used method throughout the framework  
		* @param fn any 
		*/
		static flexSetter( fn?:any ): any;
		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args  
		* @param fn any The original function. 
		* @param args any[] The arguments to pass to new callback. 
		* @param scope any The scope (this reference) in which the function is executed. 
		*/
		static pass( fn?:any, args?:any[], scope?:any ): any;
	}
}
declare module Ext.fx.animation {
	export interface IAbstract extends Ext.IEvented {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		easing?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of after  */
		getAfter?(): any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of delay  */
		getDelay?(): number;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of easing  */
		getEasing?(): string;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of iteration  */
		getIteration?(): number;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of onBeforeEnd  */
		getOnBeforeEnd?(): any;
		/** [Method] Returns the value of onBeforeStart  */
		getOnBeforeStart?(): any;
		/** [Method] Returns the value of onEnd  */
		getOnEnd?(): any;
		/** [Method] Returns the value of preserveEndState  */
		getPreserveEndState?(): bool;
		/** [Method] Returns the value of replacePrevious  */
		getReplacePrevious?(): bool;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Sets the value of after  
		* @param after any 
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of delay  
		* @param delay number 
		*/
		setDelay?( delay?:number ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of easing  
		* @param easing string 
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of iteration  
		* @param iteration number 
		*/
		setIteration?( iteration?:number ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of onBeforeEnd  
		* @param onBeforeEnd any 
		*/
		setOnBeforeEnd?( onBeforeEnd?:any ): void;
		/** [Method] Sets the value of onBeforeStart  
		* @param onBeforeStart any 
		*/
		setOnBeforeStart?( onBeforeStart?:any ): void;
		/** [Method] Sets the value of onEnd  
		* @param onEnd any 
		*/
		setOnEnd?( onEnd?:any ): void;
		/** [Method] Sets the value of preserveEndState  
		* @param preserveEndState bool 
		*/
		setPreserveEndState?( preserveEndState?:bool ): void;
		/** [Method] Sets the value of replacePrevious  
		* @param replacePrevious bool 
		*/
		setReplacePrevious?( replacePrevious?:bool ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
	}
}
declare module Ext.fx.animation {
	export interface ICube extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		direction?: string;
		/** [Method] Returns the value of after  */
		getAfter?(): any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Sets the value of after  
		* @param after any 
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface IFade extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of after  */
		getAfter?(): any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Sets the value of after  
		* @param after any 
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare module Ext.fx.animation {
	export interface IFadeIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of after  */
		getAfter?(): any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Sets the value of after  
		* @param after any 
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare module Ext.fx.animation {
	export interface IFadeOut extends Ext.fx.animation.IFade {
		/** [Config Option] (Object) */
		before?: any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
	}
}
declare module Ext.fx.animation {
	export interface IFlip extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of easing  */
		getEasing?(): string;
		/** [Method] Returns the value of half  */
		getHalf?(): bool;
		/** [Method] Returns the value of out  */
		getOut?(): any;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing  
		* @param easing string 
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of half  
		* @param half bool 
		*/
		setHalf?( half?:bool ): void;
		/** [Method] Sets the value of out  
		* @param out any 
		*/
		setOut?( out?:any ): void;
	}
}
declare module Ext.fx {
	export interface IAnimation extends Ext.IBase {
	}
}
declare module Ext.fx.animation {
	export interface IPop extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of after  */
		getAfter?(): any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Sets the value of after  
		* @param after any 
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface IPopIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of after  */
		getAfter?(): any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Sets the value of after  
		* @param after any 
		*/
		setAfter?( after?:any ): void;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface IPopOut extends Ext.fx.animation.IPop {
		/** [Config Option] (Object) */
		before?: any;
		/** [Method] Returns the value of before  */
		getBefore?(): any;
		/** [Method] Sets the value of before  
		* @param before any 
		*/
		setBefore?( before?:any ): void;
	}
}
declare module Ext.fx.animation {
	export interface ISlide extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of easing  */
		getEasing?(): string;
		/** [Method] Returns the value of isElementBoxFit  */
		getIsElementBoxFit?(): bool;
		/** [Method] Returns the value of offset  */
		getOffset?(): number;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Returns the value of useCssTransform  */
		getUseCssTransform?(): bool;
		/** [Method] Sets the value of containerBox  
		* @param containerBox string 
		*/
		setContainerBox?( containerBox?:string ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing  
		* @param easing string 
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of elementBox  
		* @param elementBox string 
		*/
		setElementBox?( elementBox?:string ): void;
		/** [Method] Sets the value of isElementBoxFit  
		* @param isElementBoxFit bool 
		*/
		setIsElementBoxFit?( isElementBoxFit?:bool ): void;
		/** [Method] Sets the value of offset  
		* @param offset number 
		*/
		setOffset?( offset?:number ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
		/** [Method] Sets the value of useCssTransform  
		* @param useCssTransform bool 
		*/
		setUseCssTransform?( useCssTransform?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface ISlideIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of easing  */
		getEasing?(): string;
		/** [Method] Returns the value of isElementBoxFit  */
		getIsElementBoxFit?(): bool;
		/** [Method] Returns the value of offset  */
		getOffset?(): number;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Returns the value of useCssTransform  */
		getUseCssTransform?(): bool;
		/** [Method] Sets the value of containerBox  
		* @param containerBox string 
		*/
		setContainerBox?( containerBox?:string ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing  
		* @param easing string 
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of elementBox  
		* @param elementBox string 
		*/
		setElementBox?( elementBox?:string ): void;
		/** [Method] Sets the value of isElementBoxFit  
		* @param isElementBoxFit bool 
		*/
		setIsElementBoxFit?( isElementBoxFit?:bool ): void;
		/** [Method] Sets the value of offset  
		* @param offset number 
		*/
		setOffset?( offset?:number ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
		/** [Method] Sets the value of useCssTransform  
		* @param useCssTransform bool 
		*/
		setUseCssTransform?( useCssTransform?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface ISlideOut extends Ext.fx.animation.ISlide {
	}
}
declare module Ext.fx.animation {
	export interface IWipe extends Ext.fx.IAnimation {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of easing  */
		getEasing?(): string;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing  
		* @param easing string 
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface IWipeIn extends Ext.fx.IAnimation {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: bool;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of easing  */
		getEasing?(): string;
		/** [Method] Returns the value of out  */
		getOut?(): bool;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of easing  
		* @param easing string 
		*/
		setEasing?( easing?:string ): void;
		/** [Method] Sets the value of out  
		* @param out bool 
		*/
		setOut?( out?:bool ): void;
	}
}
declare module Ext.fx.animation {
	export interface IWipeOut extends Ext.fx.animation.IWipe {
	}
}
declare module Ext.fx.easing {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Returns the value of startTime  */
		getStartTime?(): number;
		/** [Method] Returns the value of startValue  */
		getStartValue?(): number;
		/** [Method] Sets the value of startTime  
		* @param startTime number 
		*/
		setStartTime?( startTime?:number ): void;
		/** [Method] Sets the value of startValue  
		* @param startValue number 
		*/
		setStartValue?( startValue?:number ): void;
	}
}
declare module Ext.fx.easing {
	export interface IBounce extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of acceleration  */
		getAcceleration?(): number;
		/** [Method] Returns the value of springTension  */
		getSpringTension?(): number;
		/** [Method] Returns the value of startVelocity  */
		getStartVelocity?(): number;
		/** [Method] Sets the value of acceleration  
		* @param acceleration number 
		*/
		setAcceleration?( acceleration?:number ): void;
		/** [Method] Sets the value of springTension  
		* @param springTension number 
		*/
		setSpringTension?( springTension?:number ): void;
		/** [Method] Sets the value of startVelocity  
		* @param startVelocity number 
		*/
		setStartVelocity?( startVelocity?:number ): void;
	}
}
declare module Ext.fx.easing {
	export interface IBoundMomentum extends Ext.fx.easing.IAbstract {
		/** [Config Option] (Object) */
		bounce?: any;
		/** [Config Option] (Number) */
		minVelocity?: number;
		/** [Config Option] (Object) */
		momentum?: any;
		/** [Config Option] (Number) */
		startVelocity?: number;
		/** [Method] Returns the value of bounce  */
		getBounce?(): any;
		/** [Method] Returns the value of maxMomentumValue  */
		getMaxMomentumValue?(): number;
		/** [Method] Returns the value of minMomentumValue  */
		getMinMomentumValue?(): number;
		/** [Method] Returns the value of minVelocity  */
		getMinVelocity?(): number;
		/** [Method] Returns the value of momentum  */
		getMomentum?(): any;
		/** [Method] Returns the value of startVelocity  */
		getStartVelocity?(): number;
		/** [Method] Sets the value of bounce  
		* @param bounce any 
		*/
		setBounce?( bounce?:any ): void;
		/** [Method] Sets the value of maxMomentumValue  
		* @param maxMomentumValue number 
		*/
		setMaxMomentumValue?( maxMomentumValue?:number ): void;
		/** [Method] Sets the value of minMomentumValue  
		* @param minMomentumValue number 
		*/
		setMinMomentumValue?( minMomentumValue?:number ): void;
		/** [Method] Sets the value of minVelocity  
		* @param minVelocity number 
		*/
		setMinVelocity?( minVelocity?:number ): void;
		/** [Method] Sets the value of momentum  
		* @param momentum any 
		*/
		setMomentum?( momentum?:any ): void;
		/** [Method] Sets the value of startVelocity  
		* @param startVelocity number 
		*/
		setStartVelocity?( startVelocity?:number ): void;
	}
}
declare module Ext.fx.easing {
	export interface IEaseIn extends Ext.fx.easing.ILinear {
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of exponent  */
		getExponent?(): number;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of exponent  
		* @param exponent number 
		*/
		setExponent?( exponent?:number ): void;
	}
}
declare module Ext.fx.easing {
	export interface IEaseOut extends Ext.fx.easing.ILinear {
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of exponent  */
		getExponent?(): number;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of exponent  
		* @param exponent number 
		*/
		setExponent?( exponent?:number ): void;
	}
}
declare module Ext.fx {
	export interface IEasing extends Ext.IBase {
	}
}
declare module Ext.fx.easing {
	export interface ILinear extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of endValue  */
		getEndValue?(): number;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of endValue  
		* @param endValue number 
		*/
		setEndValue?( endValue?:number ): void;
	}
}
declare module Ext.fx.easing {
	export interface IMomentum extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of acceleration  */
		getAcceleration?(): number;
		/** [Method] Returns the value of friction  */
		getFriction?(): number;
		/** [Method] Returns the value of startVelocity  */
		getStartVelocity?(): number;
		/** [Method] Sets the value of acceleration  
		* @param acceleration number 
		*/
		setAcceleration?( acceleration?:number ): void;
		/** [Method] Sets the value of friction  
		* @param friction number 
		*/
		setFriction?( friction?:number ): void;
		/** [Method] Sets the value of startVelocity  
		* @param startVelocity number 
		*/
		setStartVelocity?( startVelocity?:number ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IAbstract extends Ext.IEvented {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of duration  */
		getDuration?(): any;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of duration  
		* @param duration any 
		*/
		setDuration?( duration?:any ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface ICover extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface ICube extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IFade extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Returns the value of reverse  */
		getReverse?(): any;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
		/** [Method] Sets the value of reverse  
		* @param reverse any 
		*/
		setReverse?( reverse?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IFlip extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare module Ext.fx.layout {
	export interface ICard extends Ext.IBase {
	}
}
declare module Ext.fx.layout.card {
	export interface IPop extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IReveal extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IScroll extends Ext.fx.layout.card.IAbstract {
		/** [Method] Returns the value of duration  */
		getDuration?(): number;
		/** [Method] Sets the value of duration  
		* @param duration number 
		*/
		setDuration?( duration?:number ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IScrollCover extends Ext.fx.layout.card.IScroll {
	}
}
declare module Ext.fx.layout.card {
	export interface IScrollReveal extends Ext.fx.layout.card.IScroll {
	}
}
declare module Ext.fx.layout.card {
	export interface ISlide extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare module Ext.fx.layout.card {
	export interface IStyle extends Ext.fx.layout.card.IAbstract {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of inAnimation  */
		getInAnimation?(): any;
		/** [Method] Returns the value of outAnimation  */
		getOutAnimation?(): any;
		/** [Method] Sets the value of inAnimation  
		* @param inAnimation any 
		*/
		setInAnimation?( inAnimation?:any ): void;
		/** [Method] Sets the value of outAnimation  
		* @param outAnimation any 
		*/
		setOutAnimation?( outAnimation?:any ): void;
	}
}
declare module Ext.fx.runner {
	export interface ICss extends Ext.IEvented {
	}
}
declare module Ext.fx.runner {
	export interface ICssAnimation extends Ext.fx.runner.ICss {
	}
}
declare module Ext.fx.runner {
	export interface ICssTransition extends Ext.fx.runner.ICss {
	}
}
declare module Ext.fx {
	export interface IRunner extends Ext.IBase {
	}
}
declare module Ext.fx {
	export interface IState extends Ext.IBase {
	}
}
declare module Ext {
	export interface IImg extends Ext.IComponent {
		/** [Config Option] (String) */
		backgroundCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		imageCls?: string;
		/** [Config Option] (String) */
		mode?: string;
		/** [Config Option] (String) */
		src?: string;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of backgroundCls  */
		getBackgroundCls?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of imageCls  */
		getImageCls?(): string;
		/** [Method] Returns the value of mode  */
		getMode?(): string;
		/** [Method] Returns the value of src  */
		getSrc?(): string;
		/** [Method] Hides this Component */
		hide?(): Ext.IComponent;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of backgroundCls  
		* @param backgroundCls string 
		*/
		setBackgroundCls?( backgroundCls?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of imageCls  
		* @param imageCls string 
		*/
		setImageCls?( imageCls?:string ): void;
		/** [Method] Sets the value of mode  
		* @param mode string 
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets the value of src  
		* @param src string 
		*/
		setSrc?( src?:string ): void;
		/** [Method] Shows this component  */
		show?(): Ext.IComponent;
	}
}
declare module Ext {
	export interface IIs {
	}
}
declare module Ext {
	export interface IItemCollection extends Ext.util.IMixedCollection {
		/** [Method] MixedCollection has a generic way to fetch keys if you implement getKey  
		* @param item any 
		*/
		getKey?( item?:any ): any;
	}
}
declare module Ext {
		/** [Property] (Boolean) */
		export var SSL_SECURE_URL: bool;
		/** [Property] (Function) */
		export var emptyFn: any;
		/** [Property] (Boolean) */
		export var enableGarbageCollector: bool;
		/** [Property] (Boolean) */
		export var enableListenerCollection: bool;
		/** [Property] (String[]) */
		export var enumerables: string[];
		/** [Property] (Object) */
		export var frameStartTime: any;
		/** [Property] (Boolean) */
		export var isSecure: bool;
		/** [Property] (String) */
		export var version: string;
		/** [Method] Loads Ext app Application class and starts it up with given configuration after the page is ready  
		* @param config any An object with the following config options: 
		*/
		export function application( config?:any ): void;
		/** [Method] Copies all the properties of config to the specified object  
		* @param object any The receiver of the properties. 
		* @param config any The source of the properties. 
		* @param defaults any A different object that will also be applied for default values. 
		*/
		export function apply( object?:any, config?:any, defaults?:any ): any;
		/** [Method] Copies all the properties of config to object if they don t already exist  
		* @param object any The receiver of the properties. 
		* @param config any The source of the properties. 
		*/
		export function applyIf( object?:any, config?:any ): any;
		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn any The function to delegate. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs any if true args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		export function bind( fn?:any, scope?:any, args?:any, appendArgs?:any ): any;
		export function bind( fn?:any, scope?:any, args?:any[], appendArgs?:bool ): any;
		export function bind( fn?:any, scope?:any, args?:any[], appendArgs?:number ): any;
		/** [Method] Calls function after specified delay or right away when delay 0  
		* @param callback any The callback to execute. 
		* @param scope any The scope to execute in. 
		* @param args any[] The arguments to pass to the function. 
		* @param delay number Pass a number to delay the call by a number of milliseconds. 
		*/
		export function callback( callback?:any, scope?:any, args?:any[], delay?:number ): void;
		/** [Method] Old alias to Ext Array clean 
		* @param array any[] 
		*/
		export function clean( array?:any[] ): any[];
		/** [Method] Clone almost any type of variable including array object DOM nodes and Date without keeping the old reference  
		* @param item any The variable to clone. 
		*/
		export function clone( item?:any ): any;
		/** [Method] Copies a set of named properties from the source object to the destination object  
		* @param dest any The destination object. 
		* @param source any The source object. 
		* @param names any Either an Array of property names, or a comma-delimited list of property names to copy. 
		* @param usePrototypeKeys any Pass true to copy keys off of the prototype as well as the instance. 
		*/
		export function copyTo( dest?:any, source?:any, names?:any, usePrototypeKeys?:any ): any;
		export function copyTo( dest?:any, source?:any, names?:string, usePrototypeKeys?:bool ): any;
		export function copyTo( dest?:any, source?:any, names?:string[], usePrototypeKeys?:bool ): any;
		/** [Method] Instantiate a class by either full name alias or alternate name  
		* @param name string 
		* @param args any Additional arguments after the name will be passed to the class' constructor. 
		*/
		export function create( name?:string, args?:any ): any;
		/** [Method] Convenient shorthand see Ext ClassManager instantiateByAlias  
		* @param alias string 
		* @param args any Additional arguments after the alias will be passed to the class constructor. 
		*/
		export function createByAlias( alias?:string, args?:any ): any;
		/** [Method] Creates an interceptor function  
		* @param origFn any The original function. 
		* @param newFn any The function to call before the original. 
		* @param scope any The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window. 
		* @param returnValue any The value to return if the passed function return false. 
		*/
		export function createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;
		/** [Method] Old name for widget  */
		export function createWidget(): void;
		/** [Method] Shorthand for Ext JSON decode  
		* @param json string The JSON string. 
		* @param safe bool Whether to return null or throw an exception if the JSON is invalid. 
		*/
		export function decode( json?:string, safe?:bool ): any;
		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope  
		* @param fn any The function to defer. 
		* @param millis any The number of milliseconds for the setTimeout() call. If less than or equal to 0 the function is executed immediately. 
		* @param scope any The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args any Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs any if true, args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		*/
		export function defer( fn?:any, millis?:any, scope?:any, args?:any, appendArgs?:any ): any;
		export function defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:bool ): number;
		export function defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:number ): number;
		/** [Method] Defines a class or override  
		* @param className string The class name to create in string dot-namespaced format, for example: 'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager' It is highly recommended to follow this simple convention: - The root and the class name are 'CamelCased' - Everything else is lower-cased 
		* @param data any The key - value pairs of properties to apply to this class. Property names can be of any valid strings, except those in the reserved listed below:  mixins statics config alias self singleton alternateClassName override  
		* @param createdFn any Optional callback to execute after the class (or override) is created. The execution scope (this) will be the newly created class itself. 
		*/
		export function define( className?:string, data?:any, createdFn?:any ): Ext.IBase;
		/** [Method] Attempts to destroy any objects passed to it by removing all event listeners removing them from the DOM if applicab  
		* @param args any An Ext.Element, Ext.Component, or an Array of either of these to destroy. 
		*/
		export function destroy( args?:any ): void;
		/** [Method] Dispatches a request to a controller action  */
		export function dispatch(): void;
		/** [Method] Iterates an array or an iterable value and invoke the given callback function for each item  
		* @param iterable any The value to be iterated. If this argument is not iterable, the callback function is called once. 
		* @param fn any The callback function. If it returns false, the iteration stops and this method returns the current index. 
		* @param scope any The scope (this reference) in which the specified function is executed. 
		* @param reverse bool Reverse the iteration order (loop from the end to the beginning). 
		*/
		export function each( iterable?:any, fn?:any, scope?:any, reverse?:bool ): bool;
		/** [Method] Shorthand for Ext JSON encode  
		* @param o any The variable to encode. 
		*/
		export function encode( o?:any ): string;
		/** [Method] Convenient shortcut to Ext Loader exclude  
		* @param excludes any[] 
		*/
		export function exclude( excludes?:any[] ): any;
		/** [Method] This method deprecated  
		* @param superclass any 
		* @param overrides any 
		*/
		export function extend( superclass?:any, overrides?:any ): any;
		/** [Method] A global factory method to instantiate a class from a config object  
		* @param config any The config object to instantiate or update an instance with. 
		* @param classReference string The class to instantiate from. 
		* @param instance any The instance to update. 
		* @param aliasNamespace any 
		*/
		export function factory( config?:any, classReference?:string, instance?:any, aliasNamespace?:any ): void;
		/** [Method] Old alias to Ext Array flatten 
		* @param array any[] The array to flatten 
		*/
		export function flatten( array?:any[] ): any[];
		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element  
		* @param element any The DOM node or id. 
		* @param named any Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global"). 
		*/
		export function fly( element?:any, named?:any ): any;
		export function fly( element?:string, named?:string ): Ext.dom.IElement;
		export function fly( element?:HTMLElement, named?:string ): Ext.dom.IElement;
		/** [Method] Retrieves Ext dom Element objects  
		* @param element any The id of the node, a DOM Node or an existing Element. 
		*/
		export function get( element?:any ): any;
		export function get( element?:string ): Ext.dom.IElement;
		export function get( element?:HTMLElement ): Ext.dom.IElement;
		export function get( element?:Ext.IElement ): Ext.dom.IElement;
		/** [Method] Returns the current document body as an Ext Element  */
		export function getBody(): Ext.IElement;
		/** [Method] Convenient shorthand see Ext ClassManager getClass  */
		export function getClass(): void;
		/** [Method] Convenient shorthand for Ext ClassManager getName  
		* @param object any 
		*/
		export function getClassName( object?:any ): string;
		/** [Method] This is shorthand reference to Ext ComponentMgr get  
		* @param id string The component id 
		*/
		export function getCmp( id?:string ): Ext.IComponent;
		/** [Method] Returns the display name for object  
		* @param object any The object who's display name to determine. 
		*/
		export function getDisplayName( object?:any ): string;
		/** [Method] Returns the current HTML document object as an Ext Element  */
		export function getDoc(): Ext.IElement;
		/** [Method] Return the dom node for the passed String id  dom node or Ext Element  
		* @param el any 
		*/
		export function getDom( el?:any ): HTMLElement;
		/** [Method] Returns the current document head as an Ext Element  */
		export function getHead(): Ext.IElement;
		/** [Method] Returns the current orientation of the mobile device  */
		export function getOrientation(): void;
		/** [Method] Shortcut to Ext data StoreManager lookup  
		* @param store any The id of the Store, or a Store instance, or a store configuration. 
		*/
		export function getStore( store?:any ): Ext.data.IStore;
		/** [Method] Old alias to Ext String htmlDecode  
		* @param value string The string to decode. 
		*/
		export function htmlDecode( value?:string ): string;
		/** [Method] Old alias to Ext String htmlEncode  
		* @param value string The string to encode. 
		*/
		export function htmlEncode( value?:string ): string;
		/** [Method] Generates unique ids  
		* @param el any The element to generate an id for. 
		* @param prefix string The id prefix. 
		*/
		export function id( el?:any, prefix?:string ): string;
		/** [Method] Returns true if the passed value is a JavaScript Array false otherwise  
		* @param target any The target to test. 
		*/
		export function isArray( target?:any ): bool;
		/** [Method] Returns true if the passed value is a Boolean  
		* @param value any The value to test. 
		*/
		export function isBoolean( value?:any ): bool;
		/** [Method] Returns true if the passed value is a JavaScript Date object false otherwise  
		* @param object any The object to test. 
		*/
		export function isDate( object?:any ): bool;
		/** [Method] Returns true if the passed value is defined  
		* @param value any The value to test. 
		*/
		export function isDefined( value?:any ): bool;
		/** [Method] Returns true if the passed value is an HTMLElement  
		* @param value any The value to test. 
		*/
		export function isElement( value?:any ): bool;
		/** [Method] Returns true if the passed value is empty false otherwise  
		* @param value any The value to test. 
		* @param allowEmptyString bool true to allow empty strings. 
		*/
		export function isEmpty( value?:any, allowEmptyString?:bool ): bool;
		/** [Method] Returns true if the passed value is a JavaScript Function false otherwise  
		* @param value any The value to test. 
		*/
		export function isFunction( value?:any ): bool;
		/** [Method] Returns true if the passed value is iterable false otherwise  
		* @param value any The value to test. 
		*/
		export function isIterable( value?:any ): bool;
		/** [Method] Returns true if the passed value is a String that matches the MS Date JSON encoding format 
		* @param value any {String} The string to test 
		*/
		export function isMSDate( value?:any ): bool;
		/** [Method] Returns true if the passed value is a number  
		* @param value any The value to test. 
		*/
		export function isNumber( value?:any ): bool;
		/** [Method] Validates that a value is numeric  
		* @param value any Examples: 1, '1', '2.34' 
		*/
		export function isNumeric( value?:any ): bool;
		/** [Method] Returns true if the passed value is a JavaScript Object false otherwise  
		* @param value any The value to test. 
		*/
		export function isObject( value?:any ): bool;
		/** [Method] Returns true if the passed value is a JavaScript primitive  a string number or Boolean  
		* @param value any The value to test. 
		*/
		export function isPrimitive( value?:any ): bool;
		/** [Method] Returns true if the passed value is a string  
		* @param value any The value to test. 
		*/
		export function isString( value?:any ): bool;
		/** [Method] Returns true if the passed value is a TextNode  
		* @param value any The value to test. 
		*/
		export function isTextNode( value?:any ): bool;
		/** [Method] Iterates either an array or an object  
		* @param object any The object or array to be iterated. 
		* @param fn any The function to be called for each iteration. See and Ext.Array.each and Ext.Object.each for detailed lists of arguments passed to this function depending on the given object type that is being iterated. 
		* @param scope any The scope (this reference) in which the specified function is executed. Defaults to the object being iterated itself. 
		*/
		export function iterate( object?:any, fn?:any, scope?:any ): void;
		/** [Method] Old alias to Ext Array max 
		* @param array any The Array from which to select the maximum value. 
		* @param comparisonFn any a function to perform the comparison which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		*/
		export function max( array?:any, comparisonFn?:any ): any;
		export function max( array?:any[], comparisonFn?:any ): any;
		export function max( array?:NodeList, comparisonFn?:any ): any;
		/** [Method] Old alias to Ext Array mean 
		* @param array any[] The Array to calculate the mean value of. 
		*/
		export function mean( array?:any[] ): number;
		/** [Method] A convenient alias method for Ext Object merge  */
		export function merge(): void;
		/** [Method] Old alias to Ext Array min 
		* @param array any The Array from which to select the minimum value. 
		* @param comparisonFn any a function to perform the comparison which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		*/
		export function min( array?:any, comparisonFn?:any ): any;
		export function min( array?:any[], comparisonFn?:any ): any;
		export function min( array?:NodeList, comparisonFn?:any ): any;
		/** [Method] Creates namespaces to be used for scoping variables and classes so that they are not global  
		* @param namespace1 string 
		* @param namespace2 string 
		* @param etc string 
		*/
		export function namespace( namespace1?:string, namespace2?:string, etc?:string ): any;
		/** [Method] Convenient alias for Ext namespace  */
		export function ns(): void;
		/** [Method] This method is deprecated please use Ext Number from instead */
		export function num(): void;
		/** [Method] Adds a listener to be notified when the document is ready and all dependencies are loaded  
		* @param fn any The method the event invokes. 
		* @param scope any The scope in which the handler function executes. Defaults to the browser window. 
		* @param options bool Options object as passed to Ext.Element.addListener. It is recommended that the options {single: true} be used so that the handler is removed on first invocation. 
		*/
		export function onReady( fn?:any, scope?:any, options?:bool ): void;
		/** [Method] Proxy to Ext Base override  
		* @param cls any The class to override 
		* @param overrides any The properties to add to origClass. This should be specified as an object literal containing one or more properties. 
		*/
		export function override( cls?:any, overrides?:any ): void;
		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args  
		* @param fn any The original function. 
		* @param args any[] The arguments to pass to new callback. 
		* @param scope any The scope (this reference) in which the function is executed. 
		*/
		export function pass( fn?:any, args?:any[], scope?:any ): any;
		/** [Method] Old alias to Ext Array pluck 
		* @param array any The Array of items to pluck the value from. 
		* @param propertyName any The property name to pluck from each element. 
		*/
		export function pluck( array?:any, propertyName?:any ): any;
		export function pluck( array?:any[], propertyName?:string ): any[];
		export function pluck( array?:NodeList, propertyName?:string ): any[];
		/** [Method] Registers a new ptype  */
		export function preg(): void;
		/** [Method] Shorthand of Ext dom Query select 
		* @param selector any The selector/xpath query (can be a comma separated list of selectors) 
		* @param root any The start of the query (defaults to document). 
		*/
		export function query( selector?:any, root?:any ): any;
		export function query( selector?:string, root?:HTMLElement ): HTMLElement[];
		export function query( selector?:string, root?:string ): HTMLElement[];
		/** [Method] Dispatches a request to a controller action adding to the History stack and updating the page url as necessary  */
		export function redirect(): void;
		/** [Method] Registers a new xtype  */
		export function reg(): void;
		/** [Method] Creates a new Application class from the specified config object  */
		export function regApplication(): void;
		/** [Method] Creates a new Controller class from the specified config object  */
		export function regController(): void;
		/** [Method] Registers new layout type  */
		export function regLayout(): void;
		/** [Method] Old way for creating Model classes  
		* @param name string Name of the Model class. 
		* @param config any A configuration object for the Model you wish to create. 
		*/
		export function regModel( name?:string, config?:any ): Ext.data.IModel;
		/** [Method] Creates a new store for the given id and config then registers it with the Store Manager  
		* @param id string The id to set on the new store. 
		* @param config any The store config. 
		*/
		export function regStore( id?:string, config?:any ): void;
		/** [Method] Removes this element from the document removes all DOM event listeners and deletes the cache reference  
		* @param node HTMLElement The node to remove. 
		*/
		export function removeNode( node?:HTMLElement ): void;
		/** [Method] Repaints the whole page  */
		export function repaint(): void;
		/** [Method] Convenient alias of Ext Loader require  
		* @param expressions any Can either be a string or an array of string. 
		* @param fn any The callback function. 
		* @param scope any The execution scope (this) of the callback function. 
		* @param excludes any Classes to be excluded, useful when being used with expressions. 
		*/
		export function require( expressions?:any, fn?:any, scope?:any, excludes?:any ): any;
		export function require( expressions?:string, fn?:any, scope?:any, excludes?:string ): void;
		export function require( expressions?:any[], fn?:any, scope?:any, excludes?:string ): void;
		export function require( expressions?:string, fn?:any, scope?:any, excludes?:any[] ): void;
		export function require( expressions?:any[], fn?:any, scope?:any, excludes?:any[] ): void;
		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector any The CSS selector or an array of elements 
		* @param composite any Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		*/
		export function select( selector?:any, composite?:any ): any;
		export function select( selector?:string, composite?:bool ): Ext.dom.ICompositeElementLite;
		export function select( selector?:HTMLElement[], composite?:bool ): Ext.dom.ICompositeElementLite;
		/** [Method] Ext setup  is the entry point to initialize a Sencha Touch application  
		* @param config any An object with the following config options: 
		*/
		export function setup( config?:any ): void;
		/** [Method] Old alias to Ext Array sum 
		* @param array any[] The Array to calculate the sum value of. 
		*/
		export function sum( array?:any[] ): number;
		/** [Method] Synchronous version of require convenient alias of Ext Loader syncRequire  
		* @param expressions any Can either be a string or an array of string 
		* @param fn any The callback function 
		* @param scope any The execution scope (this) of the callback function 
		* @param excludes any Classes to be excluded, useful when being used with expressions 
		*/
		export function syncRequire( expressions?:any, fn?:any, scope?:any, excludes?:any ): any;
		export function syncRequire( expressions?:string, fn?:any, scope?:any, excludes?:string ): void;
		export function syncRequire( expressions?:any[], fn?:any, scope?:any, excludes?:string ): void;
		export function syncRequire( expressions?:string, fn?:any, scope?:any, excludes?:any[] ): void;
		export function syncRequire( expressions?:any[], fn?:any, scope?:any, excludes?:any[] ): void;
		/** [Method] Converts any iterable numeric indices and a length property into a true array  
		* @param iterable any the iterable object to be turned into a true Array. 
		* @param start number a zero-based index that specifies the start of extraction. 
		* @param end number a zero-based index that specifies the end of extraction. 
		*/
		export function toArray( iterable?:any, start?:number, end?:number ): any[];
		/** [Method] Old alias to typeOf  
		* @param value any 
		*/
		export function type( value?:any ): string;
		/** [Method] Returns the type of the given variable in string format  
		* @param value any 
		*/
		export function typeOf( value?:any ): string;
		/** [Method] Old alias to Ext Array unique 
		* @param array any[] 
		*/
		export function unique( array?:any[] ): any[];
		/** [Method] Old alias to Ext String urlAppend  
		* @param url string The URL to append to. 
		* @param string string The content to append to the URL. 
		*/
		export function urlAppend( url?:string, string?:string ): string;
		/** [Method] A convenient alias method for Ext Object fromQueryString  */
		export function urlDecode(): void;
		/** [Method] A convenient alias method for Ext Object toQueryString  */
		export function urlEncode(): void;
		/** [Method] Returns the given value itself if it s not empty as described in isEmpty returns the default value second argument  
		* @param value any The value to test. 
		* @param defaultValue any The value to return if the original value is empty. 
		* @param allowBlank bool true to allow zero length strings to qualify as non-empty. 
		*/
		export function valueFrom( value?:any, defaultValue?:any, allowBlank?:bool ): any;
		/** [Method] Convenient shorthand to create a widget by its xtype also see Ext ClassManager instantiateByAlias var button  Ext 
		* @param name string 
		*/
		export function widget( name?:string ): any;
}
declare module Ext {
	export interface IJSON {
	}
	export class JSON {
		/** [Method] Decodes parses a JSON string to an object  
		* @param json string The JSON string. 
		* @param safe bool Whether to return null or throw an exception if the JSON is invalid. 
		*/
		static decode( json?:string, safe?:bool ): any;
		/** [Method] Encodes an Object Array or other value  
		* @param o any The variable to encode. 
		*/
		static encode( o?:any ): string;
		/** [Method] Encodes a Date  
		* @param d any The Date to encode. 
		*/
		static encodeDate( d?:any ): string;
	}
}
declare module Ext {
	export interface ILabel extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		html?: string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare module Ext.layout {
	export interface IAbstract extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.layout {
	export interface IBox extends Ext.layout.IDefault {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		pack?: string;
		/** [Method] Returns the value of align  */
		getAlign?(): string;
		/** [Method] Returns the value of orient  */
		getOrient?(): string;
		/** [Method] Returns the value of pack  */
		getPack?(): string;
		/** [Method]  
		* @param item any 
		* @param isInner any 
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
		/** [Method] Sets the value of align  
		* @param align string 
		*/
		setAlign?( align?:string ): void;
		/** [Method] Sets the value of orient  
		* @param orient string 
		*/
		setOrient?( orient?:string ): void;
		/** [Method] Sets the value of pack  
		* @param pack string 
		*/
		setPack?( pack?:string ): void;
	}
}
declare module Ext.layout {
	export interface ICard extends Ext.layout.IDefault {
		/** [Method]  */
		destroy?(): void;
		/** [Method]  
		* @param item any 
		* @param isInner any 
		* @param destroying any 
		*/
		onItemInnerStateChange?( item?:any, isInner?:any, destroying?:any ): void;
	}
}
declare module Ext.layout {
	export interface IDefault extends Ext.layout.IAbstract {
		/** [Config Option] (Ext.fx.layout.Card) */
		animation?: Ext.fx.layout.ICard;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of animation  */
		getAnimation?(): Ext.fx.layout.ICard;
		/** [Method]  
		* @param item any 
		* @param isInner any 
		* @param destroying any 
		*/
		onItemInnerStateChange?( item?:any, isInner?:any, destroying?:any ): void;
		/** [Method] Sets the value of animation  
		* @param animation Ext.fx.layout.ICard 
		*/
		setAnimation?( animation?:Ext.fx.layout.ICard ): void;
	}
}
declare module Ext.layout {
	export interface IFit extends Ext.layout.IDefault {
		/** [Method]  
		* @param item any 
		* @param isInner any 
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
	}
}
declare module Ext.layout {
	export interface IFlexBox extends Ext.layout.IBox {
		/** [Config Option] (String) */
		align?: string;
		/** [Method] Returns the value of align  */
		getAlign?(): string;
		/** [Method]  
		* @param item any 
		* @param isInner any 
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
		/** [Method] Sets the value of align  
		* @param align string 
		*/
		setAlign?( align?:string ): void;
		/** [Method] Sets the flex of an item in this box layout  
		* @param item Ext.IComponent The item of this layout which you want to update the flex of. 
		* @param flex number The flex to set on this method 
		*/
		setItemFlex?( item?:Ext.IComponent, flex?:number ): void;
	}
}
declare module Ext.layout {
	export interface IFloat extends Ext.layout.IDefault {
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method]  
		* @param item any 
		* @param isInner any 
		*/
		onItemInnerStateChange?( item?:any, isInner?:any ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
	}
}
declare module Ext.layout {
	export interface IHBox extends Ext.layout.IFlexBox {
	}
}
declare module Ext.layout {
	export interface IVBox extends Ext.layout.IFlexBox {
		/** [Method] Returns the value of orient  */
		getOrient?(): string;
		/** [Method] Sets the value of orient  
		* @param orient string 
		*/
		setOrient?( orient?:string ): void;
	}
}
declare module Ext.layout.wrapper {
	export interface IBoxDock extends Ext.IBase {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of bodyElement  */
		getBodyElement?(): any;
		/** [Method] Returns the value of container  */
		getContainer?(): any;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of innerWrapper  */
		getInnerWrapper?(): any;
		/** [Method] Returns the value of sizeState  */
		getSizeState?(): bool;
		/** [Method] Sets the value of bodyElement  
		* @param bodyElement any 
		*/
		setBodyElement?( bodyElement?:any ): void;
		/** [Method] Sets the value of container  
		* @param container any 
		*/
		setContainer?( container?:any ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of innerWrapper  
		* @param innerWrapper any 
		*/
		setInnerWrapper?( innerWrapper?:any ): void;
		/** [Method] Sets the value of sizeState  
		* @param sizeState bool 
		*/
		setSizeState?( sizeState?:bool ): void;
	}
}
declare module Ext.layout.wrapper {
	export interface IDock extends Ext.IBase {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of bodyElement  */
		getBodyElement?(): any;
		/** [Method] Returns the value of container  */
		getContainer?(): any;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of innerWrapper  */
		getInnerWrapper?(): any;
		/** [Method] Returns the value of sizeState  */
		getSizeState?(): bool;
		/** [Method] Sets the value of bodyElement  
		* @param bodyElement any 
		*/
		setBodyElement?( bodyElement?:any ): void;
		/** [Method] Sets the value of container  
		* @param container any 
		*/
		setContainer?( container?:any ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of innerWrapper  
		* @param innerWrapper any 
		*/
		setInnerWrapper?( innerWrapper?:any ): void;
		/** [Method] Sets the value of sizeState  
		* @param sizeState bool 
		*/
		setSizeState?( sizeState?:bool ): void;
	}
}
declare module Ext.layout.wrapper {
	export interface IInner extends Ext.IBase {
		/** [Method] Returns the value of container  */
		getContainer?(): any;
		/** [Method] Returns the value of sizeState  */
		getSizeState?(): any;
		/** [Method] Sets the value of container  
		* @param container any 
		*/
		setContainer?( container?:any ): void;
		/** [Method] Sets the value of sizeState  
		* @param sizeState any 
		*/
		setSizeState?( sizeState?:any ): void;
	}
}
declare module Ext {
	export interface ILoader {
	}
	export class Loader {
		/** [Method] Sets a batch of path entries 
		* @param paths Object a set of className: path mappings 
		*/
		static addClassPathMappings( paths?:Object ): Ext.ILoader;
		/** [Method] Explicitly exclude files from being loaded  
		* @param excludes any[] 
		*/
		static exclude( excludes?:any[] ): any;
		/** [Method] Get the config value corresponding to the specified name  
		* @param name string The config property name. 
		*/
		static getConfig( name?:string ): any;
		/** [Method] Translates a className to a file path by adding the the proper prefix and converting the  s to  s  
		* @param className string 
		*/
		static getPath( className?:string ): string;
		/** [Method] Add a new listener to be executed when all required scripts are fully loaded  
		* @param fn any The function callback to be executed. 
		* @param scope any The execution scope (this) of the callback function. 
		* @param withDomReady bool Whether or not to wait for document DOM ready as well. 
		*/
		static onReady( fn?:any, scope?:any, withDomReady?:bool ): void;
		/** [Method] Loads all classes by the given names and all their direct dependencies optionally executes the given callback functi  
		* @param expressions any Can either be a string or an array of string. 
		* @param fn any The callback function. 
		* @param scope any The execution scope (this) of the callback function. 
		* @param excludes any Classes to be excluded, useful when being used with expressions. 
		*/
		static require( expressions?:any, fn?:any, scope?:any, excludes?:any ): any;
		static require( expressions?:string, fn?:any, scope?:any, excludes?:string ): void;
		static require( expressions?:any[], fn?:any, scope?:any, excludes?:string ): void;
		static require( expressions?:string, fn?:any, scope?:any, excludes?:any[] ): void;
		static require( expressions?:any[], fn?:any, scope?:any, excludes?:any[] ): void;
		/** [Method] Set the configuration for the loader  
		* @param name any The config object to override the default values or name of a single config setting when also passing the second parameter. 
		* @param value any The value for the config setting. 
		*/
		static setConfig( name?:any, value?:any ): Ext.ILoader;
		/** [Method] Sets the path of a namespace  
		* @param name any See flexSetter 
		* @param path string See flexSetter 
		*/
		static setPath( name?:any, path?:string ): Ext.ILoader;
		/** [Method] Synchronously loads all classes by the given names and all their direct dependencies optionally executes the given c  
		* @param expressions any Can either be a string or an array of string 
		* @param fn any The callback function 
		* @param scope any The execution scope (this) of the callback function 
		* @param excludes any Classes to be excluded, useful when being used with expressions 
		*/
		static syncRequire( expressions?:any, fn?:any, scope?:any, excludes?:any ): any;
		static syncRequire( expressions?:string, fn?:any, scope?:any, excludes?:string ): void;
		static syncRequire( expressions?:any[], fn?:any, scope?:any, excludes?:string ): void;
		static syncRequire( expressions?:string, fn?:any, scope?:any, excludes?:any[] ): void;
		static syncRequire( expressions?:any[], fn?:any, scope?:any, excludes?:any[] ): void;
	}
}
declare module Ext {
	export interface ILoadMask extends Ext.IMask {
		/** [Config Option] (Boolean) */
		indicator?: bool;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (String) */
		messageCls?: string;
		/** [Config Option] (String) */
		msg?: string;
		/** [Config Option] (String) */
		msgCls?: string;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Method] Changes the data store bound to this LoadMask  
		* @param store Ext.data.IStore The store to bind to this LoadMask 
		*/
		bindStore?( store?:Ext.data.IStore ): void;
		/** [Method] Returns the value of indicator  */
		getIndicator?(): bool;
		/** [Method] Returns the value of message  */
		getMessage?(): string;
		/** [Method] Returns the value of messageCls  */
		getMessageCls?(): string;
		/** [Method] Sets the value of indicator  
		* @param indicator bool 
		*/
		setIndicator?( indicator?:bool ): void;
		/** [Method] Sets the value of message  
		* @param message string 
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of messageCls  
		* @param messageCls string 
		*/
		setMessageCls?( messageCls?:string ): void;
	}
}
declare module Ext {
	export interface ILogger {
	}
	export class Logger {
		/** [Method] Convenience method for log with priority deprecate */
		static deprecate(): void;
		/** [Method] Convenience method for log with priority error */
		static error(): void;
		/** [Method] Convenience method for log with priority info */
		static info(): void;
		/** [Method] Logs a message to help with debugging  
		* @param message string Message to log. 
		* @param priority number Priority of the log message. 
		*/
		static log( message?:string, priority?:number ): Ext.ILogger;
		/** [Method] Convenience method for log with priority verbose */
		static verbose(): void;
		/** [Method] Convenience method for log with priority warn */
		static warn(): void;
	}
}
declare module Ext {
	export interface IMap extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Ext.util.Geolocation) */
		geo?: Ext.util.IGeolocation;
		/** [Config Option] (google.maps.Map) */
		map?: any;
		/** [Config Option] (Object) */
		mapOptions?: any;
		/** [Config Option] (Boolean) */
		maskMap?: bool;
		/** [Config Option] (String) */
		maskMapCls?: string;
		/** [Config Option] (Boolean/Ext.util.Geolocation) */
		useCurrentLocation?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of geo  */
		getGeo?(): Ext.util.IGeolocation;
		/** [Method] Returns the value of map  */
		getMap?(): any;
		/** [Method] Returns the state of the Map  */
		getState?(): any;
		/** [Method] Returns the value of useCurrentLocation  */
		getUseCurrentLocation?(): bool;
		/** [Method] Returns the value of useCurrentLocation  */
		getUseCurrentLocation?(): Ext.util.IGeolocation;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of geo  
		* @param geo Ext.util.IGeolocation 
		*/
		setGeo?( geo?:Ext.util.IGeolocation ): void;
		/** [Method] Sets the value of map  
		* @param map any 
		*/
		setMap?( map?:any ): void;
		/** [Method] Moves the map center to the designated coordinates hash of the form  latitude 37 381592 longitude  122 135672  
		* @param coordinates any Object representing the desired Latitude and longitude upon which to center the map. 
		*/
		setMapCenter?( coordinates?:any ): void;
		/** [Method] Sets the value of mapOptions  
		* @param mapOptions any 
		*/
		setMapOptions?( mapOptions?:any ): void;
		/** [Method] Sets the value of useCurrentLocation  
		* @param useCurrentLocation any 
		*/
		setUseCurrentLocation?( useCurrentLocation?:any ): any;
		setUseCurrentLocation?( useCurrentLocation?:bool ): void;
		setUseCurrentLocation?( useCurrentLocation?:Ext.util.IGeolocation ): void;
		/** [Method] Moves the map center to the designated coordinates hash of the form  latitude 37 381592 longitude  122 135672  
		* @param coordinates any Object representing the desired Latitude and longitude upon which to center the map. 
		*/
		update?( coordinates?:any ): void;
	}
}
declare module Ext {
	export interface IMask extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		transparent?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of transparent  */
		getTransparent?(): bool;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of transparent  
		* @param transparent bool 
		*/
		setTransparent?( transparent?:bool ): void;
	}
}
declare module Ext {
	export interface IMedia extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoPause?: bool;
		/** [Config Option] (Boolean) */
		autoResume?: bool;
		/** [Config Option] (Boolean) */
		enableControls?: bool;
		/** [Config Option] (Boolean) */
		loop?: bool;
		/** [Config Option] (Ext.Element) */
		media?: Ext.IElement;
		/** [Config Option] (Boolean) */
		muted?: bool;
		/** [Config Option] (Boolean) */
		preload?: bool;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Number) */
		volume?: number;
		/** [Method] Destroys this Component  */
		destroy?(): void;
		/** [Method] Returns the value of autoPause  */
		getAutoPause?(): bool;
		/** [Method] Returns the value of autoResume  */
		getAutoResume?(): bool;
		/** [Method] Returns the current time of the media in seconds  */
		getCurrentTime?(): number;
		/** [Method] Returns the duration of the media in seconds  */
		getDuration?(): number;
		/** [Method] Returns the value of enableControls  */
		getEnableControls?(): bool;
		/** [Method] Returns the value of loop  */
		getLoop?(): bool;
		/** [Method] Returns the value of media  */
		getMedia?(): Ext.IElement;
		/** [Method] Returns the value of muted  */
		getMuted?(): bool;
		/** [Method] Returns the value of preload  */
		getPreload?(): bool;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns the value of volume  */
		getVolume?(): number;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Returns if the media is currently playing  */
		isPlaying?(): bool;
		/** [Method] Pauses media playback  */
		pause?(): void;
		/** [Method] Starts or resumes media playback  */
		play?(): void;
		/** [Method] Sets the value of autoPause  
		* @param autoPause bool 
		*/
		setAutoPause?( autoPause?:bool ): void;
		/** [Method] Sets the value of autoResume  
		* @param autoResume bool 
		*/
		setAutoResume?( autoResume?:bool ): void;
		/** [Method] Sets the value of enableControls  
		* @param enableControls bool 
		*/
		setEnableControls?( enableControls?:bool ): void;
		/** [Method] Sets the value of loop  
		* @param loop bool 
		*/
		setLoop?( loop?:bool ): void;
		/** [Method] Sets the value of media  
		* @param media Ext.IElement 
		*/
		setMedia?( media?:Ext.IElement ): void;
		/** [Method] Sets the value of muted  
		* @param muted bool 
		*/
		setMuted?( muted?:bool ): void;
		/** [Method] Sets the value of preload  
		* @param preload bool 
		*/
		setPreload?( preload?:bool ): void;
		/** [Method] Sets the value of url  
		* @param url string 
		*/
		setUrl?( url?:string ): void;
		/** [Method] Sets the value of volume  
		* @param volume number 
		*/
		setVolume?( volume?:number ): void;
		/** [Method] Stops media playback and returns to the beginning  */
		stop?(): void;
		/** [Method] Toggles the media playback state  */
		toggle?(): void;
		/** [Method] Updates the controls of the video element  
		* @param enableControls any 
		*/
		updateEnableControls?( enableControls?:any ): void;
		/** [Method] Updates the loop setting of the media element  
		* @param loop any 
		*/
		updateLoop?( loop?:any ): void;
		/** [Method] Sets the URL of the media element  
		* @param newUrl any 
		*/
		updateUrl?( newUrl?:any ): void;
	}
}
declare module Ext {
	export interface IMessageBox extends Ext.ISheet {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Array/Object) */
		buttons?: any;
		/** [Config Option] (Number) */
		defaultTextHeight?: number;
		/** [Config Option] (Object) */
		hideAnimation?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (String) */
		msg?: string;
		/** [Config Option] (Object) */
		prompt?: any;
		/** [Config Option] (Object) */
		showAnimation?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt 
		* @param title string The title bar text. 
		* @param message string The message box body text. 
		* @param fn any A callback function which is called when the dialog is dismissed by clicking on the configured buttons. 
		* @param scope any The scope (this reference) in which the callback is executed. Defaults to: the browser window 
		*/
		alert?( title?:string, message?:string, fn?:any, scope?:any ): Ext.IMessageBox;
		/** [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm 
		* @param title string The title bar text. 
		* @param message string The message box body text. 
		* @param fn any A callback function which is called when the dialog is dismissed by clicking on the configured buttons. 
		* @param scope any The scope (this reference) in which the callback is executed. Defaults to: the browser window 
		*/
		confirm?( title?:string, message?:string, fn?:any, scope?:any ): Ext.IMessageBox;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of buttons  */
		getButtons?(): any;
		/** [Method] Returns the value of defaultTextHeight  */
		getDefaultTextHeight?(): number;
		/** [Method] Returns the value of hideAnimation  */
		getHideAnimation?(): any;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of prompt  */
		getPrompt?(): any;
		/** [Method] Returns the value of showAnimation  */
		getShowAnimation?(): any;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of zIndex  */
		getZIndex?(): number;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of buttons  
		* @param buttons any 
		*/
		setButtons?( buttons?:any ): void;
		/** [Method] Sets the value of defaultTextHeight  
		* @param defaultTextHeight number 
		*/
		setDefaultTextHeight?( defaultTextHeight?:number ): void;
		/** [Method] Sets the value of hideAnimation  
		* @param hideAnimation any 
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets icon  
		* @param iconCls string A CSS class name or empty string to clear the icon. 
		*/
		setIcon?( iconCls?:string ): Ext.IMessageBox;
		/** [Method] Sets the value of iconCls  
		* @param iconCls string 
		*/
		setIconCls?( iconCls?:string ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of message  
		* @param message string 
		*/
		setMessage?( message?:string ): void;
		/** [Method] Sets the value of prompt  
		* @param prompt any 
		*/
		setPrompt?( prompt?:any ): void;
		/** [Method] Sets the value of showAnimation  
		* @param showAnimation any 
		*/
		setShowAnimation?( showAnimation?:any ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of zIndex  
		* @param zIndex number 
		*/
		setZIndex?( zIndex?:number ): void;
		/** [Method] Displays the Ext MessageBox with a specified configuration  
		* @param config any An object with the following config options: 
		*/
		show?( config?:any ): Ext.IMessageBox;
		/** [Method] Sets the value of message  
		* @param message string 
		*/
		updateText?( message?:string ): Ext.IMessageBox;
	}
}
declare module Ext.mixin {
	export interface IBindable extends Ext.mixin.IMixin {
	}
}
declare module Ext.mixin {
	export interface IFilterable extends Ext.mixin.IMixin {
		/** [Config Option] (String) */
		filterRoot?: string;
		/** [Config Option] (Array) */
		filters?: any[];
		/** [Property] (Object) */
		currentSortFn?: any;
		/** [Property] (Boolean) */
		dirtyFilterFn?: bool;
		/** [Property] (Boolean) */
		filtered?: bool;
		/** [Method] This method adds a filter  
		* @param filter any Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		addFilter?( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array  
		* @param filters any[] An array with filters. A filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		addFilters?( filters?:any[] ): any;
		/** [Method] This method will sort an array based on the currently configured sorters  
		* @param data any[] The array you want to have sorted. 
		*/
		filter?( data?:any[] ): any[];
		/** [Method] Returns an up to date sort function  */
		getFilterFn?(): any;
		/** [Method] Returns the value of filterRoot  */
		getFilterRoot?(): string;
		/** [Method] Returns the value of filters  */
		getFilters?(): any[];
		/** [Method] This method adds a filter at a given index  
		* @param index number The index at which to insert the filter. 
		* @param filter any Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		insertFilter?( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index  
		* @param index number The index at which to insert the filters. 
		* @param filters any[] Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		insertFilters?( index?:number, filters?:any[] ): any[];
		/** [Method] This method removes all the filters in a passed array  
		* @param filters any[] Each value in the array can be a string (property name), function (sorterFn), an object containing a property and value keys or Sorter instance. 
		*/
		removeFilters?( filters?:any[] ): void;
		/** [Method] Sets the value of filterRoot  
		* @param filterRoot string 
		*/
		setFilterRoot?( filterRoot?:string ): void;
		/** [Method] Sets the value of filters  
		* @param filters any[] 
		*/
		setFilters?( filters?:any[] ): void;
	}
}
declare module Ext.mixin {
	export interface IIdentifiable extends Ext.IBase {
		/** [Method] Retrieves the id of this component  */
		getId?(): string;
	}
}
declare module Ext.mixin {
	export interface IMixin extends Ext.IBase {
	}
}
declare module Ext.mixin {
	export interface IObservable extends Ext.mixin.IMixin,Ext.mixin.IIdentifiable {
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Retrieves the id of this component  */
		getId?(): string;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.util {
	export interface IObservable extends Ext.mixin.IMixin,Ext.mixin.IIdentifiable {
		/** [Config Option] (String/String[]) */
		bubbleEvents?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Retrieves the id of this component  */
		getId?(): string;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.mixin {
	export interface ISelectable extends Ext.mixin.IMixin {
		/** [Config Option] (Boolean) */
		allowDeselect?: bool;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: bool;
		/** [Config Option] (Boolean) */
		disableSelection?: bool;
		/** [Config Option] (Boolean) */
		locked?: bool;
		/** [Config Option] (String) */
		mode?: string;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;
		/** [Method] Deselects the given record s 
		* @param records any The record(s) to deselect. Can also be a number to reference by index. 
		* @param suppressEvent any If true the deselect event will not be fired. 
		*/
		deselect?( records?:any, suppressEvent?:any ): any;
		deselect?( records?:number, suppressEvent?:bool ): void;
		deselect?( records?:any[], suppressEvent?:bool ): void;
		deselect?( records?:Ext.data.IModel, suppressEvent?:bool ): void;
		/** [Method] Deselects all records  
		* @param supress any 
		*/
		deselectAll?( supress?:any ): void;
		/** [Method] Deselects a record instance by record instance or index  
		* @param records any An array of records or an index. 
		* @param suppressEvent any Set to false to not fire a deselect event. 
		*/
		doDeselect?( records?:any, suppressEvent?:any ): any;
		doDeselect?( records?:Ext.data.IModel, suppressEvent?:bool ): void;
		doDeselect?( records?:number, suppressEvent?:bool ): void;
		/** [Method] Selects a record instance by record instance or index  
		* @param records any An array of records or an index. 
		* @param keepExisting any 
		* @param suppressEvent any Set to false to not fire a select event. 
		*/
		doSelect?( records?:any, keepExisting?:any, suppressEvent?:any ): any;
		doSelect?( records?:Ext.data.IModel, keepExisting?:bool, suppressEvent?:bool ): void;
		doSelect?( records?:number, keepExisting?:bool, suppressEvent?:bool ): void;
		/** [Method] Returns the value of allowDeselect  */
		getAllowDeselect?(): bool;
		/** [Method] Returns the number of selections  */
		getCount?(): number;
		/** [Method] Returns the value of deselectOnContainerClick  */
		getDeselectOnContainerClick?(): bool;
		/** [Method] Returns the value of disableSelection  */
		getDisableSelection?(): bool;
		/** [Method] Returns the array of previously selected items  */
		getLastSelected?(): any[];
		/** [Method] Returns the value of mode  */
		getMode?(): string;
		/** [Method] Returns an array of the currently selected records  */
		getSelection?(): any[];
		/** [Method] Returns the number of selections  */
		getSelectionCount?(): number;
		/** [Method] Returns the selection mode currently used by this Selectable  */
		getSelectionMode?(): string;
		/** [Method] Returns true if there is a selected record  */
		hasSelection?(): bool;
		/** [Method] Returns true if the Selectable is currently locked  */
		isLocked?(): bool;
		/** [Method] Returns true if the specified row is selected  
		* @param record any The record or index of the record to check. 
		*/
		isSelected?( record?:any ): any;
		isSelected?( record?:Ext.data.IModel ): bool;
		isSelected?( record?:number ): bool;
		/** [Method] Adds the given records to the currently selected set  
		* @param records any The records to select. 
		* @param keepExisting any If true, the existing selection will be added to (if not, the old selection is replaced). 
		* @param suppressEvent any If true, the select event will not be fired. 
		*/
		select?( records?:any, keepExisting?:any, suppressEvent?:any ): any;
		select?( records?:Ext.data.IModel, keepExisting?:bool, suppressEvent?:bool ): void;
		select?( records?:any[], keepExisting?:bool, suppressEvent?:bool ): void;
		select?( records?:number, keepExisting?:bool, suppressEvent?:bool ): void;
		/** [Method] Selects all records  
		* @param silent bool true to suppress all select events. 
		*/
		selectAll?( silent?:bool ): void;
		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked  
		* @param startRecord number The index of the first row in the range. 
		* @param endRecord number The index of the last row in the range. 
		* @param keepExisting bool true to retain existing selections. 
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:bool ): void;
		/** [Method] Sets the value of allowDeselect  
		* @param allowDeselect bool 
		*/
		setAllowDeselect?( allowDeselect?:bool ): void;
		/** [Method] Sets the value of deselectOnContainerClick  
		* @param deselectOnContainerClick bool 
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:bool ): void;
		/** [Method] Sets the value of disableSelection  
		* @param disableSelection bool 
		*/
		setDisableSelection?( disableSelection?:bool ): void;
		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;
		/** [Method] Sets the value of mode  
		* @param mode string 
		*/
		setMode?( mode?:string ): void;
		/** [Method] Sets a record as the last focused record  
		* @param newRecord Ext.data.IRecord 
		* @param oldRecord Ext.data.IRecord 
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;
	}
}
declare module Ext.mixin {
	export interface ISortable extends Ext.mixin.IMixin {
		/** [Config Option] (String) */
		defaultSortDirection?: string;
		/** [Config Option] (String) */
		sortRoot?: string;
		/** [Config Option] (Array) */
		sorters?: any[];
		/** [Property] (Object) */
		currentSortFn?: any;
		/** [Property] (Boolean) */
		dirtySortFn?: bool;
		/** [Property] (Boolean) */
		sorted?: bool;
		/** [Method] This method adds a sorter  
		* @param sorter any Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		addSorter?( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array  
		* @param sorters any[] An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		addSorters?( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters  
		* @param items any[] The array that you want to insert the item into. 
		* @param item any The item that you want to insert into the items array. 
		*/
		findInsertionIndex?( items?:any[], item?:any ): number;
		/** [Method] Returns the value of defaultSortDirection  */
		getDefaultSortDirection?(): string;
		/** [Method] Returns an up to date sort function  */
		getSortFn?(): any;
		/** [Method] Returns the value of sortRoot  */
		getSortRoot?(): string;
		/** [Method] Returns the value of sorters  */
		getSorters?(): any[];
		/** [Method] This method adds a sorter at a given index  
		* @param index number The index at which to insert the sorter. 
		* @param sorter any Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		insertSorter?( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index  
		* @param index number The index at which to insert the sorters. 
		* @param sorters any[] Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		insertSorters?( index?:number, sorters?:any[], defaultDirection?:string ): void;
		/** [Method] This method removes a sorter  
		* @param sorter any Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		*/
		removeSorter?( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array  
		* @param sorters any[] Each value in the array can be a string (property name), function (sorterFn) or Sorter instance. 
		*/
		removeSorters?( sorters?:any[] ): void;
		/** [Method] Sets the value of defaultSortDirection  
		* @param defaultSortDirection string 
		*/
		setDefaultSortDirection?( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of sortRoot  
		* @param sortRoot string 
		*/
		setSortRoot?( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters  
		* @param sorters any[] 
		*/
		setSorters?( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters  
		* @param data any[] The array you want to have sorted. 
		*/
		sort?( data?:any[] ): any[];
	}
}
declare module Ext.mixin {
	export interface ITemplatable extends Ext.mixin.IMixin {
	}
}
declare module Ext.mixin {
	export interface ITraversable extends Ext.mixin.IMixin {
	}
}
declare module Ext {
	export interface IMsg extends Ext.IMessageBox {
	}
	export class Msg {
	}
}
declare module Ext.navigation {
	export interface IBar extends Ext.ITitleBar {
		/** [Config Option] (Boolean) */
		androidAnimation?: bool;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of androidAnimation  */
		getAndroidAnimation?(): bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Sets the value of androidAnimation  
		* @param androidAnimation bool 
		*/
		setAndroidAnimation?( androidAnimation?:bool ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext.navigation {
	export interface IView extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultBackButtonText?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Boolean/Object) */
		navigationBar?: any;
		/** [Config Option] (Boolean) */
		useTitleForBackButtonText?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultBackButtonText  */
		getDefaultBackButtonText?(): string;
		/** [Method] Returns the value of items  */
		getItems?(): any;
		/** [Method] Returns the value of navigationBar  */
		getNavigationBar?(): any;
		/** [Method] Returns the previous item if one exists  */
		getPreviousItem?(): any;
		/** [Method] Returns the value of useTitleForBackButtonText  */
		getUseTitleForBackButtonText?(): bool;
		/** [Method] Removes the current active view from the stack and sets the previous view using the default animation of this view  
		* @param count number The number of views you want to pop. 
		*/
		pop?( count?:number ): Ext.IComponent;
		/** [Method] Pushes a new view into this navigation view using the default animation that this view has  
		* @param view any The view to push. 
		*/
		push?( view?:any ): Ext.IComponent;
		/** [Method] Resets the view by removing all items between the first and last item  */
		reset?(): Ext.IComponent;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultBackButtonText  
		* @param defaultBackButtonText string 
		*/
		setDefaultBackButtonText?( defaultBackButtonText?:string ): void;
		/** [Method] Sets the value of items  
		* @param items any 
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of navigationBar  
		* @param navigationBar any 
		*/
		setNavigationBar?( navigationBar?:any ): void;
		/** [Method] Sets the value of useTitleForBackButtonText  
		* @param useTitleForBackButtonText bool 
		*/
		setUseTitleForBackButtonText?( useTitleForBackButtonText?:bool ): void;
	}
}
declare module Ext {
	export interface INavigationView extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultBackButtonText?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (Boolean/Object) */
		navigationBar?: any;
		/** [Config Option] (Boolean) */
		useTitleForBackButtonText?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultBackButtonText  */
		getDefaultBackButtonText?(): string;
		/** [Method] Returns the value of items  */
		getItems?(): any;
		/** [Method] Returns the value of navigationBar  */
		getNavigationBar?(): any;
		/** [Method] Returns the previous item if one exists  */
		getPreviousItem?(): any;
		/** [Method] Returns the value of useTitleForBackButtonText  */
		getUseTitleForBackButtonText?(): bool;
		/** [Method] Removes the current active view from the stack and sets the previous view using the default animation of this view  
		* @param count number The number of views you want to pop. 
		*/
		pop?( count?:number ): Ext.IComponent;
		/** [Method] Pushes a new view into this navigation view using the default animation that this view has  
		* @param view any The view to push. 
		*/
		push?( view?:any ): Ext.IComponent;
		/** [Method] Resets the view by removing all items between the first and last item  */
		reset?(): Ext.IComponent;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultBackButtonText  
		* @param defaultBackButtonText string 
		*/
		setDefaultBackButtonText?( defaultBackButtonText?:string ): void;
		/** [Method] Sets the value of items  
		* @param items any 
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of navigationBar  
		* @param navigationBar any 
		*/
		setNavigationBar?( navigationBar?:any ): void;
		/** [Method] Sets the value of useTitleForBackButtonText  
		* @param useTitleForBackButtonText bool 
		*/
		setUseTitleForBackButtonText?( useTitleForBackButtonText?:bool ): void;
	}
}
declare module Ext {
	export interface INumber {
	}
	export class Number {
		/** [Method] Checks whether or not the passed number is within a desired range  
		* @param number number The number to check 
		* @param min number The minimum number in the range 
		* @param max number The maximum number in the range 
		*/
		static constrain( number?:number, min?:number, max?:number ): number;
		/** [Method] Validate that a value is numeric and convert it to a number if necessary  
		* @param value any 
		* @param defaultValue number The value to return if the original value is non-numeric 
		*/
		static from( value?:any, defaultValue?:number ): number;
		/** [Method] Snaps the passed number between stopping points based upon a passed increment value  
		* @param value number The unsnapped value. 
		* @param increment number The increment by which the value must move. 
		* @param minValue number The minimum value to which the returned value must be constrained. Overrides the increment.. 
		* @param maxValue number The maximum value to which the returned value must be constrained. Overrides the increment.. 
		*/
		static snap( value?:number, increment?:number, minValue?:number, maxValue?:number ): number;
		/** [Method] Formats a number using fixed point notation 
		* @param value number The number to format 
		* @param precision number The number of digits to show after the decimal point 
		*/
		static toFixed( value?:number, precision?:number ): void;
	}
}
declare module Ext {
	export interface IObject {
	}
	export class Object {
		/** [Method] Returns a new object with the given object as the prototype chain  
		* @param object any The prototype chain for the new object. 
		*/
		static chain( object?:any ): void;
		/** [Method] Iterate through an object and invoke the given callback function for each iteration  
		* @param object any The object to iterate 
		* @param fn any The callback function. 
		* @param scope any The execution scope (this) of the callback function 
		*/
		static each( object?:any, fn?:any, scope?:any ): void;
		/** [Method] Converts a query string back into an object  
		* @param queryString string The query string to decode. 
		* @param recursive bool Whether or not to recursively decode the string. This format is supported by PHP / Ruby on Rails servers and similar. 
		*/
		static fromQueryString( queryString?:string, recursive?:bool ): any;
		/** [Method] Returns the first matching key corresponding to the given value  
		* @param object any 
		* @param value any The value to find 
		*/
		static getKey( object?:any, value?:any ): void;
		/** [Method] Gets all keys of the given object as an array  
		* @param object any 
		*/
		static getKeys( object?:any ): string[];
		/** [Method] Gets the total number of this object s own properties  
		* @param object any 
		*/
		static getSize( object?:any ): number;
		/** [Method] Gets all values of the given object as an array  
		* @param object any 
		*/
		static getValues( object?:any ): any[];
		/** [Method] Merges any number of objects recursively without referencing them or their children  
		* @param source any The first object into which to merge the others. 
		* @param objs any One or more objects to be merged into the first. 
		*/
		static merge( source?:any, objs?:any ): any;
		/** [Method] Convert a name  value pair to an array of objects with support for nested structures useful to construct query stri  
		* @param name string 
		* @param value any 
		* @param recursive bool true to recursively encode any sub-objects. 
		*/
		static toQueryObjects( name?:string, value?:any, recursive?:bool ): any[];
		/** [Method] Takes an object and converts it to an encoded query string  
		* @param object any The object to encode. 
		* @param recursive bool Whether or not to interpret the object in recursive format. (PHP / Ruby on Rails servers and similar). 
		*/
		static toQueryString( object?:any, recursive?:bool ): string;
	}
}
declare module Ext {
	export interface IOs extends Ext.env.IOS {
	}
	export class Os {
	}
}
declare module Ext {
	export interface IPanel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/Boolean/String) */
		bodyBorder?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyMargin?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyPadding?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bodyBorder  */
		getBodyBorder?(): number;
		/** [Method] Returns the value of bodyBorder  */
		getBodyBorder?(): bool;
		/** [Method] Returns the value of bodyBorder  */
		getBodyBorder?(): string;
		/** [Method] Returns the value of bodyMargin  */
		getBodyMargin?(): number;
		/** [Method] Returns the value of bodyMargin  */
		getBodyMargin?(): bool;
		/** [Method] Returns the value of bodyMargin  */
		getBodyMargin?(): string;
		/** [Method] Returns the value of bodyPadding  */
		getBodyPadding?(): number;
		/** [Method] Returns the value of bodyPadding  */
		getBodyPadding?(): bool;
		/** [Method] Returns the value of bodyPadding  */
		getBodyPadding?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bodyBorder  
		* @param bodyBorder any 
		*/
		setBodyBorder?( bodyBorder?:any ): any;
		setBodyBorder?( bodyBorder?:number ): void;
		setBodyBorder?( bodyBorder?:bool ): void;
		setBodyBorder?( bodyBorder?:string ): void;
		/** [Method] Sets the value of bodyMargin  
		* @param bodyMargin any 
		*/
		setBodyMargin?( bodyMargin?:any ): any;
		setBodyMargin?( bodyMargin?:number ): void;
		setBodyMargin?( bodyMargin?:bool ): void;
		setBodyMargin?( bodyMargin?:string ): void;
		/** [Method] Sets the value of bodyPadding  
		* @param bodyPadding any 
		*/
		setBodyPadding?( bodyPadding?:any ): any;
		setBodyPadding?( bodyPadding?:number ): void;
		setBodyPadding?( bodyPadding?:bool ): void;
		setBodyPadding?( bodyPadding?:string ): void;
	}
}
declare module Ext.lib {
	export interface IPanel extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/Boolean/String) */
		bodyBorder?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyMargin?: any;
		/** [Config Option] (Number/Boolean/String) */
		bodyPadding?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bodyBorder  */
		getBodyBorder?(): number;
		/** [Method] Returns the value of bodyBorder  */
		getBodyBorder?(): bool;
		/** [Method] Returns the value of bodyBorder  */
		getBodyBorder?(): string;
		/** [Method] Returns the value of bodyMargin  */
		getBodyMargin?(): number;
		/** [Method] Returns the value of bodyMargin  */
		getBodyMargin?(): bool;
		/** [Method] Returns the value of bodyMargin  */
		getBodyMargin?(): string;
		/** [Method] Returns the value of bodyPadding  */
		getBodyPadding?(): number;
		/** [Method] Returns the value of bodyPadding  */
		getBodyPadding?(): bool;
		/** [Method] Returns the value of bodyPadding  */
		getBodyPadding?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bodyBorder  
		* @param bodyBorder any 
		*/
		setBodyBorder?( bodyBorder?:any ): any;
		setBodyBorder?( bodyBorder?:number ): void;
		setBodyBorder?( bodyBorder?:bool ): void;
		setBodyBorder?( bodyBorder?:string ): void;
		/** [Method] Sets the value of bodyMargin  
		* @param bodyMargin any 
		*/
		setBodyMargin?( bodyMargin?:any ): any;
		setBodyMargin?( bodyMargin?:number ): void;
		setBodyMargin?( bodyMargin?:bool ): void;
		setBodyMargin?( bodyMargin?:string ): void;
		/** [Method] Sets the value of bodyPadding  
		* @param bodyPadding any 
		*/
		setBodyPadding?( bodyPadding?:any ): any;
		setBodyPadding?( bodyPadding?:number ): void;
		setBodyPadding?( bodyPadding?:bool ): void;
		setBodyPadding?( bodyPadding?:string ): void;
	}
}
declare module Ext.picker {
	export interface IDate extends Ext.picker.IPicker {
		/** [Config Option] (String) */
		dayText?: string;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (String) */
		monthText?: string;
		/** [Config Option] (Array) */
		slotOrder?: any[];
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Config Option] (Number) */
		yearFrom?: number;
		/** [Config Option] (String) */
		yearText?: string;
		/** [Config Option] (Number) */
		yearTo?: number;
		/** [Method] Returns the value of dayText  */
		getDayText?(): string;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): string;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): any;
		/** [Method] Returns the value of monthText  */
		getMonthText?(): string;
		/** [Method] Returns the value of slotOrder  */
		getSlotOrder?(): any[];
		/** [Method] Returns the values of each of the pickers slots 
		* @param useDom any 
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the value of yearFrom  */
		getYearFrom?(): number;
		/** [Method] Returns the value of yearText  */
		getYearText?(): string;
		/** [Method] Returns the value of yearTo  */
		getYearTo?(): number;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of dayText  
		* @param dayText string 
		*/
		setDayText?( dayText?:string ): void;
		/** [Method] Sets the value of doneButton  
		* @param doneButton any 
		*/
		setDoneButton?( doneButton?:any ): any;
		setDoneButton?( doneButton?:string ): void;
		/** [Method] Sets the value of monthText  
		* @param monthText string 
		*/
		setMonthText?( monthText?:string ): void;
		/** [Method] Sets the value of slotOrder  
		* @param slotOrder any[] 
		*/
		setSlotOrder?( slotOrder?:any[] ): void;
		/** [Method] Sets the values of the pickers slots  
		* @param value any 
		* @param animated any 
		*/
		setValue?( value?:any, animated?:any ): Ext.IPicker;
		/** [Method] Sets the value of yearFrom  
		* @param yearFrom number 
		*/
		setYearFrom?( yearFrom?:number ): void;
		/** [Method] Sets the value of yearText  
		* @param yearText string 
		*/
		setYearText?( yearText?:string ): void;
		/** [Method] Sets the value of yearTo  
		* @param yearTo number 
		*/
		setYearTo?( yearTo?:number ): void;
		/** [Method] Updates the dayText configuration  
		* @param newDayText any 
		* @param oldDayText any 
		*/
		updateDayText?( newDayText?:any, oldDayText?:any ): void;
		/** [Method] Updates the monthText configuration 
		* @param newMonthText any 
		* @param oldMonthText any 
		*/
		updateMonthText?( newMonthText?:any, oldMonthText?:any ): void;
		/** [Method] Updates the yearFrom configuration */
		updateYearFrom?(): void;
		/** [Method] Updates the yearText configuration 
		* @param yearText any 
		*/
		updateYearText?( yearText?:any ): void;
		/** [Method] Updates the yearTo configuration */
		updateYearTo?(): void;
	}
}
declare module Ext {
	export interface IDatePicker extends Ext.picker.IPicker {
		/** [Config Option] (String) */
		dayText?: string;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (String) */
		monthText?: string;
		/** [Config Option] (Array) */
		slotOrder?: any[];
		/** [Config Option] (Object/Date) */
		value?: any;
		/** [Config Option] (Number) */
		yearFrom?: number;
		/** [Config Option] (String) */
		yearText?: string;
		/** [Config Option] (Number) */
		yearTo?: number;
		/** [Method] Returns the value of dayText  */
		getDayText?(): string;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): string;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): any;
		/** [Method] Returns the value of monthText  */
		getMonthText?(): string;
		/** [Method] Returns the value of slotOrder  */
		getSlotOrder?(): any[];
		/** [Method] Returns the values of each of the pickers slots 
		* @param useDom any 
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the value of yearFrom  */
		getYearFrom?(): number;
		/** [Method] Returns the value of yearText  */
		getYearText?(): string;
		/** [Method] Returns the value of yearTo  */
		getYearTo?(): number;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of dayText  
		* @param dayText string 
		*/
		setDayText?( dayText?:string ): void;
		/** [Method] Sets the value of doneButton  
		* @param doneButton any 
		*/
		setDoneButton?( doneButton?:any ): any;
		setDoneButton?( doneButton?:string ): void;
		/** [Method] Sets the value of monthText  
		* @param monthText string 
		*/
		setMonthText?( monthText?:string ): void;
		/** [Method] Sets the value of slotOrder  
		* @param slotOrder any[] 
		*/
		setSlotOrder?( slotOrder?:any[] ): void;
		/** [Method] Sets the values of the pickers slots  
		* @param value any 
		* @param animated any 
		*/
		setValue?( value?:any, animated?:any ): Ext.IPicker;
		/** [Method] Sets the value of yearFrom  
		* @param yearFrom number 
		*/
		setYearFrom?( yearFrom?:number ): void;
		/** [Method] Sets the value of yearText  
		* @param yearText string 
		*/
		setYearText?( yearText?:string ): void;
		/** [Method] Sets the value of yearTo  
		* @param yearTo number 
		*/
		setYearTo?( yearTo?:number ): void;
		/** [Method] Updates the dayText configuration  
		* @param newDayText any 
		* @param oldDayText any 
		*/
		updateDayText?( newDayText?:any, oldDayText?:any ): void;
		/** [Method] Updates the monthText configuration 
		* @param newMonthText any 
		* @param oldMonthText any 
		*/
		updateMonthText?( newMonthText?:any, oldMonthText?:any ): void;
		/** [Method] Updates the yearFrom configuration */
		updateYearFrom?(): void;
		/** [Method] Updates the yearText configuration 
		* @param yearText any 
		*/
		updateYearText?( yearText?:any ): void;
		/** [Method] Updates the yearTo configuration */
		updateYearTo?(): void;
	}
}
declare module Ext.picker {
	export interface IPicker extends Ext.ISheet {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String/Mixed) */
		cancelButton?: any;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Array) */
		slots?: any[];
		/** [Config Option] (Ext.TitleBar/Ext.Toolbar/Object) */
		toolbar?: any;
		/** [Config Option] (Boolean) */
		useTitles?: bool;
		/** [Config Option] (String/Number) */
		value?: any;
		/** [Method] Updates the cancelButton configuration  
		* @param config any 
		*/
		applyCancelButton?( config?:any ): any;
		/** [Method] Updates the doneButton configuration  
		* @param config any 
		*/
		applyDoneButton?( config?:any ): any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom  */
		getBottom?(): number;
		/** [Method] Returns the value of cancelButton  */
		getCancelButton?(): string;
		/** [Method] Returns the value of cancelButton  */
		getCancelButton?(): any;
		/** [Method] Returns the value of activeItem  */
		getCard?(): any;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): string;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): any;
		/** [Method] Returns the value of height  */
		getHeight?(): number;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of left  */
		getLeft?(): number;
		/** [Method] Returns the value of right  */
		getRight?(): number;
		/** [Method] Returns the value of slots  */
		getSlots?(): any[];
		/** [Method] Returns the value of toolbar  */
		getToolbar?(): any;
		/** [Method] Returns the value of toolbarPosition  */
		getToolbarPosition?(): string;
		/** [Method] Returns the value of useTitles  */
		getUseTitles?(): bool;
		/** [Method] Returns the values of each of the pickers slots 
		* @param useDom any 
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the values of each of the pickers slots  */
		getValues?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom  
		* @param bottom number 
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of cancelButton  
		* @param cancelButton any 
		*/
		setCancelButton?( cancelButton?:any ): any;
		setCancelButton?( cancelButton?:string ): void;
		/** [Method] Sets the value of activeItem  
		* @param activeItem any 
		*/
		setCard?( activeItem?:any ): void;
		/** [Method] Sets the value of doneButton  
		* @param doneButton any 
		*/
		setDoneButton?( doneButton?:any ): any;
		setDoneButton?( doneButton?:string ): void;
		/** [Method] Sets the value of height  
		* @param height number 
		*/
		setHeight?( height?:number ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of left  
		* @param left number 
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right  
		* @param right number 
		*/
		setRight?( right?:number ): void;
		/** [Method] Sets the value of slots  
		* @param slots any[] 
		*/
		setSlots?( slots?:any[] ): void;
		/** [Method] Sets the value of toolbar  
		* @param toolbar any 
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of toolbarPosition  
		* @param toolbarPosition string 
		*/
		setToolbarPosition?( toolbarPosition?:string ): void;
		/** [Method] Sets the value of useTitles  
		* @param useTitles bool 
		*/
		setUseTitles?( useTitles?:bool ): void;
		/** [Method] Sets the values of the pickers slots  
		* @param values any The values in a {name:'value'} format. 
		* @param animated bool true to animate setting the values. 
		*/
		setValue?( values?:any, animated?:bool ): Ext.IPicker;
		/** [Method] Shows this component  */
		show?(): Ext.IComponent;
	}
}
declare module Ext {
	export interface IPicker extends Ext.ISheet {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		bottom?: any;
		/** [Config Option] (String/Mixed) */
		cancelButton?: any;
		/** [Config Option] (String/Mixed) */
		doneButton?: any;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Number/String) */
		left?: any;
		/** [Config Option] (Number/String) */
		right?: any;
		/** [Config Option] (Array) */
		slots?: any[];
		/** [Config Option] (Ext.TitleBar/Ext.Toolbar/Object) */
		toolbar?: any;
		/** [Config Option] (Boolean) */
		useTitles?: bool;
		/** [Config Option] (String/Number) */
		value?: any;
		/** [Method] Updates the cancelButton configuration  
		* @param config any 
		*/
		applyCancelButton?( config?:any ): any;
		/** [Method] Updates the doneButton configuration  
		* @param config any 
		*/
		applyDoneButton?( config?:any ): any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bottom  */
		getBottom?(): number;
		/** [Method] Returns the value of cancelButton  */
		getCancelButton?(): string;
		/** [Method] Returns the value of cancelButton  */
		getCancelButton?(): any;
		/** [Method] Returns the value of activeItem  */
		getCard?(): any;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): string;
		/** [Method] Returns the value of doneButton  */
		getDoneButton?(): any;
		/** [Method] Returns the value of height  */
		getHeight?(): number;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of left  */
		getLeft?(): number;
		/** [Method] Returns the value of right  */
		getRight?(): number;
		/** [Method] Returns the value of slots  */
		getSlots?(): any[];
		/** [Method] Returns the value of toolbar  */
		getToolbar?(): any;
		/** [Method] Returns the value of toolbarPosition  */
		getToolbarPosition?(): string;
		/** [Method] Returns the value of useTitles  */
		getUseTitles?(): bool;
		/** [Method] Returns the values of each of the pickers slots 
		* @param useDom any 
		*/
		getValue?( useDom?:any ): any;
		/** [Method] Returns the values of each of the pickers slots  */
		getValues?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bottom  
		* @param bottom number 
		*/
		setBottom?( bottom?:number ): void;
		/** [Method] Sets the value of cancelButton  
		* @param cancelButton any 
		*/
		setCancelButton?( cancelButton?:any ): any;
		setCancelButton?( cancelButton?:string ): void;
		/** [Method] Sets the value of activeItem  
		* @param activeItem any 
		*/
		setCard?( activeItem?:any ): void;
		/** [Method] Sets the value of doneButton  
		* @param doneButton any 
		*/
		setDoneButton?( doneButton?:any ): any;
		setDoneButton?( doneButton?:string ): void;
		/** [Method] Sets the value of height  
		* @param height number 
		*/
		setHeight?( height?:number ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of left  
		* @param left number 
		*/
		setLeft?( left?:number ): void;
		/** [Method] Sets the value of right  
		* @param right number 
		*/
		setRight?( right?:number ): void;
		/** [Method] Sets the value of slots  
		* @param slots any[] 
		*/
		setSlots?( slots?:any[] ): void;
		/** [Method] Sets the value of toolbar  
		* @param toolbar any 
		*/
		setToolbar?( toolbar?:any ): void;
		/** [Method] Sets the value of toolbarPosition  
		* @param toolbarPosition string 
		*/
		setToolbarPosition?( toolbarPosition?:string ): void;
		/** [Method] Sets the value of useTitles  
		* @param useTitles bool 
		*/
		setUseTitles?( useTitles?:bool ): void;
		/** [Method] Sets the values of the pickers slots  
		* @param values any The values in a {name:'value'} format. 
		* @param animated bool true to animate setting the values. 
		*/
		setValue?( values?:any, animated?:bool ): Ext.IPicker;
		/** [Method] Shows this component  */
		show?(): Ext.IComponent;
	}
}
declare module Ext.picker {
	export interface ISlot extends Ext.dataview.IDataView {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		itemTpl?: string;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Method] Looks at the data configuration and turns it into store  
		* @param data any 
		*/
		applyData?( data?:any ): any;
		/** [Method] Sets the title for this dataview by creating element  
		* @param title string 
		*/
		applyTitle?( title?:string ): string;
		/** [Method] Returns the value of align  */
		getAlign?(): string;
		/** [Method] Returns the value of displayField  */
		getDisplayField?(): string;
		/** [Method] Returns the value of itemTpl  */
		getItemTpl?(): string;
		/** [Method] Returns the value of name  */
		getName?(): string;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Returns the value of valueField  */
		getValueField?(): string;
		/** [Method] Sets the value of align  
		* @param align string 
		*/
		setAlign?( align?:string ): void;
		/** [Method] Sets the value of displayField  
		* @param displayField string 
		*/
		setDisplayField?( displayField?:string ): void;
		/** [Method] Sets the value of itemTpl  
		* @param itemTpl string 
		*/
		setItemTpl?( itemTpl?:string ): void;
		/** [Method] Sets the value of name  
		* @param name string 
		*/
		setName?( name?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of valueField  
		* @param valueField string 
		*/
		setValueField?( valueField?:string ): void;
		/** [Method] Updates the align configuration 
		* @param newAlign any 
		* @param oldAlign any 
		*/
		updateAlign?( newAlign?:any, oldAlign?:any ): void;
	}
}
declare module Ext.plugin {
	export interface IListPaging extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoPaging?: bool;
		/** [Config Option] (String) */
		loadMoreText?: string;
		/** [Config Option] (String) */
		noMoreRecordsText?: string;
		/** [Method] Returns the value of autoPaging  */
		getAutoPaging?(): bool;
		/** [Method] Returns the value of loadMoreText  */
		getLoadMoreText?(): string;
		/** [Method] Returns the value of noMoreRecordsText  */
		getNoMoreRecordsText?(): string;
		/** [Method] Sets the value of autoPaging  
		* @param autoPaging bool 
		*/
		setAutoPaging?( autoPaging?:bool ): void;
		/** [Method] Sets the value of loadMoreText  
		* @param loadMoreText string 
		*/
		setLoadMoreText?( loadMoreText?:string ): void;
		/** [Method] Sets the value of noMoreRecordsText  
		* @param noMoreRecordsText string 
		*/
		setNoMoreRecordsText?( noMoreRecordsText?:string ): void;
	}
}
declare module Ext.plugin {
	export interface IPullRefresh extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		autoSnapBack?: bool;
		/** [Config Option] (String) */
		lastUpdatedDateFormat?: string;
		/** [Config Option] (String) */
		lastUpdatedText?: string;
		/** [Config Option] (Ext.dataview.List) */
		list?: Ext.dataview.IList;
		/** [Config Option] (String) */
		loadedText?: string;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Number) */
		overpullSnapBackDuration?: number;
		/** [Config Option] (String) */
		pullRefreshText?: string;
		/** [Config Option] (Ext.XTemplate/String/Array) */
		pullTpl?: any;
		/** [Config Option] (String) */
		releaseRefreshText?: string;
		/** [Config Option] (Number) */
		snappingAnimationDuration?: number;
		/** [Method] Returns the value of autoSnapBack  */
		getAutoSnapBack?(): bool;
		/** [Method] Returns the value of lastUpdatedDateFormat  */
		getLastUpdatedDateFormat?(): string;
		/** [Method] Returns the value of lastUpdatedText  */
		getLastUpdatedText?(): string;
		/** [Method] Returns the value of list  */
		getList?(): Ext.dataview.IList;
		/** [Method] Returns the value of loadedText  */
		getLoadedText?(): string;
		/** [Method] Returns the value of loadingText  */
		getLoadingText?(): string;
		/** [Method] Returns the value of overpullSnapBackDuration  */
		getOverpullSnapBackDuration?(): number;
		/** [Method] Returns the value of pullRefreshText  */
		getPullRefreshText?(): string;
		/** [Method] Returns the value of pullTpl  */
		getPullTpl?(): Ext.IXTemplate;
		/** [Method] Returns the value of pullTpl  */
		getPullTpl?(): string;
		/** [Method] Returns the value of pullTpl  */
		getPullTpl?(): any[];
		/** [Method] Returns the value of releaseRefreshText  */
		getReleaseRefreshText?(): string;
		/** [Method] Returns the value of snappingAnimationDuration  */
		getSnappingAnimationDuration?(): number;
		/** [Method] Returns the value of translatable  */
		getTranslatable?(): bool;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of autoSnapBack  
		* @param autoSnapBack bool 
		*/
		setAutoSnapBack?( autoSnapBack?:bool ): void;
		/** [Method] Sets the value of lastUpdatedDateFormat  
		* @param lastUpdatedDateFormat string 
		*/
		setLastUpdatedDateFormat?( lastUpdatedDateFormat?:string ): void;
		/** [Method] Sets the value of lastUpdatedText  
		* @param lastUpdatedText string 
		*/
		setLastUpdatedText?( lastUpdatedText?:string ): void;
		/** [Method] Sets the value of list  
		* @param list Ext.dataview.IList 
		*/
		setList?( list?:Ext.dataview.IList ): void;
		/** [Method] Sets the value of loadedText  
		* @param loadedText string 
		*/
		setLoadedText?( loadedText?:string ): void;
		/** [Method] Sets the value of loadingText  
		* @param loadingText string 
		*/
		setLoadingText?( loadingText?:string ): void;
		/** [Method] Sets the value of overpullSnapBackDuration  
		* @param overpullSnapBackDuration number 
		*/
		setOverpullSnapBackDuration?( overpullSnapBackDuration?:number ): void;
		/** [Method] Sets the value of pullRefreshText  
		* @param pullRefreshText string 
		*/
		setPullRefreshText?( pullRefreshText?:string ): void;
		/** [Method] Sets the value of pullTpl  
		* @param pullTpl any 
		*/
		setPullTpl?( pullTpl?:any ): any;
		setPullTpl?( pullTpl?:Ext.IXTemplate ): void;
		setPullTpl?( pullTpl?:string ): void;
		setPullTpl?( pullTpl?:any[] ): void;
		/** [Method] Sets the value of releaseRefreshText  
		* @param releaseRefreshText string 
		*/
		setReleaseRefreshText?( releaseRefreshText?:string ): void;
		/** [Method] Sets the value of snappingAnimationDuration  
		* @param snappingAnimationDuration number 
		*/
		setSnappingAnimationDuration?( snappingAnimationDuration?:number ): void;
		/** [Method] Sets the value of translatable  
		* @param translatable bool 
		*/
		setTranslatable?( translatable?:bool ): void;
	}
}
declare module Ext {
	export interface IRouter {
	}
	export class Router {
		/** [Method] Application s onDependenciesLoaded has a deprecated wrapped line that calls this  
		* @param app any 
		*/
		static setAppInstance( app?:any ): void;
	}
}
declare module Ext.scroll.indicator {
	export interface IAbstract extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		hidden?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of active  */
		getActive?(): bool;
		/** [Method] Returns the value of axis  */
		getAxis?(): string;
		/** [Method] Returns the value of barCls  */
		getBarCls?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of hidden  */
		getHidden?(): bool;
		/** [Method] Returns the value of length  */
		getLength?(): any;
		/** [Method] Returns the value of minLength  */
		getMinLength?(): number;
		/** [Method] Returns the value of ratio  */
		getRatio?(): number;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Sets the value of active  
		* @param active bool 
		*/
		setActive?( active?:bool ): void;
		/** [Method] Sets the value of axis  
		* @param axis string 
		*/
		setAxis?( axis?:string ): void;
		/** [Method] Sets the value of barCls  
		* @param barCls string 
		*/
		setBarCls?( barCls?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of hidden  
		* @param hidden bool 
		*/
		setHidden?( hidden?:bool ): void;
		/** [Method] Sets the value of length  
		* @param length any 
		*/
		setLength?( length?:any ): void;
		/** [Method] Sets the value of minLength  
		* @param minLength number 
		*/
		setMinLength?( minLength?:number ): void;
		/** [Method] Sets the value of ratio  
		* @param ratio number 
		*/
		setRatio?( ratio?:number ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): void;
	}
}
declare module Ext.scroll.indicator {
	export interface ICssTransform extends Ext.scroll.indicator.IAbstract {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
	}
}
declare module Ext.scroll {
	export interface IIndicator extends Ext.IBase {
	}
}
declare module Ext.util {
	export interface IIndicator extends Ext.IBase {
	}
}
declare module Ext.scroll.indicator {
	export interface IRounded extends Ext.scroll.indicator.IAbstract {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
	}
}
declare module Ext.scroll.indicator {
	export interface IScrollPosition extends Ext.scroll.indicator.IAbstract {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
	}
}
declare module Ext.scroll {
	export interface IScroller extends Ext.IEvented {
		/** [Config Option] (Number) */
		acceleration?: number;
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Boolean) */
		directionLock?: bool;
		/** [Config Option] (Boolean) */
		disabled?: bool;
		/** [Config Option] (Number) */
		friction?: number;
		/** [Config Option] (Object/Number) */
		initialOffset?: any;
		/** [Config Option] (Object) */
		momentumEasing?: any;
		/** [Config Option] (Number/Object) */
		slotSnapSize?: any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of directionLock  */
		getDirectionLock?(): bool;
		/** [Method] Returns the value of disabled  */
		getDisabled?(): bool;
		/** [Method] Returns the value of initialOffset  */
		getInitialOffset?(): any;
		/** [Method] Returns the value of momentumEasing  */
		getMomentumEasing?(): any;
		/** [Method] Returns the value of slotSnapEasing  */
		getSlotSnapEasing?(): any;
		/** [Method] Returns the value of slotSnapSize  */
		getSlotSnapSize?(): any;
		/** [Method] Returns the value of translatable  */
		getTranslatable?(): any;
		/** [Method] Returns true if a specified axis is enabled  
		* @param axis string The axis to check (x or y). 
		*/
		isAxisEnabled?( axis?:string ): bool;
		/** [Method] Change the scroll offset by the given amount  
		* @param x number The offset to scroll by on the x axis. 
		* @param y number The offset to scroll by on the y axis. 
		* @param animation any Whether or not to animate the scrolling to the new position. 
		*/
		scrollBy?( x?:number, y?:number, animation?:any ): Ext.scroll.IScroller;
		/** [Method] Scrolls to the given location  
		* @param x number The scroll position on the x axis. 
		* @param y number The scroll position on the y axis. 
		* @param animation any Whether or not to animate the scrolling to the new position. 
		*/
		scrollTo?( x?:number, y?:number, animation?:any ): Ext.scroll.IScroller;
		/** [Method] Scrolls to the end of the scrollable view  
		* @param animation any 
		*/
		scrollToEnd?( animation?:any ): Ext.scroll.IScroller;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of directionLock  
		* @param directionLock bool 
		*/
		setDirectionLock?( directionLock?:bool ): void;
		/** [Method] Sets the value of disabled  
		* @param disabled bool 
		*/
		setDisabled?( disabled?:bool ): void;
		/** [Method] Sets the value of initialOffset  
		* @param initialOffset any 
		*/
		setInitialOffset?( initialOffset?:any ): void;
		/** [Method] Sets the value of momentumEasing  
		* @param momentumEasing any 
		*/
		setMomentumEasing?( momentumEasing?:any ): void;
		/** [Method] Sets the offset of this scroller  
		* @param offset any The offset to move to. 
		*/
		setOffset?( offset?:any ): Ext.scroll.IScroller;
		/** [Method] Sets the value of slotSnapEasing  
		* @param slotSnapEasing any 
		*/
		setSlotSnapEasing?( slotSnapEasing?:any ): void;
		/** [Method] Sets the value of slotSnapSize  
		* @param slotSnapSize any 
		*/
		setSlotSnapSize?( slotSnapSize?:any ): void;
		/** [Method] Sets the value of translatable  
		* @param translatable any 
		*/
		setTranslatable?( translatable?:any ): void;
		/** [Method] Updates the boundary information for this scroller  */
		updateBoundary?(): Ext.scroll.IScroller;
	}
}
declare module Ext.scroll {
	export interface IView extends Ext.IEvented {
		/** [Config Option] (String) */
		indicatorsUi?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of indicators  */
		getIndicators?(): any;
		/** [Method] Returns the value of indicatorsHidingDelay  */
		getIndicatorsHidingDelay?(): number;
		/** [Method] Returns the value of indicatorsUi  */
		getIndicatorsUi?(): string;
		/** [Method] Returns the scroller instance in this view  */
		getScroller?(): Ext.scroll.IView;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of indicators  
		* @param indicators any 
		*/
		setIndicators?( indicators?:any ): void;
		/** [Method] Sets the value of indicatorsHidingDelay  
		* @param indicatorsHidingDelay number 
		*/
		setIndicatorsHidingDelay?( indicatorsHidingDelay?:number ): void;
		/** [Method] Sets the value of indicatorsUi  
		* @param indicatorsUi string 
		*/
		setIndicatorsUi?( indicatorsUi?:string ): void;
		/** [Method] Sets the value of scroller  
		* @param scroller any 
		*/
		setScroller?( scroller?:any ): void;
	}
}
declare module Ext.util {
	export interface IScrollView extends Ext.IEvented {
		/** [Config Option] (String) */
		indicatorsUi?: string;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of indicators  */
		getIndicators?(): any;
		/** [Method] Returns the value of indicatorsHidingDelay  */
		getIndicatorsHidingDelay?(): number;
		/** [Method] Returns the value of indicatorsUi  */
		getIndicatorsUi?(): string;
		/** [Method] Returns the scroller instance in this view  */
		getScroller?(): Ext.scroll.IView;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of indicators  
		* @param indicators any 
		*/
		setIndicators?( indicators?:any ): void;
		/** [Method] Sets the value of indicatorsHidingDelay  
		* @param indicatorsHidingDelay number 
		*/
		setIndicatorsHidingDelay?( indicatorsHidingDelay?:number ): void;
		/** [Method] Sets the value of indicatorsUi  
		* @param indicatorsUi string 
		*/
		setIndicatorsUi?( indicatorsUi?:string ): void;
		/** [Method] Sets the value of scroller  
		* @param scroller any 
		*/
		setScroller?( scroller?:any ): void;
	}
}
declare module Ext {
	export interface ISegmentedButton extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowDepress?: bool;
		/** [Config Option] (Boolean) */
		allowMultiple?: bool;
		/** [Config Option] (Boolean) */
		allowToggle?: bool;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Array) */
		pressedButtons?: any[];
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Method] We override initItems so we can check for the pressed config  */
		applyItems?(): void;
		/** [Method] Returns the value of allowDepress  */
		getAllowDepress?(): bool;
		/** [Method] Returns the value of allowMultiple  */
		getAllowMultiple?(): bool;
		/** [Method] Returns the value of allowToggle  */
		getAllowToggle?(): bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Gets the currently pressed button s */
		getPressed?(): void;
		/** [Method] Returns the value of pressedButtons  */
		getPressedButtons?(): any[];
		/** [Method] Returns the value of pressedCls  */
		getPressedCls?(): string;
		/** [Method] Returns true if a specified Ext Button is pressed  
		* @param button Ext.IButton The button to check if pressed. 
		*/
		isPressed?( button?:Ext.IButton ): bool;
		/** [Method] Sets the value of allowDepress  
		* @param allowDepress bool 
		*/
		setAllowDepress?( allowDepress?:bool ): void;
		/** [Method] Sets the value of allowMultiple  
		* @param allowMultiple bool 
		*/
		setAllowMultiple?( allowMultiple?:bool ): void;
		/** [Method] Sets the value of allowToggle  
		* @param allowToggle bool 
		*/
		setAllowToggle?( allowToggle?:bool ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Activates a button  
		* @param button any The button to activate. 
		* @param pressed any If defined, sets the pressed state of the button, otherwise the pressed state is toggled. 
		* @param suppressEvents any true to suppress toggle events during the action. If allowMultiple is true, then setPressed will toggle the button state. 
		*/
		setPressed?( button?:any, pressed?:any, suppressEvents?:any ): any;
		setPressed?( button?:number, pressed?:bool, suppressEvents?:bool ): void;
		setPressed?( button?:string, pressed?:bool, suppressEvents?:bool ): void;
		setPressed?( button?:Ext.IButton, pressed?:bool, suppressEvents?:bool ): void;
		/** [Method] Sets the value of pressedButtons  
		* @param pressedButtons any[] 
		*/
		setPressedButtons?( pressedButtons?:any[] ): void;
		/** [Method] Sets the value of pressedCls  
		* @param pressedCls string 
		*/
		setPressedCls?( pressedCls?:string ): void;
	}
}
declare module Ext {
	export interface ISheet extends Ext.IPanel {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		centered?: bool;
		/** [Config Option] (String) */
		enter?: string;
		/** [Config Option] (String) */
		exit?: string;
		/** [Config Option] (String/Mixed) */
		hideAnimation?: any;
		/** [Config Option] (Boolean) */
		modal?: bool;
		/** [Config Option] (String/Mixed) */
		showAnimation?: any;
		/** [Config Option] (Boolean) */
		stretchX?: bool;
		/** [Config Option] (Boolean) */
		stretchY?: bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of centered  */
		getCentered?(): bool;
		/** [Method] Returns the value of enter  */
		getEnter?(): string;
		/** [Method] Returns the value of exit  */
		getExit?(): string;
		/** [Method] Returns the value of hideAnimation  */
		getHideAnimation?(): any;
		/** [Method] Returns the value of modal  */
		getModal?(): bool;
		/** [Method] Returns the value of showAnimation  */
		getShowAnimation?(): any;
		/** [Method] Returns the value of stretchX  */
		getStretchX?(): bool;
		/** [Method] Returns the value of stretchY  */
		getStretchY?(): bool;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of centered  
		* @param centered bool 
		*/
		setCentered?( centered?:bool ): void;
		/** [Method] Sets the value of enter  
		* @param enter string 
		*/
		setEnter?( enter?:string ): void;
		/** [Method] Sets the value of exit  
		* @param exit string 
		*/
		setExit?( exit?:string ): void;
		/** [Method] Sets the value of hideAnimation  
		* @param hideAnimation any 
		*/
		setHideAnimation?( hideAnimation?:any ): void;
		/** [Method] Sets the value of modal  
		* @param modal bool 
		*/
		setModal?( modal?:bool ): void;
		/** [Method] Sets the value of showAnimation  
		* @param showAnimation any 
		*/
		setShowAnimation?( showAnimation?:any ): void;
		/** [Method] Sets the value of stretchX  
		* @param stretchX bool 
		*/
		setStretchX?( stretchX?:bool ): void;
		/** [Method] Sets the value of stretchY  
		* @param stretchY bool 
		*/
		setStretchY?( stretchY?:bool ): void;
	}
}
declare module Ext.slider {
	export interface ISlider extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		allowThumbsOverlapping?: bool;
		/** [Config Option] (Boolean/Object) */
		animation?: any;
		/** [Config Option] (Boolean) */
		animationDuration?: bool;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		readOnly?: bool;
		/** [Config Option] (Object) */
		thumbConfig?: any;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Number/Number[]) */
		values?: any;
		/** [Method] Sets the increment configuration  
		* @param increment number 
		*/
		applyIncrement?( increment?:number ): number;
		/** [Method] Returns the value of allowThumbsOverlapping  */
		getAllowThumbsOverlapping?(): bool;
		/** [Method] Returns the value of animation  */
		getAnimation?(): any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of increment  */
		getIncrement?(): number;
		/** [Method] Returns the value of maxValue  */
		getMaxValue?(): number;
		/** [Method] Returns the value of minValue  */
		getMinValue?(): number;
		/** [Method] Returns the value of readOnly  */
		getReadOnly?(): bool;
		/** [Method] Returns the Thumb instance bound to this Slider 
		* @param index number The index of Thumb to return. 
		*/
		getThumb?( index?:number ): Ext.slider.IThumb;
		/** [Method] Returns the value of thumbConfig  */
		getThumbConfig?(): any;
		/** [Method] Returns the Thumb instances bound to this Slider */
		getThumbs?(): Ext.slider.IThumb[];
		/** [Method] Returns the value of value  */
		getValue?(): number;
		/** [Method] Returns the value of value  */
		getValue?(): number[];
		/** [Method] Convenience method  */
		getValues?(): any;
		/** [Method] Sets the value of allowThumbsOverlapping  
		* @param allowThumbsOverlapping bool 
		*/
		setAllowThumbsOverlapping?( allowThumbsOverlapping?:bool ): void;
		/** [Method] Sets the value of animation  
		* @param animation any 
		*/
		setAnimation?( animation?:any ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of increment  
		* @param increment number 
		*/
		setIncrement?( increment?:number ): void;
		/** [Method] Sets the value of maxValue  
		* @param maxValue number 
		*/
		setMaxValue?( maxValue?:number ): void;
		/** [Method] Sets the value of minValue  
		* @param minValue number 
		*/
		setMinValue?( minValue?:number ): void;
		/** [Method] Sets the value of readOnly  
		* @param readOnly bool 
		*/
		setReadOnly?( readOnly?:bool ): void;
		/** [Method] Sets the value of thumbConfig  
		* @param thumbConfig any 
		*/
		setThumbConfig?( thumbConfig?:any ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): any;
		setValue?( value?:number ): void;
		setValue?( value?:number[] ): void;
		/** [Method] Convenience method  
		* @param value any 
		*/
		setValues?( value?:any ): void;
		/** [Method] Updates the sliders thumbs with their new value s  
		* @param newValue any 
		* @param oldValue any 
		*/
		updateValue?( newValue?:any, oldValue?:any ): void;
	}
}
declare module Ext.slider {
	export interface IThumb extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		draggable?: any;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of draggable  */
		getDraggable?(): any;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of draggable  
		* @param draggable any 
		*/
		setDraggable?( draggable?:any ): void;
	}
}
declare module Ext.slider {
	export interface IToggle extends Ext.slider.ISlider {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		maxValueCls?: string;
		/** [Config Option] (String) */
		minValueCls?: string;
		/** [Method] Sets the increment configuration  */
		applyIncrement?(): number;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of maxValueCls  */
		getMaxValueCls?(): string;
		/** [Method] Returns the value of minValueCls  */
		getMinValueCls?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of maxValueCls  
		* @param maxValueCls string 
		*/
		setMaxValueCls?( maxValueCls?:string ): void;
		/** [Method] Sets the value of minValueCls  
		* @param minValueCls string 
		*/
		setMinValueCls?( minValueCls?:string ): void;
		/** [Method] Sets the value of value  
		* @param newValue any 
		* @param oldValue any 
		*/
		setValue?( newValue?:any, oldValue?:any ): void;
	}
}
declare module Ext {
	export interface ISpacer extends Ext.IComponent {
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] Returns the value of flex  */
		getFlex?(): number;
		/** [Method] Returns the value of width  */
		getWidth?(): number;
		/** [Method] Sets the value of flex  
		* @param flex number 
		*/
		setFlex?( flex?:number ): void;
		/** [Method] Sets the value of width  
		* @param width number 
		*/
		setWidth?( width?:number ): void;
	}
}
declare module Ext {
	export interface IString {
	}
	export class String {
		/** [Method] Capitalize the given string  
		* @param string string 
		*/
		static capitalize( string?:string ): string;
		/** [Method] Truncate a string and add an ellipsis  to the end if it exceeds the specified length  
		* @param value string The string to truncate. 
		* @param length number The maximum length to allow before truncating. 
		* @param word bool true to try to find a common word break. 
		*/
		static ellipsis( value?:string, length?:number, word?:bool ): string;
		/** [Method] Escapes the passed string for  and 
		* @param string string The string to escape. 
		*/
		static escape( string?:string ): string;
		/** [Method] Escapes the passed string for use in a regular expression  
		* @param string string 
		*/
		static escapeRegex( string?:string ): string;
		/** [Method] Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens  
		* @param string string The tokenized string to be formatted. 
		* @param values string First param value to replace token {0}, then next param to replace {1} etc. 
		*/
		static format( string?:string, values?:string ): string;
		/** [Method] Convert certain characters  amp lt and from their HTML character equivalents  
		* @param value string The string to decode. 
		*/
		static htmlDecode( value?:string ): string;
		/** [Method] Convert certain characters  amp lt and to their HTML character equivalents for literal display in web pages  
		* @param value string The string to encode. 
		*/
		static htmlEncode( value?:string ): string;
		/** [Method] Pads the left side of a string with a specified character  
		* @param string string The original string. 
		* @param size number The total length of the output string. 
		* @param character string The character with which to pad the original string (defaults to empty string " "). 
		*/
		static leftPad( string?:string, size?:number, character?:string ): string;
		/** [Method] Returns a string with a specified number of repetitions a given string pattern  
		* @param pattern string The pattern to repeat. 
		* @param count number The number of times to repeat the pattern (may be 0). 
		* @param sep string An option string to separate each pattern. 
		*/
		static repeat( pattern?:string, count?:number, sep?:string ): void;
		/** [Method] Utility function that allows you to easily switch a string between two alternating values  
		* @param string string The current string. 
		* @param value string The value to compare to the current string. 
		* @param other string The new value to use if the string already equals the first value passed in. 
		*/
		static toggle( string?:string, value?:string, other?:string ): string;
		/** [Method] Trims whitespace from either end of a string leaving spaces within the string intact  
		* @param string string The string to escape 
		*/
		static trim( string?:string ): string;
		/** [Method] Appends content to the query string of a URL handling logic for whether to place a question mark or ampersand  
		* @param url string The URL to append to. 
		* @param string string The content to append to the URL. 
		*/
		static urlAppend( url?:string, string?:string ): string;
	}
}
declare module Ext {
	export interface ISupports {
		/** [Property] (Object) */
		AudioTag?: any;
		/** [Property] (Object) */
		GeoLocation?: any;
		/** [Property] (Object) */
		SVG?: any;
		/** [Property] (Object) */
		Transitions?: any;
		/** [Property] (Object) */
		VML?: any;
	}
}
declare module Ext.tab {
	export interface IBar extends Ext.IToolbar {
		/** [Config Option] (Number/String/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Returns the value of activeTab  */
		getActiveTab?(): number;
		/** [Method] Returns the value of activeTab  */
		getActiveTab?(): string;
		/** [Method] Returns the value of activeTab  */
		getActiveTab?(): Ext.IComponent;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of activeTab  
		* @param activeTab any 
		*/
		setActiveTab?( activeTab?:any ): any;
		setActiveTab?( activeTab?:number ): void;
		setActiveTab?( activeTab?:string ): void;
		setActiveTab?( activeTab?:Ext.IComponent ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare module Ext {
	export interface ITabBar extends Ext.IToolbar {
		/** [Config Option] (Number/String/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Method] Returns the value of activeTab  */
		getActiveTab?(): number;
		/** [Method] Returns the value of activeTab  */
		getActiveTab?(): string;
		/** [Method] Returns the value of activeTab  */
		getActiveTab?(): Ext.IComponent;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of activeTab  
		* @param activeTab any 
		*/
		setActiveTab?( activeTab?:any ): any;
		setActiveTab?( activeTab?:number ): void;
		setActiveTab?( activeTab?:string ): void;
		setActiveTab?( activeTab?:Ext.IComponent ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
	}
}
declare module Ext.tab {
	export interface IPanel extends Ext.IContainer {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Boolean) */
		tabBarDock?: bool;
		/** [Config Option] (String) */
		tabBarPosition?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Updates this container with the new active item  
		* @param tabBar any 
		* @param newTab any 
		*/
		doTabChange?( tabBar?:any, newTab?:any ): bool;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of tabBar  */
		getTabBar?(): any;
		/** [Method] Returns the value of tabBarPosition  */
		getTabBarPosition?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of tabBar  
		* @param tabBar any 
		*/
		setTabBar?( tabBar?:any ): void;
		/** [Method] Sets the value of tabBarPosition  
		* @param tabBarPosition string 
		*/
		setTabBarPosition?( tabBarPosition?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Updates the Ui for this component and the tabBar  
		* @param newUi any 
		* @param oldUi any 
		*/
		updateUi?( newUi?:any, oldUi?:any ): void;
	}
}
declare module Ext {
	export interface ITabPanel extends Ext.IContainer {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Boolean) */
		tabBarDock?: bool;
		/** [Config Option] (String) */
		tabBarPosition?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Updates this container with the new active item  
		* @param tabBar any 
		* @param newTab any 
		*/
		doTabChange?( tabBar?:any, newTab?:any ): bool;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of tabBar  */
		getTabBar?(): any;
		/** [Method] Returns the value of tabBarPosition  */
		getTabBarPosition?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of tabBar  
		* @param tabBar any 
		*/
		setTabBar?( tabBar?:any ): void;
		/** [Method] Sets the value of tabBarPosition  
		* @param tabBarPosition string 
		*/
		setTabBarPosition?( tabBarPosition?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Updates the Ui for this component and the tabBar  
		* @param newUi any 
		* @param oldUi any 
		*/
		updateUi?( newUi?:any, oldUi?:any ): void;
	}
}
declare module Ext.tab {
	export interface ITab extends Ext.IButton {
		/** [Config Option] (Boolean) */
		active?: bool;
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] Returns the value of active  */
		getActive?(): bool;
		/** [Method] Returns the value of activeCls  */
		getActiveCls?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of pressedCls  */
		getPressedCls?(): string;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Sets the value of active  
		* @param active bool 
		*/
		setActive?( active?:bool ): void;
		/** [Method] Sets the value of activeCls  
		* @param activeCls string 
		*/
		setActiveCls?( activeCls?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of pressedCls  
		* @param pressedCls string 
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
	}
}
declare module Ext {
	export interface ITab extends Ext.IButton {
		/** [Config Option] (Boolean) */
		active?: bool;
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] Returns the value of active  */
		getActive?(): bool;
		/** [Method] Returns the value of activeCls  */
		getActiveCls?(): string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of pressedCls  */
		getPressedCls?(): string;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Sets the value of active  
		* @param active bool 
		*/
		setActive?( active?:bool ): void;
		/** [Method] Sets the value of activeCls  
		* @param activeCls string 
		*/
		setActiveCls?( activeCls?:string ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of pressedCls  
		* @param pressedCls string 
		*/
		setPressedCls?( pressedCls?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
	}
}
declare module Ext {
	export interface ITaskQueue extends Ext.IBase {
	}
	export class TaskQueue {
		/** [Method]  */
		constructor();
	}
}
declare module Ext {
	export interface ITemplate extends Ext.IBase {
		/** [Config Option] (Boolean) */
		compiled?: bool;
		/** [Config Option] (Boolean) */
		disableFormats?: bool;
		/** [Property] (Boolean) */
		isTemplate?: bool;
		/** [Method] Applies the supplied values to the template and appends the new node s to the specified el  
		* @param el any The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement any true to return an Ext.Element. 
		*/
		append?( el?:any, values?:any, returnElement?:any ): any;
		append?( el?:string, values?:any, returnElement?:bool ): HTMLElement;
		append?( el?:HTMLElement, values?:any, returnElement?:bool ): HTMLElement;
		append?( el?:Ext.IElement, values?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Applies the supplied values to the template and appends the new node s to the specified el  
		* @param el String The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement bool true to return an Ext.Element. 
		*/
		append?( el?:string, values?:any, returnElement?:bool ): Ext.IElement;
		append?( el?:HTMLElement, values?:any, returnElement?:bool ): Ext.IElement;
		append?( el?:Ext.IElement, values?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Returns an HTML fragment of this template with the specified values applied  
		* @param values any The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});  
		*/
		apply?( values?:any ): string;
		/** [Method] Appends the result of this template to the provided output array  
		* @param values any The template values. See apply. 
		* @param out any[] The array to which output is pushed. 
		*/
		applyOut?( values?:any, out?:any[] ): any[];
		/** [Method] Alias for apply  
		* @param values any The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});  
		*/
		applyTemplate?( values?:any ): string;
		/** [Method] Compiles the template into an internal function eliminating the RegEx overhead  */
		compile?(): Ext.ITemplate;
		/** [Method] Applies the supplied values to the template and inserts the new node s after el  
		* @param el any The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement any true to return a Ext.Element. 
		*/
		insertAfter?( el?:any, values?:any, returnElement?:any ): any;
		insertAfter?( el?:string, values?:any, returnElement?:bool ): HTMLElement;
		insertAfter?( el?:HTMLElement, values?:any, returnElement?:bool ): HTMLElement;
		insertAfter?( el?:Ext.IElement, values?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Applies the supplied values to the template and inserts the new node s after el  
		* @param el String The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement bool true to return a Ext.Element. 
		*/
		insertAfter?( el?:string, values?:any, returnElement?:bool ): Ext.IElement;
		insertAfter?( el?:HTMLElement, values?:any, returnElement?:bool ): Ext.IElement;
		insertAfter?( el?:Ext.IElement, values?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Applies the supplied values to the template and inserts the new node s before el  
		* @param el any The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement any true to return an Ext.Element. 
		*/
		insertBefore?( el?:any, values?:any, returnElement?:any ): any;
		insertBefore?( el?:string, values?:any, returnElement?:bool ): HTMLElement;
		insertBefore?( el?:HTMLElement, values?:any, returnElement?:bool ): HTMLElement;
		insertBefore?( el?:Ext.IElement, values?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Applies the supplied values to the template and inserts the new node s before el  
		* @param el String The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement bool true to return an Ext.Element. 
		*/
		insertBefore?( el?:string, values?:any, returnElement?:bool ): Ext.IElement;
		insertBefore?( el?:HTMLElement, values?:any, returnElement?:bool ): Ext.IElement;
		insertBefore?( el?:Ext.IElement, values?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Applies the supplied values to the template and inserts the new node s as the first child of el  
		* @param el any The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement any true to return a Ext.Element. 
		*/
		insertFirst?( el?:any, values?:any, returnElement?:any ): any;
		insertFirst?( el?:string, values?:any, returnElement?:bool ): HTMLElement;
		insertFirst?( el?:HTMLElement, values?:any, returnElement?:bool ): HTMLElement;
		insertFirst?( el?:Ext.IElement, values?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Applies the supplied values to the template and inserts the new node s as the first child of el  
		* @param el String The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement bool true to return a Ext.Element. 
		*/
		insertFirst?( el?:string, values?:any, returnElement?:bool ): Ext.IElement;
		insertFirst?( el?:HTMLElement, values?:any, returnElement?:bool ): Ext.IElement;
		insertFirst?( el?:Ext.IElement, values?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Applies the supplied values to the template and overwrites the content of el with the new node s 
		* @param el any The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement any true to return a Ext.Element. 
		*/
		overwrite?( el?:any, values?:any, returnElement?:any ): any;
		overwrite?( el?:string, values?:any, returnElement?:bool ): HTMLElement;
		overwrite?( el?:HTMLElement, values?:any, returnElement?:bool ): HTMLElement;
		overwrite?( el?:Ext.IElement, values?:any, returnElement?:bool ): HTMLElement;
		/** [Method] Applies the supplied values to the template and overwrites the content of el with the new node s 
		* @param el String The context element. 
		* @param values any The template values. See applyTemplate for details. 
		* @param returnElement bool true to return a Ext.Element. 
		*/
		overwrite?( el?:string, values?:any, returnElement?:bool ): Ext.IElement;
		overwrite?( el?:HTMLElement, values?:any, returnElement?:bool ): Ext.IElement;
		overwrite?( el?:Ext.IElement, values?:any, returnElement?:bool ): Ext.IElement;
		/** [Method] Sets the HTML used as the template and optionally compiles it  
		* @param html string 
		* @param compile bool true to compile the template. 
		*/
		set?( html?:string, compile?:bool ): Ext.ITemplate;
		/** [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML  
		* @param el any A DOM element or its id. 
		* @param config any Config object. 
		*/
		from?( el?:any, config?:any ): any;
		from?( el?:string, config?:any ): Ext.ITemplate;
		from?( el?:HTMLElement, config?:any ): Ext.ITemplate;
	}
}
declare module Ext {
	export interface ITitle extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
	}
}
declare module Ext {
	export interface ITitleBar extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Array/Object) */
		items?: any;
		/** [Config Option] (String) */
		minHeight?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of items  */
		getItems?(): any;
		/** [Method] Returns the value of minHeight  */
		getMinHeight?(): string;
		/** [Method] Returns the value of title  */
		getTitle?(): string;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of items  
		* @param items any 
		*/
		setItems?( items?:any ): void;
		/** [Method] Sets the value of minHeight  
		* @param minHeight string 
		*/
		setMinHeight?( minHeight?:string ): void;
		/** [Method] Sets the value of title  
		* @param title string 
		*/
		setTitle?( title?:string ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
	}
}
declare module Ext {
	export interface IToolbar extends Ext.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		docked?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (String) */
		minHeight?: string;
		/** [Config Option] (String/Ext.Title) */
		title?: any;
		/** [Config Option] (Boolean) */
		titleCls?: bool;
		/** [Config Option] (String) */
		ui?: string;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of defaultType  */
		getDefaultType?(): string;
		/** [Method] Returns the value of docked  */
		getDocked?(): string;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the value of minHeight  */
		getMinHeight?(): string;
		/** [Method] Returns an Ext Title component  */
		getTitle?(): Ext.ITitle;
		/** [Method] Returns the value of ui  */
		getUi?(): string;
		/** [Method] Hides the title if it exists  */
		hideTitle?(): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of defaultType  
		* @param defaultType string 
		*/
		setDefaultType?( defaultType?:string ): void;
		/** [Method] Sets the value of docked  
		* @param docked string 
		*/
		setDocked?( docked?:string ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of minHeight  
		* @param minHeight string 
		*/
		setMinHeight?( minHeight?:string ): void;
		/** [Method] Use this to update the title configuration  
		* @param title any You can either pass a String, or a config/instance of Ext.Title. 
		*/
		setTitle?( title?:any ): any;
		setTitle?( title?:string ): void;
		setTitle?( title?:Ext.ITitle ): void;
		/** [Method] Sets the value of ui  
		* @param ui string 
		*/
		setUi?( ui?:string ): void;
		/** [Method] Shows the title if it exists  */
		showTitle?(): void;
	}
}
declare module Ext.util {
	export interface IAbstractMixedCollection extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		allowFunctions?: bool;
		/** [Method] Adds an item to the collection  
		* @param key string The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj any The item to add. 
		*/
		add?( key?:string, obj?:any ): any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs any An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		addAll?( objs?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all items from the collection  */
		clear?(): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Creates a shallow copy of this collection  */
		clone?(): Ext.util.IMixedCollection;
		/** [Method] Collects unique values of a particular property in this MixedCollection  
		* @param property string The property to collect on. 
		* @param root string Optional 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the data object. 
		* @param allowNull bool Pass true to allow null, undefined, or empty string values. 
		*/
		collect?( property?:string, root?:string, allowNull?:bool ): any[];
		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o any The Object to look for in the collection. 
		*/
		contains?( o?:any ): bool;
		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key string The key to look for in the collection. 
		*/
		containsKey?( key?:string ): bool;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn any The function to execute for each item. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn any The function to execute for each item. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		eachKey?( fn?:any, scope?:any ): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property any A property on your objects, or an array of Filter objects 
		* @param value any Either string that the property values should start with or a RegExp to test against the property. 
		* @param anyMatch any true to match any part of the string, not just the beginning 
		* @param caseSensitive any true for case sensitive comparison. 
		*/
		filter?( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any;
		filter?( property?:Ext.util.IFilter[], value?:string, anyMatch?:bool, caseSensitive?:bool ): Ext.util.IMixedCollection;
		filter?( property?:string, value?:string, anyMatch?:bool, caseSensitive?:bool ): Ext.util.IMixedCollection;
		filter?( property?:Ext.util.IFilter[], value?:RegExp, anyMatch?:bool, caseSensitive?:bool ): Ext.util.IMixedCollection;
		filter?( property?:string, value?:RegExp, anyMatch?:bool, caseSensitive?:bool ): Ext.util.IMixedCollection;
		/** [Method] Filter by a function  
		* @param fn any The function to be called, it will receive the args o (the object), k (the key) 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		*/
		filterBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn any The selection function to execute for each item. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		findBy?( fn?:any, scope?:any ): any;
		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property any The name of a property on your objects. 
		* @param value any A string that the property values. should start with or a RegExp to test against the property. 
		* @param start any The index to start searching at. 
		* @param anyMatch any true to match any part of the string, not just the beginning. 
		* @param caseSensitive any true for case sensitive comparison. 
		*/
		findIndex?( property?:any, value?:any, start?:any, anyMatch?:any, caseSensitive?:any ): any;
		findIndex?( property?:string, value?:string, start?:number, anyMatch?:bool, caseSensitive?:bool ): number;
		findIndex?( property?:string, value?:RegExp, start?:number, anyMatch?:bool, caseSensitive?:bool ): number;
		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn any The function to be called, it will receive the args o (the object), k (the key). 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start number The index to start searching at. 
		*/
		findIndexBy?( fn?:any, scope?:any, start?:number ): number;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the first item in the collection  */
		first?(): any;
		/** [Method] Returns the item associated with the passed key OR index  
		* @param key any The key or index of the item. 
		*/
		get?( key?:any ): any;
		get?( key?:string ): any;
		get?( key?:number ): any;
		/** [Method] Returns the item at the specified index  
		* @param index number The index of the item. 
		*/
		getAt?( index?:number ): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the item associated with the passed key  
		* @param key any The key of the item. 
		*/
		getByKey?( key?:any ): any;
		getByKey?( key?:string ): any;
		getByKey?( key?:number ): any;
		/** [Method] Returns the number of items in the collection  */
		getCount?(): number;
		/** [Method] MixedCollection has a generic way to fetch keys if you implement getKey  
		* @param item any The item for which to find the key. 
		*/
		getKey?( item?:any ): any;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns a range of items in this collection  
		* @param start number The starting index. 
		* @param end number The ending index. 
		*/
		getRange?( start?:number, end?:number ): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Returns index within the collection of the passed Object  
		* @param o any The item to find the index of. 
		*/
		indexOf?( o?:any ): number;
		/** [Method] Returns index within the collection of the passed key  
		* @param key string The key to find the index of. 
		*/
		indexOfKey?( key?:string ): number;
		/** [Method] Inserts an item at the specified index in the collection  
		* @param index number The index to insert the item at. 
		* @param key string The key to associate with the new item, or the item itself. 
		* @param obj any If the second parameter was a key, the new item. 
		*/
		insert?( index?:number, key?:string, obj?:any ): any;
		/** [Method] Returns the last item in the collection  */
		last?(): any;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Remove an item from the collection  
		* @param o any The item to remove. 
		*/
		remove?( o?:any ): any;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Remove all items in the passed array from the collection  
		* @param items any[] An array of items to be removed. 
		*/
		removeAll?( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection  
		* @param index number The index within the collection of the item to remove. 
		*/
		removeAt?( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection  
		* @param key string The key of the item to remove. 
		*/
		removeAtKey?( key?:string ): any;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Replaces an item in the collection  
		* @param key string The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o any If the first parameter passed was a key, the item to associate with that key. 
		*/
		replace?( key?:string, o?:any ): any;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Collects all of the values of the given property and returns their sum  
		* @param property string The property to sum by. 
		* @param root string Optional 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the data object 
		* @param start number The record index to start at. 
		* @param end number The record index to end at. 
		*/
		sum?( property?:string, root?:string, start?:number, end?:number ): number;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.util {
	export interface ICollection extends Ext.IBase,Ext.mixin.ISortable,Ext.mixin.IFilterable {
		/** [Config Option] (Object[]) */
		filters?: any[];
		/** [Config Option] (Object[]) */
		sorters?: any[];
		/** [Property] (Array) */
		all?: any[];
		/** [Property] (Object) */
		indices?: any;
		/** [Property] (Array) */
		items?: any[];
		/** [Property] (Array) */
		keys?: any[];
		/** [Property] (Number) */
		length?: number;
		/** [Property] (Object) */
		map?: any;
		/** [Method] Adds an item to the collection  
		* @param key string The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param item any The item to add. 
		*/
		add?( key?:string, item?:any ): any;
		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param addItems any An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if {@link} Ext.util.MixedCollection.allowFunctions allowFunctions} has been set to true. 
		*/
		addAll?( addItems?:any ): void;
		/** [Method] This method adds a filter  
		* @param filter any Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		addFilter?( filter?:any ): void;
		/** [Method] This method adds all the filters in a passed array  
		* @param filters any 
		*/
		addFilters?( filters?:any ): any;
		/** [Method] This method adds a sorter  
		* @param sorter any Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		addSorter?( sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method adds all the sorters in a passed array  
		* @param sorters any[] An array with sorters. A sorter can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		addSorters?( sorters?:any[], defaultDirection?:string ): void;
		/** [Method] Removes all items from the collection  */
		clear?(): void;
		/** [Method] Creates a shallow copy of this collection */
		clone?(): Ext.util.IMixedCollection;
		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param item any The Object to look for in the collection. 
		*/
		contains?( item?:any ): bool;
		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key string The key to look for in the collection. 
		*/
		containsKey?( key?:string ): bool;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn any The function to execute for each item. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;
		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn any The function to execute for each item. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		eachKey?( fn?:any, scope?:any ): void;
		/** [Method] This method will sort a collection based on the currently configured sorters  
		* @param property any 
		* @param value any 
		* @param anyMatch any 
		* @param caseSensitive any 
		*/
		filter?( property?:any, value?:any, anyMatch?:any, caseSensitive?:any ): any[];
		/** [Method] Filter by a function  
		* @param fn any The function to be called. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		*/
		filterBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;
		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn any The selection function to execute for each item. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		findBy?( fn?:any, scope?:any ): any;
		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn any The function to be called. 
		* @param scope any The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start number The index to start searching at. 
		*/
		findIndexBy?( fn?:any, scope?:any, start?:number ): number;
		/** [Method] This method returns the index that a given item would be inserted into a given array based on the current sorters  
		* @param items any[] The array that you want to insert the item into. 
		* @param item any The item that you want to insert into the items array. 
		*/
		findInsertionIndex?( items?:any[], item?:any ): number;
		/** [Method] Returns the first item in the collection  */
		first?(): any;
		/** [Method] Returns the item associated with the passed key OR index  
		* @param key any The key or index of the item. 
		*/
		get?( key?:any ): any;
		get?( key?:string ): any;
		get?( key?:number ): any;
		/** [Method] Returns the item at the specified index  
		* @param index number The index of the item. 
		*/
		getAt?( index?:number ): any;
		/** [Method] Returns the value of autoFilter  */
		getAutoFilter?(): bool;
		/** [Method] Returns the value of autoSort  */
		getAutoSort?(): bool;
		/** [Method] Returns the item associated with the passed key  
		* @param key any The key of the item. 
		*/
		getByKey?( key?:any ): any;
		getByKey?( key?:string ): any;
		getByKey?( key?:number ): any;
		/** [Method] Returns the number of items in the collection  */
		getCount?(): number;
		/** [Method] Returns the value of defaultSortDirection  */
		getDefaultSortDirection?(): string;
		/** [Method] Returns an up to date sort function  */
		getFilterFn?(): any;
		/** [Method] Returns the value of filterRoot  */
		getFilterRoot?(): string;
		/** [Method] Returns the value of filters  */
		getFilters?(): any[];
		/** [Method] MixedCollection has a generic way to fetch keys if you implement getKey  
		* @param item any The item for which to find the key. 
		*/
		getKey?( item?:any ): any;
		/** [Method] Returns a range of items in this collection 
		* @param start number The starting index. 
		* @param end number The ending index. Defaults to the last item. 
		*/
		getRange?( start?:number, end?:number ): any[];
		/** [Method] Returns an up to date sort function  */
		getSortFn?(): any;
		/** [Method] Returns the value of sortRoot  */
		getSortRoot?(): string;
		/** [Method] Returns the value of sorters  */
		getSorters?(): any[];
		/** [Method] Returns index within the collection of the passed Object  
		* @param item any The item to find the index of. 
		*/
		indexOf?( item?:any ): number;
		/** [Method] Returns index within the collection of the passed key  
		* @param key string The key to find the index of. 
		*/
		indexOfKey?( key?:string ): number;
		/** [Method] Inserts an item at the specified index in the collection  
		* @param index number The index to insert the item at. 
		* @param key string The key to associate with the new item, or the item itself. 
		* @param item any If the second parameter was a key, the new item. 
		*/
		insert?( index?:number, key?:string, item?:any ): any;
		/** [Method] This method adds a filter at a given index  
		* @param index number The index at which to insert the filter. 
		* @param filter any Can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		insertFilter?( index?:number, filter?:any ): any;
		/** [Method] This method inserts all the filters in the passed array at the given index  
		* @param index number The index at which to insert the filters. 
		* @param filters any[] Each filter can be an instance of Ext.util.Filter, an object representing an Ext.util.Filter configuration, or a filter function. 
		*/
		insertFilters?( index?:number, filters?:any[] ): any[];
		/** [Method] This method adds a sorter at a given index  
		* @param index number The index at which to insert the sorter. 
		* @param sorter any Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		* @param defaultDirection string The default direction for each sorter in the array. Defaults to the value of defaultSortDirection. Can be either 'ASC' or 'DESC'. 
		*/
		insertSorter?( index?:number, sorter?:any, defaultDirection?:string ): void;
		/** [Method] This method inserts all the sorters in the passed array at the given index  */
		insertSorters?(): Ext.util.ICollection;
		/** [Method] Returns the last item in the collection  */
		last?(): any;
		/** [Method] Remove an item from the collection  
		* @param item any The item to remove. 
		*/
		remove?( item?:any ): any;
		/** [Method] Remove all items in the passed array from the collection  
		* @param items any[] An array of items to be removed. 
		*/
		removeAll?( items?:any[] ): Ext.util.IMixedCollection;
		/** [Method] Remove an item from a specified index in the collection  
		* @param index number The index within the collection of the item to remove. 
		*/
		removeAt?( index?:number ): any;
		/** [Method] Removed an item associated with the passed key from the collection  
		* @param key string The key of the item to remove. 
		*/
		removeAtKey?( key?:string ): any;
		/** [Method] This method removes all the filters in a passed array  
		* @param filters any 
		*/
		removeFilters?( filters?:any ): Ext.util.ICollection;
		/** [Method] This method removes a sorter  
		* @param sorter any Can be an instance of Ext.util.Sorter, a string indicating a property name, an object representing an Ext.util.Sorter configuration, or a sort function. 
		*/
		removeSorter?( sorter?:any ): void;
		/** [Method] This method removes all the sorters in a passed array  
		* @param sorters any 
		*/
		removeSorters?( sorters?:any ): Ext.util.ICollection;
		/** [Method] Replaces an item in the collection  
		* @param oldKey string The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param item any {Object} item (optional) If the first parameter passed was a key, the item to associate with that key. 
		*/
		replace?( oldKey?:string, item?:any ): any;
		/** [Method] Sets the value of autoFilter  
		* @param autoFilter bool 
		*/
		setAutoFilter?( autoFilter?:bool ): void;
		/** [Method] Sets the value of autoSort  
		* @param autoSort bool 
		*/
		setAutoSort?( autoSort?:bool ): void;
		/** [Method] Sets the value of defaultSortDirection  
		* @param defaultSortDirection string 
		*/
		setDefaultSortDirection?( defaultSortDirection?:string ): void;
		/** [Method] Sets the value of filterRoot  
		* @param filterRoot string 
		*/
		setFilterRoot?( filterRoot?:string ): void;
		/** [Method] Sets the value of filters  
		* @param filters any[] 
		*/
		setFilters?( filters?:any[] ): void;
		/** [Method] Sets the value of sortRoot  
		* @param sortRoot string 
		*/
		setSortRoot?( sortRoot?:string ): void;
		/** [Method] Sets the value of sorters  
		* @param sorters any[] 
		*/
		setSorters?( sorters?:any[] ): void;
		/** [Method] This method will sort an array based on the currently configured sorters  
		* @param sorters any 
		* @param defaultDirection any 
		*/
		sort?( sorters?:any, defaultDirection?:any ): any[];
	}
}
declare module Ext.util {
	export interface IDelayedTask extends Ext.IBase {
		/** [Method] Cancel the last queued timeout */
		cancel?(): void;
		/** [Method] Cancels any pending timeout and queues a new one  
		* @param delay number The milliseconds to delay 
		* @param newFn any Overrides the original function passed when instantiated. 
		* @param newScope any Overrides the original scope passed when instantiated. Remember that if no scope is specified, this will refer to the browser window. 
		* @param newArgs any[] Overrides the original args passed when instantiated. 
		*/
		delay?( delay?:number, newFn?:any, newScope?:any, newArgs?:any[] ): void;
		/** [Method] Returns the value of args  */
		getArgs?(): any;
		/** [Method] Returns the value of delay  */
		getDelay?(): any;
		/** [Method] Returns the value of fn  */
		getFn?(): any;
		/** [Method] Returns the value of interval  */
		getInterval?(): any;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Sets the value of args  
		* @param args any 
		*/
		setArgs?( args?:any ): void;
		/** [Method] Sets the value of delay  
		* @param delay any 
		*/
		setDelay?( delay?:any ): void;
		/** [Method] Sets the value of fn  
		* @param fn any 
		*/
		setFn?( fn?:any ): void;
		/** [Method] Sets the value of interval  
		* @param interval any 
		*/
		setInterval?( interval?:any ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
	}
}
declare module Ext.util {
	export interface IDraggable extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Object/Number) */
		initialOffset?: any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Disable the Draggable  */
		disable?(): Ext.util.IDraggable;
		/** [Method] Enable the Draggable  */
		enable?(): Ext.util.IDraggable;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of constraint  */
		getConstraint?(): string;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of disabled  */
		getDisabled?(): any;
		/** [Method] Returns the value of draggingCls  */
		getDraggingCls?(): string;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of initialOffset  */
		getInitialOffset?(): any;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of translatable  */
		getTranslatable?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of constraint  
		* @param constraint string 
		*/
		setConstraint?( constraint?:string ): void;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of disabled  
		* @param disabled any 
		*/
		setDisabled?( disabled?:any ): void;
		/** [Method] Sets the value of draggingCls  
		* @param draggingCls string 
		*/
		setDraggingCls?( draggingCls?:string ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of initialOffset  
		* @param initialOffset any 
		*/
		setInitialOffset?( initialOffset?:any ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of translatable  
		* @param translatable any 
		*/
		setTranslatable?( translatable?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.util {
	export interface IDroppable extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		disabled?: bool;
		/** [Config Option] (String) */
		group?: string;
		/** [Config Option] (String) */
		hoverCls?: string;
		/** [Config Option] (String) */
		invalidCls?: string;
		/** [Config Option] (String) */
		validDropMode?: string;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Disable the Droppable target  */
		disable?(): void;
		/** [Method] Enable the Droppable target  */
		enable?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of baseCls  */
		getBaseCls?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Method to determine whether this Component is currently disabled  */
		isDisabled?(): bool;
		/** [Method] Method to determine whether this Droppable is currently monitoring drag operations of Draggables  */
		isMonitoring?(): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of baseCls  
		* @param baseCls string 
		*/
		setBaseCls?( baseCls?:string ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.util {
	export interface IFilter extends Ext.IBase {
		/** [Config Option] (Boolean) */
		anyMatch?: bool;
		/** [Config Option] (Boolean) */
		caseSensitive?: bool;
		/** [Config Option] (Boolean) */
		exactMatch?: bool;
		/** [Config Option] (Function) */
		filterFn?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (RegExp/Mixed) */
		value?: any;
		/** [Method] Returns the value of anyMatch  */
		getAnyMatch?(): bool;
		/** [Method] Returns the value of caseSensitive  */
		getCaseSensitive?(): bool;
		/** [Method] Returns the value of exactMatch  */
		getExactMatch?(): bool;
		/** [Method] Returns the value of filterFn  */
		getFilterFn?(): any;
		/** [Method] Returns the value of id  */
		getId?(): string;
		/** [Method] Returns the value of property  */
		getProperty?(): string;
		/** [Method] Returns the value of root  */
		getRoot?(): string;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Returns the value of value  */
		getValue?(): RegExp;
		/** [Method] Returns the value of value  */
		getValue?(): any;
		/** [Method] Sets the value of anyMatch  
		* @param anyMatch bool 
		*/
		setAnyMatch?( anyMatch?:bool ): void;
		/** [Method] Sets the value of caseSensitive  
		* @param caseSensitive bool 
		*/
		setCaseSensitive?( caseSensitive?:bool ): void;
		/** [Method] Sets the value of exactMatch  
		* @param exactMatch bool 
		*/
		setExactMatch?( exactMatch?:bool ): void;
		/** [Method] Sets the value of filterFn  
		* @param filterFn any 
		*/
		setFilterFn?( filterFn?:any ): void;
		/** [Method] Sets the value of id  
		* @param id string 
		*/
		setId?( id?:string ): void;
		/** [Method] Sets the value of property  
		* @param property string 
		*/
		setProperty?( property?:string ): void;
		/** [Method] Sets the value of root  
		* @param root string 
		*/
		setRoot?( root?:string ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
		/** [Method] Sets the value of value  
		* @param value any 
		*/
		setValue?( value?:any ): any;
		setValue?( value?:RegExp ): void;
	}
}
declare module Ext.util {
	export interface IFormat extends Ext.IBase {
	}
	export class Format {
		/** [Method] Parse a value into a formatted date using the specified format pattern  
		* @param value any The value to format. Strings must conform to the format expected by the JavaScript Date object's parse() method. 
		* @param format any Any valid date format string. 
		*/
		static date( value?:any, format?:any ): any;
		static date( value?:string, format?:string ): string;
		static date( value?:any, format?:string ): string;
		/** [Method] Truncate a string and add an ellipsis  to the end if it exceeds the specified length  
		* @param value string The string to truncate. 
		* @param length number The maximum length to allow before truncating. 
		* @param word bool True to try to find a common word break. 
		*/
		static ellipsis( value?:string, length?:number, word?:bool ): string;
		/** [Method] Escapes the passed string for  and 
		* @param string string The string to escape. 
		*/
		static escape( string?:string ): string;
		/** [Method] Escapes the passed string for use in a regular expression  
		* @param str string 
		*/
		static escapeRegex( str?:string ): string;
		/** [Method] Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens  
		* @param string string The tokenized string to be formatted. 
		* @param values string The values to replace token {0}, {1}, etc. 
		*/
		static format( string?:string, values?:string ): string;
		/** [Method] Convert certain characters  amp lt and from their HTML character equivalents  
		* @param value string The string to decode. 
		*/
		static htmlDecode( value?:string ): string;
		/** [Method] Convert certain characters  amp lt and to their HTML character equivalents for literal display in web pages  
		* @param value string The string to encode. 
		*/
		static htmlEncode( value?:string ): string;
		/** [Method] Pads the left side of a string with a specified character  
		* @param string string The original string. 
		* @param size number The total length of the output string. 
		* @param char string The character with which to pad the original string. 
		*/
		static leftPad( string?:string, size?:number, char?:string ): string;
		/** [Method] Utility function that allows you to easily switch a string between two alternating values  
		* @param string string The current string 
		* @param value string The value to compare to the current string 
		* @param other string The new value to use if the string already equals the first value passed in 
		*/
		static toggle( string?:string, value?:string, other?:string ): string;
		/** [Method] Trims whitespace from either end of a string leaving spaces within the string intact  
		* @param string string The string to escape 
		*/
		static trim( string?:string ): string;
	}
}
declare module Ext.util {
	export interface IGeolocation extends Ext.IEvented {
		/** [Config Option] (Boolean) */
		allowHighAccuracy?: bool;
		/** [Config Option] (Boolean) */
		autoUpdate?: bool;
		/** [Config Option] (Number) */
		frequency?: number;
		/** [Config Option] (Number) */
		maximumAge?: number;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Property] (Number) */
		accuracy?: number;
		/** [Property] (Number) */
		altitude?: number;
		/** [Property] (Number) */
		altitudeAccuracy?: number;
		/** [Property] (Number) */
		heading?: number;
		/** [Property] (Number) */
		latitude?: number;
		/** [Property] (Number) */
		longitude?: number;
		/** [Property] (Number) */
		speed?: number;
		/** [Property] (Date) */
		timestamp?: any;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of allowHighAccuracy  */
		getAllowHighAccuracy?(): bool;
		/** [Method] Returns the value of autoUpdate  */
		getAutoUpdate?(): bool;
		/** [Method] Returns the value of frequency  */
		getFrequency?(): number;
		/** [Method] Returns the value of maximumAge  */
		getMaximumAge?(): number;
		/** [Method] Returns the value of timeout  */
		getTimeout?(): number;
		/** [Method] Sets the value of allowHighAccuracy  
		* @param allowHighAccuracy bool 
		*/
		setAllowHighAccuracy?( allowHighAccuracy?:bool ): void;
		/** [Method] Sets the value of autoUpdate  
		* @param autoUpdate bool 
		*/
		setAutoUpdate?( autoUpdate?:bool ): void;
		/** [Method] Sets the value of frequency  
		* @param frequency number 
		*/
		setFrequency?( frequency?:number ): void;
		/** [Method] Sets the value of maximumAge  
		* @param maximumAge number 
		*/
		setMaximumAge?( maximumAge?:number ): void;
		/** [Method] Sets the value of timeout  
		* @param timeout number 
		*/
		setTimeout?( timeout?:number ): void;
		/** [Method] Executes a onetime location update operation raising either a locationupdate or locationerror event  
		* @param callback any A callback method to be called when the location retrieval has been completed. Will be called on both success and failure. The method will be passed one parameter, Ext.util.Geolocation (this reference), set to null on failure. geo.updateLocation(function (geo) {  alert('Latitude: ' + (geo !== null ? geo.latitude : 'failed')); }); 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		*/
		updateLocation?( callback?:any, scope?:any ): void;
	}
}
declare module Ext.util {
	export interface IGrouper extends Ext.util.ISorter {
		/** [Config Option] (Function) */
		groupFn?: any;
		/** [Config Option] (String) */
		sortProperty?: string;
		/** [Config Option] (Function) */
		sorterFn?: any;
		/** [Method] Returns the value of groupFn  */
		getGroupFn?(): any;
		/** [Method] Returns the value of sortProperty  */
		getSortProperty?(): string;
		/** [Method] Returns the value of sorterFn  */
		getSorterFn?(): any;
		/** [Method] Sets the value of groupFn  
		* @param groupFn any 
		*/
		setGroupFn?( groupFn?:any ): void;
		/** [Method] Sets the value of sortProperty  
		* @param sortProperty string 
		*/
		setSortProperty?( sortProperty?:string ): void;
		/** [Method] Sets the value of sorterFn  
		* @param sorterFn any 
		*/
		setSorterFn?( sorterFn?:any ): void;
	}
}
declare module Ext.util {
	export interface IHashMap extends Ext.IBase,Ext.mixin.IObservable {
		/** [Config Option] (Function) */
		keyFn?: any;
		/** [Method] Add a new item to the hash  
		* @param key string The key of the new item. 
		* @param value any The value of the new item. 
		*/
		add?( key?:string, value?:any ): any;
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all items from the hash  
		* @param initial any 
		*/
		clear?( initial?:any ): Ext.util.IHashMap;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Performs a shallow copy on this hash  */
		clone?(): Ext.util.IHashMap;
		/** [Method] Checks whether a value exists in the hash  
		* @param value any The value to check for. 
		*/
		contains?( value?:any ): bool;
		/** [Method] Checks whether a key exists in the hash  
		* @param key string The key to check for. 
		*/
		containsKey?( key?:string ): bool;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Executes the specified function once for each item in the hash  
		* @param fn any The function to execute. 
		* @param scope any The scope to execute in. 
		*/
		each?( fn?:any, scope?:any ): Ext.util.IHashMap;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Retrieves an item with a particular key  
		* @param key string The key to lookup. 
		*/
		get?( key?:string ): any;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Gets the number of items in the hash  */
		getCount?(): number;
		/** [Method] Return all of the keys in the hash  */
		getKeys?(): any[];
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Return all of the values in the hash  */
		getValues?(): any[];
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Remove an item from the hash  
		* @param o any The value of the item to remove. 
		*/
		remove?( o?:any ): bool;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Remove an item from the hash  
		* @param key string The key to remove. 
		*/
		removeByKey?( key?:string ): bool;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Replaces an item in the hash  
		* @param key string The key of the item. 
		* @param value any The new value for the item. 
		*/
		replace?( key?:string, value?:any ): any;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.util {
	export interface IInflector extends Ext.IBase {
	}
	export class Inflector {
		/** [Method] Returns the correct Model name for a given string  
		* @param word string The word to classify 
		*/
		static classify( word?:string ): string;
		/** [Method] Removes all registered pluralization rules */
		static clearPlurals(): void;
		/** [Method] Removes all registered singularization rules */
		static clearSingulars(): void;
		/** [Method] Returns true if the given word is transnumeral the word is its own singular and plural form  e g  
		* @param word string The word to test 
		*/
		static isTransnumeral( word?:string ): bool;
		/** [Method] Ordinalizes a given number by adding a prefix such as st nd rd or th based on the last digit of the number  
		* @param number number The number to ordinalize 
		*/
		static ordinalize( number?:number ): string;
		/** [Method] Adds a new pluralization rule to the Inflector  
		* @param matcher RegExp The matcher regex 
		* @param replacer string The replacement string, which can reference matches from the matcher argument 
		*/
		static plural( matcher?:RegExp, replacer?:string ): void;
		/** [Method] Returns the pluralized form of a word e g  
		* @param word string The word to pluralize 
		*/
		static pluralize( word?:string ): string;
		/** [Method] Adds a new singularization rule to the Inflector  
		* @param matcher RegExp The matcher regex 
		* @param replacer string The replacement string, which can reference matches from the matcher argument 
		*/
		static singular( matcher?:RegExp, replacer?:string ): void;
		/** [Method] Returns the singularized form of a word e g  
		* @param word string The word to singularize 
		*/
		static singularize( word?:string ): string;
	}
}
declare module Ext.util {
	export interface IInputBlocker extends Ext.IBase {
	}
}
declare module Ext.util {
	export interface ILineSegment extends Ext.IBase {
		/** [Method] Returns the point where two lines intersect  
		* @param lineSegment Ext.util.ILineSegment The line to intersect with. 
		*/
		intersects?( lineSegment?:Ext.util.ILineSegment ): Ext.util.IPoint;
		/** [Method] Returns string representation of the line  */
		toString?(): string;
	}
}
declare module Ext.util {
	export interface IMixedCollection extends Ext.util.IAbstractMixedCollection,Ext.util.ISortable {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Performs initialization of this mixin  */
		initSortable?(): void;
		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping any Mapping from old item index to new item index. 
		*/
		reorder?( mapping?:any ): void;
		/** [Method] Sorts the data in the Store by one or more of its properties  
		* @param sorters any Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction any The overall direction to sort the data by. 
		* @param where any 
		* @param doSort any 
		*/
		sort?( sorters?:any, direction?:any, where?:any, doSort?:any ): any;
		sort?( sorters?:string, direction?:string, where?:string, doSort?:bool ): Ext.util.ISorter[];
		sort?( sorters?:Ext.util.ISorter[], direction?:string, where?:string, doSort?:bool ): Ext.util.ISorter[];
		/** [Method] Sorts the collection by a single sorter function  
		* @param sorterFn any The function to sort by. 
		*/
		sortBy?( sorterFn?:any ): void;
		/** [Method] Sorts this collection by keys  
		* @param dir string Sorting direction: 'ASC' or 'DESC'. 
		* @param fn any Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		sortByKey?( dir?:string, fn?:any ): void;
	}
}
declare module Ext.util {
	export interface IOffset extends Ext.IBase {
	}
}
declare module Ext.util.paintmonitor {
	export interface IAbstract extends Ext.IBase {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of args  */
		getArgs?(): any[];
		/** [Method] Returns the value of callback  */
		getCallback?(): any;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Sets the value of args  
		* @param args any[] 
		*/
		setArgs?( args?:any[] ): void;
		/** [Method] Sets the value of callback  
		* @param callback any 
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
	}
}
declare module Ext.util.paintmonitor {
	export interface ICssAnimation extends Ext.util.paintmonitor.IAbstract {
	}
}
declare module Ext.util {
	export interface IPaintMonitor extends Ext.IBase {
	}
}
declare module Ext.util.paintmonitor {
	export interface IOverflowChange extends Ext.util.paintmonitor.IAbstract {
	}
}
declare module Ext.util {
	export interface IPoint extends Ext.IBase {
		/** [Method] Copy a new instance of this point  */
		clone?(): Ext.util.IPoint;
		/** [Method] Clones this Point  */
		copy?(): Ext.util.IPoint;
		/** [Method] Copy the x and y values of another point  object to this point itself  
		* @param point any . 
		*/
		copyFrom?( point?:any ): Ext.util.IPoint;
		/** [Method] Compare this point and another point  
		* @param point any The point to compare with, either an instance of Ext.util.Point or an object with x and y properties. 
		*/
		equals?( point?:any ): bool;
		/** [Method] Whether the given point is not away from this point within the given threshold amount  
		* @param point any The point to check with, either an instance of Ext.util.Point or an object with x and y properties. 
		* @param threshold any Can be either an object with x and y properties or a number. 
		*/
		isCloseTo?( point?:any, threshold?:any ): bool;
		/** [Method] Returns true if this point is close to another one  */
		isWithin?(): bool;
		/** [Method] Compare this point with another point when the x and y values of both points are rounded  
		* @param point any The point to compare with, either an instance of Ext.util.Point or an object with x and y properties. 
		*/
		roundedEquals?( point?:any ): bool;
		/** [Method] Returns a human eye friendly string that represents this point useful for debugging  */
		toString?(): string;
		/** [Method] Translate this point by the given amounts  
		* @param x number Amount to translate in the x-axis. 
		* @param y number Amount to translate in the y-axis. 
		*/
		translate?( x?:number, y?:number ): bool;
		/** [Method] Returns a new point from an object that has x and y properties if that object is not an instance of Ext util Point  
		* @param object any 
		*/
		from?( object?:any ): Ext.util.IPoint;
		/** [Method] Returns a new instance of Ext util Point based on the pageX  pageY values of the given event  
		* @param e Event The event. 
		*/
		fromEvent?( e?:Event ): Ext.util.IPoint;
		/** [Method] Returns a new instance of Ext util Point based on the pageX  pageY values of the given touch  
		* @param touch Event 
		*/
		fromTouch?( touch?:Event ): Ext.util.IPoint;
	}
}
declare module Ext.util {
	export interface IPositionMap extends Ext.IBase {
		/** [Method] Returns the value of minimumHeight  */
		getMinimumHeight?(): number;
		/** [Method] Sets the value of minimumHeight  
		* @param minimumHeight number 
		*/
		setMinimumHeight?( minimumHeight?:number ): void;
	}
}
declare module Ext.util {
	export interface IRegion extends Ext.IBase {
		/** [Method] Modifies the current region to be adjusted by offsets  
		* @param top number Top offset 
		* @param right number Right offset 
		* @param bottom number Bottom offset 
		* @param left number Left offset 
		*/
		adjust?( top?:number, right?:number, bottom?:number, left?:number ): Ext.util.IRegion;
		/** [Method] Modifies the current region to be constrained to the targetRegion  
		* @param targetRegion Ext.util.IRegion 
		*/
		constrainTo?( targetRegion?:Ext.util.IRegion ): Ext.util.IRegion;
		/** [Method] Checks if this region completely contains the region that is passed in  
		* @param region Ext.util.IRegion 
		*/
		contains?( region?:Ext.util.IRegion ): bool;
		/** [Method] Copy a new instance  */
		copy?(): Ext.util.IRegion;
		/** [Method] Check whether this region is equivalent to the given region  
		* @param region Ext.util.IRegion The region to compare with. 
		*/
		equals?( region?:Ext.util.IRegion ): bool;
		/** [Method] Get the offset amount of a point outside the region  
		* @param axis any optional. 
		* @param p Ext.util.IPoint The point. 
		*/
		getOutOfBoundOffset?( axis?:any, p?:Ext.util.IPoint ): Ext.util.IRegion;
		/** [Method] Get the offset amount on the x axis  
		* @param p number The offset. 
		*/
		getOutOfBoundOffsetX?( p?:number ): number;
		/** [Method] Get the offset amount on the y axis  
		* @param p number The offset. 
		*/
		getOutOfBoundOffsetY?( p?:number ): number;
		/** [Method] Checks if this region intersects the region passed in  
		* @param region Ext.util.IRegion 
		*/
		intersect?( region?:Ext.util.IRegion ): Ext.util.IRegion;
		/** [Method] Checks if this region intersects the region passed in  
		* @param region Ext.util.IRegion 
		*/
		intersect?( region?:Ext.util.IRegion ): bool;
		/** [Method] Check whether the point  offset is out of bounds  
		* @param axis any optional 
		* @param p any The point / offset. 
		*/
		isOutOfBound?( axis?:any, p?:any ): any;
		isOutOfBound?( axis?:string, p?:Ext.util.IPoint ): bool;
		isOutOfBound?( axis?:string, p?:number ): bool;
		/** [Method] Check whether the offset is out of bound in the x axis  
		* @param p number The offset. 
		*/
		isOutOfBoundX?( p?:number ): bool;
		/** [Method] Check whether the offset is out of bound in the y axis  
		* @param p number The offset. 
		*/
		isOutOfBoundY?( p?:number ): bool;
		/** [Method] Round all the properties of this region  */
		round?(): Ext.util.IRegion;
		/** [Method] Dump this to an eye friendly string great for debugging  */
		toString?(): string;
		/** [Method] Translate this region by the given offset amount  
		* @param offset any 
		*/
		translateBy?( offset?:any ): Ext.util.IRegion;
		/** [Method] Returns the smallest region that contains the current AND targetRegion  
		* @param region Ext.util.IRegion 
		*/
		union?( region?:Ext.util.IRegion ): Ext.util.IRegion;
		/** [Method] Creates new Region from an object  Ext util Region from top 0 right 5 bottom 3 left  1  the above is eq  
		* @param o any An object with top, right, bottom, and left properties. 
		*/
		from?( o?:any ): Ext.util.IRegion;
		/** [Method] Retrieves an Ext util Region for a particular element  
		* @param el any The element or its ID. 
		*/
		getRegion?( el?:any ): any;
		getRegion?( el?:string ): Ext.util.IRegion;
		getRegion?( el?:HTMLElement ): Ext.util.IRegion;
		getRegion?( el?:Ext.IElement ): Ext.util.IRegion;
	}
}
declare module Ext.util.sizemonitor {
	export interface IAbstract extends Ext.IBase,Ext.mixin.ITemplatable {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of args  */
		getArgs?(): any[];
		/** [Method] Returns the value of callback  */
		getCallback?(): any;
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Returns the value of scope  */
		getScope?(): any;
		/** [Method] Sets the value of args  
		* @param args any[] 
		*/
		setArgs?( args?:any[] ): void;
		/** [Method] Sets the value of callback  
		* @param callback any 
		*/
		setCallback?( callback?:any ): void;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
		/** [Method] Sets the value of scope  
		* @param scope any 
		*/
		setScope?( scope?:any ): void;
	}
}
declare module Ext.util.sizemonitor {
	export interface IDefault extends Ext.util.sizemonitor.IAbstract {
	}
}
declare module Ext.util {
	export interface ISizeMonitor extends Ext.IBase {
	}
}
declare module Ext.util.sizemonitor {
	export interface IOverflowChange extends Ext.util.sizemonitor.IAbstract {
	}
}
declare module Ext.util.sizemonitor {
	export interface IScroll extends Ext.util.sizemonitor.IAbstract {
	}
}
declare module Ext.util {
	export interface ISortable extends Ext.mixin.IMixin {
		/** [Property] (String) */
		defaultSortDirection?: string;
		/** [Property] (Boolean) */
		isSortable?: bool;
		/** [Property] (String) */
		sortRoot?: string;
		/** [Property] (Ext.util.MixedCollection) */
		sorters?: Ext.util.IMixedCollection;
		/** [Method]  */
		destroy?(): void;
		/** [Method] Performs initialization of this mixin  */
		initSortable?(): void;
		/** [Method] Sorts the data in the Store by one or more of its properties  
		* @param sorters any Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction any The overall direction to sort the data by. 
		* @param where any 
		* @param doSort any 
		*/
		sort?( sorters?:any, direction?:any, where?:any, doSort?:any ): any;
		sort?( sorters?:string, direction?:string, where?:string, doSort?:bool ): Ext.util.ISorter[];
		sort?( sorters?:Ext.util.ISorter[], direction?:string, where?:string, doSort?:bool ): Ext.util.ISorter[];
	}
}
declare module Ext.util {
	export interface ISorter extends Ext.IBase {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Mixed) */
		id?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Function) */
		sorterFn?: any;
		/** [Config Option] (Function) */
		transform?: any;
		/** [Method] Returns the value of direction  */
		getDirection?(): string;
		/** [Method] Returns the value of id  */
		getId?(): any;
		/** [Method] Returns the value of property  */
		getProperty?(): string;
		/** [Method] Returns the value of root  */
		getRoot?(): string;
		/** [Method] Returns the value of sorterFn  */
		getSorterFn?(): any;
		/** [Method] Returns the value of transform  */
		getTransform?(): any;
		/** [Method] Sets the value of direction  
		* @param direction string 
		*/
		setDirection?( direction?:string ): void;
		/** [Method] Sets the value of id  
		* @param id any 
		*/
		setId?( id?:any ): void;
		/** [Method] Sets the value of property  
		* @param property string 
		*/
		setProperty?( property?:string ): void;
		/** [Method] Sets the value of root  
		* @param root string 
		*/
		setRoot?( root?:string ): void;
		/** [Method] Sets the value of sorterFn  
		* @param sorterFn any 
		*/
		setSorterFn?( sorterFn?:any ): void;
		/** [Method] Sets the value of transform  
		* @param transform any 
		*/
		setTransform?( transform?:any ): void;
		/** [Method] Toggles the direction of this Sorter  */
		toggle?(): void;
	}
}
declare module Ext.util {
	export interface ITapRepeater extends Ext.IBase,Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Appends a before event handler  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Adds the specified events to the list of events which this Observable may fire  
		* @param eventNames any Either an object with event names as properties with a value of true or the first event name string if multiple event names are being passed as separate parameters. 
		*/
		addEvents?( eventNames?:any ): void;
		/** [Method] Appends an event handler to this object  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		addListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		addManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		addManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		addManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Removes all listeners for this object  */
		clearListeners?(): void;
		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param events any The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( events?:any ): any;
		enableBubble?( events?:string ): void;
		enableBubble?( events?:string[] ): void;
		/** [Method] Fires the specified event with the passed parameters and execute a function action at the end if there are no liste  
		* @param eventName string The name of the event to fire. 
		* @param args any[] Arguments to pass to handers. 
		* @param fn any Action. 
		* @param scope any Scope of fn. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any ): any;
		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName string The name of the event to fire. 
		* @param args any Variable number of parameters are passed to handlers. 
		*/
		fireEvent?( eventName?:string, args?:any ): bool;
		/** [Method] Returns the value of accelerate  */
		getAccelerate?(): bool;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string;
		/** [Method] Returns the value of bubbleEvents  */
		getBubbleEvents?(): string[];
		/** [Method] Returns the value of delay  */
		getDelay?(): number;
		/** [Method] Returns the value of el  */
		getEl?(): any;
		/** [Method] Returns the value of interval  */
		getInterval?(): number;
		/** [Method] Returns the value of listeners  */
		getListeners?(): any;
		/** [Method] Returns the value of pressCls  */
		getPressCls?(): any;
		/** [Method] Returns the value of preventDefault  */
		getPreventDefault?(): bool;
		/** [Method] Returns the value of stopDefault  */
		getStopDefault?(): bool;
		/** [Method] Returns the value of timer  */
		getTimer?(): number;
		/** [Method] Checks to see if this object has any listeners for a specified event 
		* @param eventName string The name of the event to check for 
		*/
		hasListener?( eventName?:string ): bool;
		/** [Method] Alias for addManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		* @param options any If the eventName parameter was an event name, this is the addListener options. 
		*/
		mon?( object?:any, eventName?:any, fn?:any, scope?:any, options?:any ): any;
		mon?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		mon?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any, options?:any ): void;
		/** [Method] Alias for removeManagedListener  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		mun?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		mun?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		mun?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Alias for addListener  
		* @param eventName any The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn any The method the event invokes. Will be called with arguments given to fireEvent plus the options parameter described below. 
		* @param scope any The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options any An object containing handler configuration.  This object may contain any of the following properties: 
		* @param order any The order of when the listener should be added into the listener queue. Possible values are before, current and after. 
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		on?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for addAfterListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for addBeforeListener  
		* @param eventName any The name of the event to listen for. 
		* @param fn any The method the event invokes. 
		* @param scope any The scope for fn. 
		* @param options any An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		onBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param object any The Observable whose events this object is to relay. 
		* @param events any Array of event names to relay. 
		*/
		relayEvents?( object?:any, events?:any ): Ext.mixin.IObservable;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeAfterListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes a before event handler  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		removeBeforeListener?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Removes an event handler  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		removeListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		removeListener?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Adds listeners to any Observable object or Element which are automatically removed when this Component is destroyed  
		* @param object any The item to which to add a listener/listeners. 
		* @param eventName any The event name, or an object containing event name properties. 
		* @param fn any If the eventName parameter was an event name, this is the handler function. 
		* @param scope any If the eventName parameter was an event name, this is the scope in which the handler function is executed. 
		*/
		removeManagedListener?( object?:any, eventName?:any, fn?:any, scope?:any ): any;
		removeManagedListener?( object?:Ext.mixin.IObservable, eventName?:any, fn?:any, scope?:any ): void;
		removeManagedListener?( object?:HTMLElement, eventName?:any, fn?:any, scope?:any ): void;
		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueuedEvents bool Pass as true to discard any queued events. 
		*/
		resumeEvents?( discardQueuedEvents?:bool ): void;
		/** [Method] Sets the value of accelerate  
		* @param accelerate bool 
		*/
		setAccelerate?( accelerate?:bool ): void;
		/** [Method] Sets the value of bubbleEvents  
		* @param bubbleEvents any 
		*/
		setBubbleEvents?( bubbleEvents?:any ): any;
		setBubbleEvents?( bubbleEvents?:string ): void;
		setBubbleEvents?( bubbleEvents?:string[] ): void;
		/** [Method] Sets the value of delay  
		* @param delay number 
		*/
		setDelay?( delay?:number ): void;
		/** [Method] Sets the value of el  
		* @param el any 
		*/
		setEl?( el?:any ): void;
		/** [Method] Sets the value of interval  
		* @param interval number 
		*/
		setInterval?( interval?:number ): void;
		/** [Method] Sets the value of listeners  
		* @param listeners any 
		*/
		setListeners?( listeners?:any ): void;
		/** [Method] Sets the value of pressCls  
		* @param pressCls any 
		*/
		setPressCls?( pressCls?:any ): void;
		/** [Method] Sets the value of preventDefault  
		* @param preventDefault bool 
		*/
		setPreventDefault?( preventDefault?:bool ): void;
		/** [Method] Sets the value of stopDefault  
		* @param stopDefault bool 
		*/
		setStopDefault?( stopDefault?:bool ): void;
		/** [Method] Sets the value of timer  
		* @param timer number 
		*/
		setTimer?( timer?:number ): void;
		/** [Method] Suspends the firing of all events  */
		suspendEvents?(): void;
		/** [Method] Alias for removeListener  
		* @param eventName any The type of event the handler was associated with. 
		* @param fn any The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope any The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to addListener or the listener will not be removed. 
		* @param options any Extra options object. See addListener for details. 
		* @param order any The order of the listener to remove. Possible values are before, current and after. 
		*/
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:any ): any;
		un?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): void;
		un?( eventName?:any, fn?:string, scope?:any, options?:any, order?:string ): void;
		/** [Method] Alias for removeAfterListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unAfter?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
		/** [Method] Alias for removeBeforeListener  
		* @param eventName any The name of the event the handler was associated with. 
		* @param fn any The handler to remove. 
		* @param scope any The scope originally specified for fn. 
		* @param options any Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): any;
		unBefore?( eventName?:any, fn?:string, scope?:any, options?:any ): void;
	}
}
declare module Ext.util.translatable {
	export interface IAbstract extends Ext.IEvented {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of easing  */
		getEasing?(): any;
		/** [Method] Returns the value of easingX  */
		getEasingX?(): any;
		/** [Method] Returns the value of easingY  */
		getEasingY?(): any;
		/** [Method] Returns the value of useWrapper  */
		getUseWrapper?(): any;
		/** [Method] Sets the value of easing  
		* @param easing any 
		*/
		setEasing?( easing?:any ): void;
		/** [Method] Sets the value of easingX  
		* @param easingX any 
		*/
		setEasingX?( easingX?:any ): void;
		/** [Method] Sets the value of easingY  
		* @param easingY any 
		*/
		setEasingY?( easingY?:any ): void;
		/** [Method] Sets the value of useWrapper  
		* @param useWrapper any 
		*/
		setUseWrapper?( useWrapper?:any ): void;
	}
}
declare module Ext.util.translatable {
	export interface ICssPosition extends Ext.util.translatable.IDom {
		/** [Method]  */
		destroy?(): void;
	}
}
declare module Ext.util.translatable {
	export interface ICssTransform extends Ext.util.translatable.IDom {
		/** [Method]  */
		destroy?(): void;
	}
}
declare module Ext.util.translatable {
	export interface IDom extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of element  */
		getElement?(): any;
		/** [Method] Sets the value of element  
		* @param element any 
		*/
		setElement?( element?:any ): void;
	}
}
declare module Ext.util {
	export interface ITranslatable extends Ext.IBase {
	}
}
declare module Ext.util.translatable {
	export interface IScrollPosition extends Ext.util.translatable.IDom {
		/** [Method]  */
		destroy?(): void;
		/** [Method] Returns the value of useWrapper  */
		getUseWrapper?(): bool;
		/** [Method] Sets the value of useWrapper  
		* @param useWrapper bool 
		*/
		setUseWrapper?( useWrapper?:bool ): void;
	}
}
declare module Ext.util {
	export interface ITranslatableGroup extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of activeIndex  */
		getActiveIndex?(): number;
		/** [Method] Returns the value of itemLength  */
		getItemLength?(): any;
		/** [Method] Returns the value of items  */
		getItems?(): any[];
		/** [Method] Sets the value of activeIndex  
		* @param activeIndex number 
		*/
		setActiveIndex?( activeIndex?:number ): void;
		/** [Method] Sets the value of itemLength  
		* @param itemLength any 
		*/
		setItemLength?( itemLength?:any ): void;
		/** [Method] Sets the value of items  
		* @param items any[] 
		*/
		setItems?( items?:any[] ): void;
	}
}
declare module Ext.util {
	export interface ITranslatableList extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of items  */
		getItems?(): any[];
		/** [Method] Sets the value of items  
		* @param items any[] 
		*/
		setItems?( items?:any[] ): void;
	}
}
declare module Ext.util {
	export interface IWrapper extends Ext.IBase,Ext.mixin.IBindable {
		/** [Method]  */
		destroy?(): void;
	}
}
declare module Ext {
	export interface IVersion {
		/** [Method] Create a closure for deprecated code  
		* @param packageName string The package name. 
		* @param since string The last version before it's deprecated. 
		* @param closure any The callback function to be executed with the specified version is less than the current version. 
		* @param scope any The execution scope (this) if the closure 
		*/
		deprecate?( packageName?:string, since?:string, closure?:any, scope?:any ): void;
		/** [Method] Returns whether this version equals to the supplied argument  
		* @param target any The version to compare with. 
		*/
		equals?( target?:any ): any;
		equals?( target?:string ): bool;
		equals?( target?:number ): bool;
		/** [Method] Returns the build component value  */
		getBuild?(): number;
		/** [Method] Returns the major component value  */
		getMajor?(): number;
		/** [Method] Returns the minor component value  */
		getMinor?(): number;
		/** [Method] Returns the patch component value  */
		getPatch?(): number;
		/** [Method] Returns the release component value  */
		getRelease?(): number;
		/** [Method] Returns shortVersion version without dots and release  */
		getShortVersion?(): string;
		/** [Method] Get the version number of the supplied package name will return the last registered version last Ext setVersion  c  
		* @param packageName string The package name, for example: 'core', 'touch', 'extjs'. 
		*/
		getVersion?( packageName?:string ): Ext.IVersion;
		/** [Method] Convenient alias to isGreaterThan 
		* @param target any 
		*/
		gt?( target?:any ): any;
		gt?( target?:string ): bool;
		gt?( target?:number ): bool;
		/** [Method] Convenient alias to isGreaterThanOrEqual 
		* @param target any 
		*/
		gtEq?( target?:any ): any;
		gtEq?( target?:string ): bool;
		gtEq?( target?:number ): bool;
		/** [Method] Returns whether this version if greater than the supplied argument  
		* @param target any The version to compare with. 
		*/
		isGreaterThan?( target?:any ): any;
		isGreaterThan?( target?:string ): bool;
		isGreaterThan?( target?:number ): bool;
		/** [Method] Returns whether this version if greater than or equal to the supplied argument  
		* @param target any The version to compare with. 
		*/
		isGreaterThanOrEqual?( target?:any ): any;
		isGreaterThanOrEqual?( target?:string ): bool;
		isGreaterThanOrEqual?( target?:number ): bool;
		/** [Method] Returns whether this version if smaller than the supplied argument  
		* @param target any The version to compare with. 
		*/
		isLessThan?( target?:any ): any;
		isLessThan?( target?:string ): bool;
		isLessThan?( target?:number ): bool;
		/** [Method] Returns whether this version if less than or equal to the supplied argument  
		* @param target any The version to compare with. 
		*/
		isLessThanOrEqual?( target?:any ): any;
		isLessThanOrEqual?( target?:string ): bool;
		isLessThanOrEqual?( target?:number ): bool;
		/** [Method] Convenient alias to isLessThan 
		* @param target any 
		*/
		lt?( target?:any ): any;
		lt?( target?:string ): bool;
		lt?( target?:number ): bool;
		/** [Method] Convenient alias to isLessThanOrEqual 
		* @param target any 
		*/
		ltEq?( target?:any ): any;
		ltEq?( target?:string ): bool;
		ltEq?( target?:number ): bool;
		/** [Method] Returns whether this version matches the supplied argument  
		* @param target any The version to compare with. 
		*/
		match?( target?:any ): any;
		match?( target?:string ): bool;
		match?( target?:number ): bool;
		/** [Method] Set version number for the given package name  
		* @param packageName any The package name, for example: 'core', 'touch', 'extjs'. 
		* @param version any The version, for example: '1.2.3alpha', '2.4.0-dev'. 
		*/
		setVersion?( packageName?:any, version?:any ): any;
		setVersion?( packageName?:string, version?:string ): Ext;
		setVersion?( packageName?:string, version?:Ext.IVersion ): Ext;
		/** [Method] Returns this format  major minor patch build release */
		toArray?(): number[];
		/** [Method]  
		* @param value any 
		*/
		toNumber?( value?:any ): number;
		/** [Method] Compare 2 specified versions starting from left to right  
		* @param current string The current version to compare to. 
		* @param target string The target version to compare to. 
		*/
		compare?( current?:string, target?:string ): number;
		/** [Method] Converts a version component to a comparable value  
		* @param value any The value to convert 
		*/
		getComponentValue?( value?:any ): any;
	}
}
declare module Ext {
	export interface IVideo extends Ext.IMedia {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		posterUrl?: string;
		/** [Method] Returns the value of cls  */
		getCls?(): string;
		/** [Method] Returns the value of posterUrl  */
		getPosterUrl?(): string;
		/** [Method] Returns the value of url  */
		getUrl?(): string;
		/** [Method] Returns the value of url  */
		getUrl?(): any[];
		/** [Method] Allows addition of behavior to the rendering phase  */
		initialize?(): void;
		/** [Method] Sets the value of cls  
		* @param cls string 
		*/
		setCls?( cls?:string ): void;
		/** [Method] Sets the value of posterUrl  
		* @param posterUrl string 
		*/
		setPosterUrl?( posterUrl?:string ): void;
		/** [Method] Sets the value of url  
		* @param url any 
		*/
		setUrl?( url?:any ): any;
		setUrl?( url?:string ): void;
		setUrl?( url?:any[] ): void;
		/** [Method] Updates the URL to the poster even if it is rendered  
		* @param newUrl any 
		*/
		updatePosterUrl?( newUrl?:any ): void;
		/** [Method] Sets the URL of the media element  
		* @param newUrl any 
		*/
		updateUrl?( newUrl?:any ): void;
	}
}
declare module Ext.viewport {
	export interface IAndroid extends Ext.viewport.IDefault {
		/** [Method] Returns the value of autoBlurInput  */
		getAutoBlurInput?(): bool;
		/** [Method] Sets the value of autoBlurInput  
		* @param autoBlurInput bool 
		*/
		setAutoBlurInput?( autoBlurInput?:bool ): void;
	}
}
declare module Ext.viewport {
	export interface IDefault extends Ext.IContainer {
		/** [Config Option] (Boolean) */
		autoMaximize?: bool;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Object/String) */
		layout?: any;
		/** [Config Option] (Boolean) */
		preventPanning?: bool;
		/** [Config Option] (Boolean) */
		preventZooming?: bool;
		/** [Property] (Boolean) */
		isReady?: bool;
		/** [Method] Returns the value of autoMaximize  */
		getAutoMaximize?(): bool;
		/** [Method] Returns the value of layout  */
		getLayout?(): any;
		/** [Method] Returns the current orientation  */
		getOrientation?(): string;
		/** [Method] Returns the value of preventPanning  */
		getPreventPanning?(): bool;
		/** [Method] Returns the value of preventZooming  */
		getPreventZooming?(): bool;
		/** [Method] Returns the height and width of the Component  */
		getSize?(): any;
		/** [Method] Returns the value of useBodyElement  */
		getUseBodyElement?(): bool;
		/** [Method] Retrieves the document height  */
		getWindowHeight?(): number;
		/** [Method] Retrieves the document width  */
		getWindowWidth?(): number;
		/** [Method] Sets the value of autoMaximize  
		* @param autoMaximize bool 
		*/
		setAutoMaximize?( autoMaximize?:bool ): void;
		/** [Method] Sets the value of layout  
		* @param layout any 
		*/
		setLayout?( layout?:any ): void;
		/** [Method] Sets the value of preventPanning  
		* @param preventPanning bool 
		*/
		setPreventPanning?( preventPanning?:bool ): void;
		/** [Method] Sets the value of preventZooming  
		* @param preventZooming bool 
		*/
		setPreventZooming?( preventZooming?:bool ): void;
		/** [Method] Sets the value of useBodyElement  
		* @param useBodyElement bool 
		*/
		setUseBodyElement?( useBodyElement?:bool ): void;
	}
}
declare module Ext.viewport {
	export interface IIos extends Ext.viewport.IDefault {
	}
}
declare module Ext {
	export interface IViewport extends Ext.viewport.IDefault {
	}
	export class Viewport {
	}
}
declare module Ext.viewport {
	export interface IViewport extends Ext.IBase {
	}
}
declare module Ext.viewport {
	export interface IWindowsPhone extends Ext.viewport.IDefault {
		/** [Method] so one pixel line is displayed on the right side of the screen  */
		initialize?(): void;
	}
}
declare module Ext.viewport {
	export interface IWP extends Ext.viewport.IDefault {
		/** [Method] so one pixel line is displayed on the right side of the screen  */
		initialize?(): void;
	}
}
declare module Ext {
	export interface IXTemplate extends Ext.ITemplate {
		/** [Method] Appends the result of this template to the provided output array  
		* @param values any The template values. See apply. 
		* @param out any[] The array to which output is pushed. 
		* @param parent any 
		*/
		applyOut?( values?:any, out?:any[], parent?:any ): any[];
		/** [Method] Does nothing  */
		compile?(): Ext.IXTemplate;
		/** [Method] Gets an XTemplate from an object an instance of an Ext define d class 
		* @param instance any The object from which to get the XTemplate (must be an instance of an Ext.define'd class). 
		* @param name string The name of the property by which to get the XTemplate. 
		*/
		getTpl?( instance?:any, name?:string ): Ext.IXTemplate;
	}
}
declare module Ext {
	export interface IXTemplateCompiler extends Ext.IXTemplateParser {
		/** [Method] This method is called to process lt tpl case action gt 
		* @param action any 
		*/
		doCase?( action?:any ): void;
		/** [Method] This method is called to process lt tpl default gt */
		doDefault?(): void;
		/** [Method] This method is called to process lt tpl else gt */
		doElse?(): void;
		/** [Method] This method is called to process lt tpl elseif action gt 
		* @param action any 
		* @param actions any 
		*/
		doElseIf?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process lt tpl gt 
		* @param type any 
		* @param actions any 
		*/
		doEnd?( type?:any, actions?:any ): void;
		/** [Method] This method is called to process text 
		* @param text any 
		*/
		doEval?( text?:any ): void;
		/** [Method] This method is called to process lt tpl exec action gt 
		* @param action any 
		* @param actions any 
		*/
		doExec?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process expressions like  expr 
		* @param expr any 
		*/
		doExpr?( expr?:any ): void;
		/** [Method] This method is called to process lt tpl for action gt 
		* @param action any 
		* @param actions any 
		*/
		doFor?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process lt tpl if action gt 
		* @param action any 
		* @param actions any 
		*/
		doIf?( action?:any, actions?:any ): void;
		/** [Method] This method is called to process lt tpl switch action gt 
		* @param action any 
		*/
		doSwitch?( action?:any ): void;
		/** [Method] This method is called to process simple tags like tag  
		* @param tag any 
		*/
		doTag?( tag?:any ): void;
		/** [Method] This method is called to process a piece of raw text from the tpl  
		* @param text any 
		*/
		doText?( text?:any ): void;
	}
}
declare module Ext {
	export interface IXTemplateParser extends Ext.IBase {
		/** [Property] (Number) */
		level?: number;
		/** [Method] This method is called to process lt tpl case action gt 
		* @param action string 
		* @param actions any Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doCase?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl default gt */
		doDefault?(): void;
		/** [Method] This method is called to process lt tpl else gt */
		doElse?(): void;
		/** [Method] This method is called to process lt tpl elseif action gt 
		* @param action string 
		* @param actions any Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doElseIf?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl gt 
		* @param type string The type of action that is being ended. 
		* @param actions any The other actions keyed by the attribute name (such as 'exec'). 
		*/
		doEnd?( type?:string, actions?:any ): void;
		/** [Method] This method is called to process text 
		* @param text string 
		*/
		doEval?( text?:string ): void;
		/** [Method] This method is called to process lt tpl exec action gt 
		* @param action string 
		* @param actions any Other actions keyed by the attribute name. 
		*/
		doExec?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process expressions like  expr 
		* @param expr string The body of the expression (inside "{[" and "]}"). 
		*/
		doExpr?( expr?:string ): void;
		/** [Method] This method is called to process lt tpl for action gt 
		* @param action string 
		* @param actions any Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doFor?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl if action gt 
		* @param action string 
		* @param actions any Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doIf?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process lt tpl switch action gt 
		* @param action string 
		* @param actions any Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doSwitch?( action?:string, actions?:any ): void;
		/** [Method] This method is called to process simple tags like tag  
		* @param tag string 
		*/
		doTag?( tag?:string ): void;
		/** [Method] This method is called to process a piece of raw text from the tpl  
		* @param text string 
		*/
		doText?( text?:string ): void;
		/** [Method] This method is called to process an empty lt tpl gt */
		doTpl?(): void;
	}
}
